/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// CreateDFCKeyOutput struct for CreateDFCKeyOutput
type CreateDFCKeyOutput struct {
	FragmentResults []int64 `json:"fragment_results,omitempty"`
}

// NewCreateDFCKeyOutput instantiates a new CreateDFCKeyOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDFCKeyOutput() *CreateDFCKeyOutput {
	this := CreateDFCKeyOutput{}
	return &this
}

// NewCreateDFCKeyOutputWithDefaults instantiates a new CreateDFCKeyOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDFCKeyOutputWithDefaults() *CreateDFCKeyOutput {
	this := CreateDFCKeyOutput{}
	return &this
}

// GetFragmentResults returns the FragmentResults field value if set, zero value otherwise.
func (o *CreateDFCKeyOutput) GetFragmentResults() []int64 {
	if o == nil || o.FragmentResults == nil {
		var ret []int64
		return ret
	}
	return o.FragmentResults
}

// GetFragmentResultsOk returns a tuple with the FragmentResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDFCKeyOutput) GetFragmentResultsOk() ([]int64, bool) {
	if o == nil || o.FragmentResults == nil {
		return nil, false
	}
	return o.FragmentResults, true
}

// HasFragmentResults returns a boolean if a field has been set.
func (o *CreateDFCKeyOutput) HasFragmentResults() bool {
	if o != nil && o.FragmentResults != nil {
		return true
	}

	return false
}

// SetFragmentResults gets a reference to the given []int64 and assigns it to the FragmentResults field.
func (o *CreateDFCKeyOutput) SetFragmentResults(v []int64) {
	o.FragmentResults = v
}

func (o CreateDFCKeyOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FragmentResults != nil {
		toSerialize["fragment_results"] = o.FragmentResults
	}
	return json.Marshal(toSerialize)
}

type NullableCreateDFCKeyOutput struct {
	value *CreateDFCKeyOutput
	isSet bool
}

func (v NullableCreateDFCKeyOutput) Get() *CreateDFCKeyOutput {
	return v.value
}

func (v *NullableCreateDFCKeyOutput) Set(val *CreateDFCKeyOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDFCKeyOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDFCKeyOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDFCKeyOutput(val *CreateDFCKeyOutput) *NullableCreateDFCKeyOutput {
	return &NullableCreateDFCKeyOutput{value: val, isSet: true}
}

func (v NullableCreateDFCKeyOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDFCKeyOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


