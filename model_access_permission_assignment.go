/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// AccessPermissionAssignment struct for AccessPermissionAssignment
type AccessPermissionAssignment struct {
	AccessId *string `json:"access_id,omitempty"`
	AccessType *string `json:"access_type,omitempty"`
	SubClaims *map[string][]string `json:"sub_claims,omitempty"`
}

// NewAccessPermissionAssignment instantiates a new AccessPermissionAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessPermissionAssignment() *AccessPermissionAssignment {
	this := AccessPermissionAssignment{}
	return &this
}

// NewAccessPermissionAssignmentWithDefaults instantiates a new AccessPermissionAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessPermissionAssignmentWithDefaults() *AccessPermissionAssignment {
	this := AccessPermissionAssignment{}
	return &this
}

// GetAccessId returns the AccessId field value if set, zero value otherwise.
func (o *AccessPermissionAssignment) GetAccessId() string {
	if o == nil || o.AccessId == nil {
		var ret string
		return ret
	}
	return *o.AccessId
}

// GetAccessIdOk returns a tuple with the AccessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPermissionAssignment) GetAccessIdOk() (*string, bool) {
	if o == nil || o.AccessId == nil {
		return nil, false
	}
	return o.AccessId, true
}

// HasAccessId returns a boolean if a field has been set.
func (o *AccessPermissionAssignment) HasAccessId() bool {
	if o != nil && o.AccessId != nil {
		return true
	}

	return false
}

// SetAccessId gets a reference to the given string and assigns it to the AccessId field.
func (o *AccessPermissionAssignment) SetAccessId(v string) {
	o.AccessId = &v
}

// GetAccessType returns the AccessType field value if set, zero value otherwise.
func (o *AccessPermissionAssignment) GetAccessType() string {
	if o == nil || o.AccessType == nil {
		var ret string
		return ret
	}
	return *o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPermissionAssignment) GetAccessTypeOk() (*string, bool) {
	if o == nil || o.AccessType == nil {
		return nil, false
	}
	return o.AccessType, true
}

// HasAccessType returns a boolean if a field has been set.
func (o *AccessPermissionAssignment) HasAccessType() bool {
	if o != nil && o.AccessType != nil {
		return true
	}

	return false
}

// SetAccessType gets a reference to the given string and assigns it to the AccessType field.
func (o *AccessPermissionAssignment) SetAccessType(v string) {
	o.AccessType = &v
}

// GetSubClaims returns the SubClaims field value if set, zero value otherwise.
func (o *AccessPermissionAssignment) GetSubClaims() map[string][]string {
	if o == nil || o.SubClaims == nil {
		var ret map[string][]string
		return ret
	}
	return *o.SubClaims
}

// GetSubClaimsOk returns a tuple with the SubClaims field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPermissionAssignment) GetSubClaimsOk() (*map[string][]string, bool) {
	if o == nil || o.SubClaims == nil {
		return nil, false
	}
	return o.SubClaims, true
}

// HasSubClaims returns a boolean if a field has been set.
func (o *AccessPermissionAssignment) HasSubClaims() bool {
	if o != nil && o.SubClaims != nil {
		return true
	}

	return false
}

// SetSubClaims gets a reference to the given map[string][]string and assigns it to the SubClaims field.
func (o *AccessPermissionAssignment) SetSubClaims(v map[string][]string) {
	o.SubClaims = &v
}

func (o AccessPermissionAssignment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessId != nil {
		toSerialize["access_id"] = o.AccessId
	}
	if o.AccessType != nil {
		toSerialize["access_type"] = o.AccessType
	}
	if o.SubClaims != nil {
		toSerialize["sub_claims"] = o.SubClaims
	}
	return json.Marshal(toSerialize)
}

type NullableAccessPermissionAssignment struct {
	value *AccessPermissionAssignment
	isSet bool
}

func (v NullableAccessPermissionAssignment) Get() *AccessPermissionAssignment {
	return v.value
}

func (v *NullableAccessPermissionAssignment) Set(val *AccessPermissionAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessPermissionAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessPermissionAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessPermissionAssignment(val *AccessPermissionAssignment) *NullableAccessPermissionAssignment {
	return &NullableAccessPermissionAssignment{value: val, isSet: true}
}

func (v NullableAccessPermissionAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessPermissionAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


