/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// checks if the ServerInventoryMigration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInventoryMigration{}

// ServerInventoryMigration struct for ServerInventoryMigration
type ServerInventoryMigration struct {
	General *MigrationGeneral `json:"general,omitempty"`
	Payload *ServerInventoryPayload `json:"payload,omitempty"`
}

// NewServerInventoryMigration instantiates a new ServerInventoryMigration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInventoryMigration() *ServerInventoryMigration {
	this := ServerInventoryMigration{}
	return &this
}

// NewServerInventoryMigrationWithDefaults instantiates a new ServerInventoryMigration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInventoryMigrationWithDefaults() *ServerInventoryMigration {
	this := ServerInventoryMigration{}
	return &this
}

// GetGeneral returns the General field value if set, zero value otherwise.
func (o *ServerInventoryMigration) GetGeneral() MigrationGeneral {
	if o == nil || IsNil(o.General) {
		var ret MigrationGeneral
		return ret
	}
	return *o.General
}

// GetGeneralOk returns a tuple with the General field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInventoryMigration) GetGeneralOk() (*MigrationGeneral, bool) {
	if o == nil || IsNil(o.General) {
		return nil, false
	}
	return o.General, true
}

// HasGeneral returns a boolean if a field has been set.
func (o *ServerInventoryMigration) HasGeneral() bool {
	if o != nil && !IsNil(o.General) {
		return true
	}

	return false
}

// SetGeneral gets a reference to the given MigrationGeneral and assigns it to the General field.
func (o *ServerInventoryMigration) SetGeneral(v MigrationGeneral) {
	o.General = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *ServerInventoryMigration) GetPayload() ServerInventoryPayload {
	if o == nil || IsNil(o.Payload) {
		var ret ServerInventoryPayload
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInventoryMigration) GetPayloadOk() (*ServerInventoryPayload, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *ServerInventoryMigration) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given ServerInventoryPayload and assigns it to the Payload field.
func (o *ServerInventoryMigration) SetPayload(v ServerInventoryPayload) {
	o.Payload = &v
}

func (o ServerInventoryMigration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInventoryMigration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.General) {
		toSerialize["general"] = o.General
	}
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	return toSerialize, nil
}

type NullableServerInventoryMigration struct {
	value *ServerInventoryMigration
	isSet bool
}

func (v NullableServerInventoryMigration) Get() *ServerInventoryMigration {
	return v.value
}

func (v *NullableServerInventoryMigration) Set(val *ServerInventoryMigration) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInventoryMigration) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInventoryMigration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInventoryMigration(val *ServerInventoryMigration) *NullableServerInventoryMigration {
	return &NullableServerInventoryMigration{value: val, isSet: true}
}

func (v NullableServerInventoryMigration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInventoryMigration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


