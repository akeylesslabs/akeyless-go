/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// CertificateExpirationEvent struct for CertificateExpirationEvent
type CertificateExpirationEvent struct {
	SecondsBefore *int64 `json:"seconds_before,omitempty"`
}

// NewCertificateExpirationEvent instantiates a new CertificateExpirationEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateExpirationEvent() *CertificateExpirationEvent {
	this := CertificateExpirationEvent{}
	return &this
}

// NewCertificateExpirationEventWithDefaults instantiates a new CertificateExpirationEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateExpirationEventWithDefaults() *CertificateExpirationEvent {
	this := CertificateExpirationEvent{}
	return &this
}

// GetSecondsBefore returns the SecondsBefore field value if set, zero value otherwise.
func (o *CertificateExpirationEvent) GetSecondsBefore() int64 {
	if o == nil || o.SecondsBefore == nil {
		var ret int64
		return ret
	}
	return *o.SecondsBefore
}

// GetSecondsBeforeOk returns a tuple with the SecondsBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateExpirationEvent) GetSecondsBeforeOk() (*int64, bool) {
	if o == nil || o.SecondsBefore == nil {
		return nil, false
	}
	return o.SecondsBefore, true
}

// HasSecondsBefore returns a boolean if a field has been set.
func (o *CertificateExpirationEvent) HasSecondsBefore() bool {
	if o != nil && o.SecondsBefore != nil {
		return true
	}

	return false
}

// SetSecondsBefore gets a reference to the given int64 and assigns it to the SecondsBefore field.
func (o *CertificateExpirationEvent) SetSecondsBefore(v int64) {
	o.SecondsBefore = &v
}

func (o CertificateExpirationEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SecondsBefore != nil {
		toSerialize["seconds_before"] = o.SecondsBefore
	}
	return json.Marshal(toSerialize)
}

type NullableCertificateExpirationEvent struct {
	value *CertificateExpirationEvent
	isSet bool
}

func (v NullableCertificateExpirationEvent) Get() *CertificateExpirationEvent {
	return v.value
}

func (v *NullableCertificateExpirationEvent) Set(val *CertificateExpirationEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateExpirationEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateExpirationEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateExpirationEvent(val *CertificateExpirationEvent) *NullableCertificateExpirationEvent {
	return &NullableCertificateExpirationEvent{value: val, isSet: true}
}

func (v NullableCertificateExpirationEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateExpirationEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


