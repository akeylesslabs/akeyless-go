/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// KMIPEnvironmentCreateResponse struct for KMIPEnvironmentCreateResponse
type KMIPEnvironmentCreateResponse struct {
	CaCert []int32 `json:"ca_cert,omitempty"`
	Root *string `json:"root,omitempty"`
}

// NewKMIPEnvironmentCreateResponse instantiates a new KMIPEnvironmentCreateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKMIPEnvironmentCreateResponse() *KMIPEnvironmentCreateResponse {
	this := KMIPEnvironmentCreateResponse{}
	return &this
}

// NewKMIPEnvironmentCreateResponseWithDefaults instantiates a new KMIPEnvironmentCreateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKMIPEnvironmentCreateResponseWithDefaults() *KMIPEnvironmentCreateResponse {
	this := KMIPEnvironmentCreateResponse{}
	return &this
}

// GetCaCert returns the CaCert field value if set, zero value otherwise.
func (o *KMIPEnvironmentCreateResponse) GetCaCert() []int32 {
	if o == nil || o.CaCert == nil {
		var ret []int32
		return ret
	}
	return o.CaCert
}

// GetCaCertOk returns a tuple with the CaCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KMIPEnvironmentCreateResponse) GetCaCertOk() ([]int32, bool) {
	if o == nil || o.CaCert == nil {
		return nil, false
	}
	return o.CaCert, true
}

// HasCaCert returns a boolean if a field has been set.
func (o *KMIPEnvironmentCreateResponse) HasCaCert() bool {
	if o != nil && o.CaCert != nil {
		return true
	}

	return false
}

// SetCaCert gets a reference to the given []int32 and assigns it to the CaCert field.
func (o *KMIPEnvironmentCreateResponse) SetCaCert(v []int32) {
	o.CaCert = v
}

// GetRoot returns the Root field value if set, zero value otherwise.
func (o *KMIPEnvironmentCreateResponse) GetRoot() string {
	if o == nil || o.Root == nil {
		var ret string
		return ret
	}
	return *o.Root
}

// GetRootOk returns a tuple with the Root field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KMIPEnvironmentCreateResponse) GetRootOk() (*string, bool) {
	if o == nil || o.Root == nil {
		return nil, false
	}
	return o.Root, true
}

// HasRoot returns a boolean if a field has been set.
func (o *KMIPEnvironmentCreateResponse) HasRoot() bool {
	if o != nil && o.Root != nil {
		return true
	}

	return false
}

// SetRoot gets a reference to the given string and assigns it to the Root field.
func (o *KMIPEnvironmentCreateResponse) SetRoot(v string) {
	o.Root = &v
}

func (o KMIPEnvironmentCreateResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CaCert != nil {
		toSerialize["ca_cert"] = o.CaCert
	}
	if o.Root != nil {
		toSerialize["root"] = o.Root
	}
	return json.Marshal(toSerialize)
}

type NullableKMIPEnvironmentCreateResponse struct {
	value *KMIPEnvironmentCreateResponse
	isSet bool
}

func (v NullableKMIPEnvironmentCreateResponse) Get() *KMIPEnvironmentCreateResponse {
	return v.value
}

func (v *NullableKMIPEnvironmentCreateResponse) Set(val *KMIPEnvironmentCreateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKMIPEnvironmentCreateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKMIPEnvironmentCreateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKMIPEnvironmentCreateResponse(val *KMIPEnvironmentCreateResponse) *NullableKMIPEnvironmentCreateResponse {
	return &NullableKMIPEnvironmentCreateResponse{value: val, isSet: true}
}

func (v NullableKMIPEnvironmentCreateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKMIPEnvironmentCreateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


