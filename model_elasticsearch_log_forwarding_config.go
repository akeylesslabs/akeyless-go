/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// ElasticsearchLogForwardingConfig struct for ElasticsearchLogForwardingConfig
type ElasticsearchLogForwardingConfig struct {
	ElasticsearchHost *string `json:"elasticsearch_host,omitempty"`
	ElasticsearchIndex *string `json:"elasticsearch_index,omitempty"`
	ElasticsearchNodes *string `json:"elasticsearch_nodes,omitempty"`
}

// NewElasticsearchLogForwardingConfig instantiates a new ElasticsearchLogForwardingConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElasticsearchLogForwardingConfig() *ElasticsearchLogForwardingConfig {
	this := ElasticsearchLogForwardingConfig{}
	return &this
}

// NewElasticsearchLogForwardingConfigWithDefaults instantiates a new ElasticsearchLogForwardingConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElasticsearchLogForwardingConfigWithDefaults() *ElasticsearchLogForwardingConfig {
	this := ElasticsearchLogForwardingConfig{}
	return &this
}

// GetElasticsearchHost returns the ElasticsearchHost field value if set, zero value otherwise.
func (o *ElasticsearchLogForwardingConfig) GetElasticsearchHost() string {
	if o == nil || o.ElasticsearchHost == nil {
		var ret string
		return ret
	}
	return *o.ElasticsearchHost
}

// GetElasticsearchHostOk returns a tuple with the ElasticsearchHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticsearchLogForwardingConfig) GetElasticsearchHostOk() (*string, bool) {
	if o == nil || o.ElasticsearchHost == nil {
		return nil, false
	}
	return o.ElasticsearchHost, true
}

// HasElasticsearchHost returns a boolean if a field has been set.
func (o *ElasticsearchLogForwardingConfig) HasElasticsearchHost() bool {
	if o != nil && o.ElasticsearchHost != nil {
		return true
	}

	return false
}

// SetElasticsearchHost gets a reference to the given string and assigns it to the ElasticsearchHost field.
func (o *ElasticsearchLogForwardingConfig) SetElasticsearchHost(v string) {
	o.ElasticsearchHost = &v
}

// GetElasticsearchIndex returns the ElasticsearchIndex field value if set, zero value otherwise.
func (o *ElasticsearchLogForwardingConfig) GetElasticsearchIndex() string {
	if o == nil || o.ElasticsearchIndex == nil {
		var ret string
		return ret
	}
	return *o.ElasticsearchIndex
}

// GetElasticsearchIndexOk returns a tuple with the ElasticsearchIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticsearchLogForwardingConfig) GetElasticsearchIndexOk() (*string, bool) {
	if o == nil || o.ElasticsearchIndex == nil {
		return nil, false
	}
	return o.ElasticsearchIndex, true
}

// HasElasticsearchIndex returns a boolean if a field has been set.
func (o *ElasticsearchLogForwardingConfig) HasElasticsearchIndex() bool {
	if o != nil && o.ElasticsearchIndex != nil {
		return true
	}

	return false
}

// SetElasticsearchIndex gets a reference to the given string and assigns it to the ElasticsearchIndex field.
func (o *ElasticsearchLogForwardingConfig) SetElasticsearchIndex(v string) {
	o.ElasticsearchIndex = &v
}

// GetElasticsearchNodes returns the ElasticsearchNodes field value if set, zero value otherwise.
func (o *ElasticsearchLogForwardingConfig) GetElasticsearchNodes() string {
	if o == nil || o.ElasticsearchNodes == nil {
		var ret string
		return ret
	}
	return *o.ElasticsearchNodes
}

// GetElasticsearchNodesOk returns a tuple with the ElasticsearchNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticsearchLogForwardingConfig) GetElasticsearchNodesOk() (*string, bool) {
	if o == nil || o.ElasticsearchNodes == nil {
		return nil, false
	}
	return o.ElasticsearchNodes, true
}

// HasElasticsearchNodes returns a boolean if a field has been set.
func (o *ElasticsearchLogForwardingConfig) HasElasticsearchNodes() bool {
	if o != nil && o.ElasticsearchNodes != nil {
		return true
	}

	return false
}

// SetElasticsearchNodes gets a reference to the given string and assigns it to the ElasticsearchNodes field.
func (o *ElasticsearchLogForwardingConfig) SetElasticsearchNodes(v string) {
	o.ElasticsearchNodes = &v
}

func (o ElasticsearchLogForwardingConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ElasticsearchHost != nil {
		toSerialize["elasticsearch_host"] = o.ElasticsearchHost
	}
	if o.ElasticsearchIndex != nil {
		toSerialize["elasticsearch_index"] = o.ElasticsearchIndex
	}
	if o.ElasticsearchNodes != nil {
		toSerialize["elasticsearch_nodes"] = o.ElasticsearchNodes
	}
	return json.Marshal(toSerialize)
}

type NullableElasticsearchLogForwardingConfig struct {
	value *ElasticsearchLogForwardingConfig
	isSet bool
}

func (v NullableElasticsearchLogForwardingConfig) Get() *ElasticsearchLogForwardingConfig {
	return v.value
}

func (v *NullableElasticsearchLogForwardingConfig) Set(val *ElasticsearchLogForwardingConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableElasticsearchLogForwardingConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableElasticsearchLogForwardingConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElasticsearchLogForwardingConfig(val *ElasticsearchLogForwardingConfig) *NullableElasticsearchLogForwardingConfig {
	return &NullableElasticsearchLogForwardingConfig{value: val, isSet: true}
}

func (v NullableElasticsearchLogForwardingConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElasticsearchLogForwardingConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


