/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// checks if the MigrationGeneral type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MigrationGeneral{}

// MigrationGeneral struct for MigrationGeneral
type MigrationGeneral struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	NewName *string `json:"new_name,omitempty"`
	Prefix *string `json:"prefix,omitempty"`
	ProtectionKey *string `json:"protection_key,omitempty"`
	Status *string `json:"status,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewMigrationGeneral instantiates a new MigrationGeneral object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMigrationGeneral() *MigrationGeneral {
	this := MigrationGeneral{}
	return &this
}

// NewMigrationGeneralWithDefaults instantiates a new MigrationGeneral object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMigrationGeneralWithDefaults() *MigrationGeneral {
	this := MigrationGeneral{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MigrationGeneral) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationGeneral) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MigrationGeneral) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MigrationGeneral) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MigrationGeneral) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationGeneral) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MigrationGeneral) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MigrationGeneral) SetName(v string) {
	o.Name = &v
}

// GetNewName returns the NewName field value if set, zero value otherwise.
func (o *MigrationGeneral) GetNewName() string {
	if o == nil || IsNil(o.NewName) {
		var ret string
		return ret
	}
	return *o.NewName
}

// GetNewNameOk returns a tuple with the NewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationGeneral) GetNewNameOk() (*string, bool) {
	if o == nil || IsNil(o.NewName) {
		return nil, false
	}
	return o.NewName, true
}

// HasNewName returns a boolean if a field has been set.
func (o *MigrationGeneral) HasNewName() bool {
	if o != nil && !IsNil(o.NewName) {
		return true
	}

	return false
}

// SetNewName gets a reference to the given string and assigns it to the NewName field.
func (o *MigrationGeneral) SetNewName(v string) {
	o.NewName = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *MigrationGeneral) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationGeneral) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *MigrationGeneral) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *MigrationGeneral) SetPrefix(v string) {
	o.Prefix = &v
}

// GetProtectionKey returns the ProtectionKey field value if set, zero value otherwise.
func (o *MigrationGeneral) GetProtectionKey() string {
	if o == nil || IsNil(o.ProtectionKey) {
		var ret string
		return ret
	}
	return *o.ProtectionKey
}

// GetProtectionKeyOk returns a tuple with the ProtectionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationGeneral) GetProtectionKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ProtectionKey) {
		return nil, false
	}
	return o.ProtectionKey, true
}

// HasProtectionKey returns a boolean if a field has been set.
func (o *MigrationGeneral) HasProtectionKey() bool {
	if o != nil && !IsNil(o.ProtectionKey) {
		return true
	}

	return false
}

// SetProtectionKey gets a reference to the given string and assigns it to the ProtectionKey field.
func (o *MigrationGeneral) SetProtectionKey(v string) {
	o.ProtectionKey = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MigrationGeneral) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationGeneral) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MigrationGeneral) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MigrationGeneral) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MigrationGeneral) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationGeneral) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MigrationGeneral) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MigrationGeneral) SetType(v string) {
	o.Type = &v
}

func (o MigrationGeneral) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MigrationGeneral) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NewName) {
		toSerialize["new_name"] = o.NewName
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.ProtectionKey) {
		toSerialize["protection_key"] = o.ProtectionKey
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableMigrationGeneral struct {
	value *MigrationGeneral
	isSet bool
}

func (v NullableMigrationGeneral) Get() *MigrationGeneral {
	return v.value
}

func (v *NullableMigrationGeneral) Set(val *MigrationGeneral) {
	v.value = val
	v.isSet = true
}

func (v NullableMigrationGeneral) IsSet() bool {
	return v.isSet
}

func (v *NullableMigrationGeneral) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMigrationGeneral(val *MigrationGeneral) *NullableMigrationGeneral {
	return &NullableMigrationGeneral{value: val, isSet: true}
}

func (v NullableMigrationGeneral) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMigrationGeneral) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


