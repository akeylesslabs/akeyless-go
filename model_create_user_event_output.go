/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// CreateUserEventOutput struct for CreateUserEventOutput
type CreateUserEventOutput struct {
	Response *string `json:"response,omitempty"`
}

// NewCreateUserEventOutput instantiates a new CreateUserEventOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserEventOutput() *CreateUserEventOutput {
	this := CreateUserEventOutput{}
	return &this
}

// NewCreateUserEventOutputWithDefaults instantiates a new CreateUserEventOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserEventOutputWithDefaults() *CreateUserEventOutput {
	this := CreateUserEventOutput{}
	return &this
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *CreateUserEventOutput) GetResponse() string {
	if o == nil || o.Response == nil {
		var ret string
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserEventOutput) GetResponseOk() (*string, bool) {
	if o == nil || o.Response == nil {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *CreateUserEventOutput) HasResponse() bool {
	if o != nil && o.Response != nil {
		return true
	}

	return false
}

// SetResponse gets a reference to the given string and assigns it to the Response field.
func (o *CreateUserEventOutput) SetResponse(v string) {
	o.Response = &v
}

func (o CreateUserEventOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Response != nil {
		toSerialize["response"] = o.Response
	}
	return json.Marshal(toSerialize)
}

type NullableCreateUserEventOutput struct {
	value *CreateUserEventOutput
	isSet bool
}

func (v NullableCreateUserEventOutput) Get() *CreateUserEventOutput {
	return v.value
}

func (v *NullableCreateUserEventOutput) Set(val *CreateUserEventOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserEventOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserEventOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserEventOutput(val *CreateUserEventOutput) *NullableCreateUserEventOutput {
	return &NullableCreateUserEventOutput{value: val, isSet: true}
}

func (v NullableCreateUserEventOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserEventOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


