/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// Encrypt struct for Encrypt
type Encrypt struct {
	// The display id of the key to use in the encryption process
	DisplayId *string `json:"display-id,omitempty"`
	// name-value pair that specifies the encryption context to be used for authenticated encryption. If used here, the same value must be supplied to the decrypt command or decryption will fail
	EncryptionContext *map[string]string `json:"encryption-context,omitempty"`
	// The name of the key to use in the encryption process
	KeyName *string `json:"key-name,omitempty"`
	// Data to be encrypted
	Plaintext *string `json:"plaintext,omitempty"`
	// Authentication token (see `/auth` and `/configure`)
	Token *string `json:"token,omitempty"`
	// The universal identity token, Required only for universal_identity authentication
	UidToken *string `json:"uid-token,omitempty"`
}

// NewEncrypt instantiates a new Encrypt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncrypt() *Encrypt {
	this := Encrypt{}
	return &this
}

// NewEncryptWithDefaults instantiates a new Encrypt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptWithDefaults() *Encrypt {
	this := Encrypt{}
	return &this
}

// GetDisplayId returns the DisplayId field value if set, zero value otherwise.
func (o *Encrypt) GetDisplayId() string {
	if o == nil || o.DisplayId == nil {
		var ret string
		return ret
	}
	return *o.DisplayId
}

// GetDisplayIdOk returns a tuple with the DisplayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Encrypt) GetDisplayIdOk() (*string, bool) {
	if o == nil || o.DisplayId == nil {
		return nil, false
	}
	return o.DisplayId, true
}

// HasDisplayId returns a boolean if a field has been set.
func (o *Encrypt) HasDisplayId() bool {
	if o != nil && o.DisplayId != nil {
		return true
	}

	return false
}

// SetDisplayId gets a reference to the given string and assigns it to the DisplayId field.
func (o *Encrypt) SetDisplayId(v string) {
	o.DisplayId = &v
}

// GetEncryptionContext returns the EncryptionContext field value if set, zero value otherwise.
func (o *Encrypt) GetEncryptionContext() map[string]string {
	if o == nil || o.EncryptionContext == nil {
		var ret map[string]string
		return ret
	}
	return *o.EncryptionContext
}

// GetEncryptionContextOk returns a tuple with the EncryptionContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Encrypt) GetEncryptionContextOk() (*map[string]string, bool) {
	if o == nil || o.EncryptionContext == nil {
		return nil, false
	}
	return o.EncryptionContext, true
}

// HasEncryptionContext returns a boolean if a field has been set.
func (o *Encrypt) HasEncryptionContext() bool {
	if o != nil && o.EncryptionContext != nil {
		return true
	}

	return false
}

// SetEncryptionContext gets a reference to the given map[string]string and assigns it to the EncryptionContext field.
func (o *Encrypt) SetEncryptionContext(v map[string]string) {
	o.EncryptionContext = &v
}

// GetKeyName returns the KeyName field value if set, zero value otherwise.
func (o *Encrypt) GetKeyName() string {
	if o == nil || o.KeyName == nil {
		var ret string
		return ret
	}
	return *o.KeyName
}

// GetKeyNameOk returns a tuple with the KeyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Encrypt) GetKeyNameOk() (*string, bool) {
	if o == nil || o.KeyName == nil {
		return nil, false
	}
	return o.KeyName, true
}

// HasKeyName returns a boolean if a field has been set.
func (o *Encrypt) HasKeyName() bool {
	if o != nil && o.KeyName != nil {
		return true
	}

	return false
}

// SetKeyName gets a reference to the given string and assigns it to the KeyName field.
func (o *Encrypt) SetKeyName(v string) {
	o.KeyName = &v
}

// GetPlaintext returns the Plaintext field value if set, zero value otherwise.
func (o *Encrypt) GetPlaintext() string {
	if o == nil || o.Plaintext == nil {
		var ret string
		return ret
	}
	return *o.Plaintext
}

// GetPlaintextOk returns a tuple with the Plaintext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Encrypt) GetPlaintextOk() (*string, bool) {
	if o == nil || o.Plaintext == nil {
		return nil, false
	}
	return o.Plaintext, true
}

// HasPlaintext returns a boolean if a field has been set.
func (o *Encrypt) HasPlaintext() bool {
	if o != nil && o.Plaintext != nil {
		return true
	}

	return false
}

// SetPlaintext gets a reference to the given string and assigns it to the Plaintext field.
func (o *Encrypt) SetPlaintext(v string) {
	o.Plaintext = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *Encrypt) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Encrypt) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *Encrypt) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *Encrypt) SetToken(v string) {
	o.Token = &v
}

// GetUidToken returns the UidToken field value if set, zero value otherwise.
func (o *Encrypt) GetUidToken() string {
	if o == nil || o.UidToken == nil {
		var ret string
		return ret
	}
	return *o.UidToken
}

// GetUidTokenOk returns a tuple with the UidToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Encrypt) GetUidTokenOk() (*string, bool) {
	if o == nil || o.UidToken == nil {
		return nil, false
	}
	return o.UidToken, true
}

// HasUidToken returns a boolean if a field has been set.
func (o *Encrypt) HasUidToken() bool {
	if o != nil && o.UidToken != nil {
		return true
	}

	return false
}

// SetUidToken gets a reference to the given string and assigns it to the UidToken field.
func (o *Encrypt) SetUidToken(v string) {
	o.UidToken = &v
}

func (o Encrypt) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayId != nil {
		toSerialize["display-id"] = o.DisplayId
	}
	if o.EncryptionContext != nil {
		toSerialize["encryption-context"] = o.EncryptionContext
	}
	if o.KeyName != nil {
		toSerialize["key-name"] = o.KeyName
	}
	if o.Plaintext != nil {
		toSerialize["plaintext"] = o.Plaintext
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.UidToken != nil {
		toSerialize["uid-token"] = o.UidToken
	}
	return json.Marshal(toSerialize)
}

type NullableEncrypt struct {
	value *Encrypt
	isSet bool
}

func (v NullableEncrypt) Get() *Encrypt {
	return v.value
}

func (v *NullableEncrypt) Set(val *Encrypt) {
	v.value = val
	v.isSet = true
}

func (v NullableEncrypt) IsSet() bool {
	return v.isSet
}

func (v *NullableEncrypt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncrypt(val *Encrypt) *NullableEncrypt {
	return &NullableEncrypt{value: val, isSet: true}
}

func (v NullableEncrypt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncrypt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


