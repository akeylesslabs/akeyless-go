/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// GetProducersListReplyObj struct for GetProducersListReplyObj
type GetProducersListReplyObj struct {
	Producers []Producer `json:"producers,omitempty"`
	ProducersErrors map[string]interface{} `json:"producers_errors,omitempty"`
}

// NewGetProducersListReplyObj instantiates a new GetProducersListReplyObj object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetProducersListReplyObj() *GetProducersListReplyObj {
	this := GetProducersListReplyObj{}
	return &this
}

// NewGetProducersListReplyObjWithDefaults instantiates a new GetProducersListReplyObj object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetProducersListReplyObjWithDefaults() *GetProducersListReplyObj {
	this := GetProducersListReplyObj{}
	return &this
}

// GetProducers returns the Producers field value if set, zero value otherwise.
func (o *GetProducersListReplyObj) GetProducers() []Producer {
	if o == nil || o.Producers == nil {
		var ret []Producer
		return ret
	}
	return o.Producers
}

// GetProducersOk returns a tuple with the Producers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProducersListReplyObj) GetProducersOk() ([]Producer, bool) {
	if o == nil || o.Producers == nil {
		return nil, false
	}
	return o.Producers, true
}

// HasProducers returns a boolean if a field has been set.
func (o *GetProducersListReplyObj) HasProducers() bool {
	if o != nil && o.Producers != nil {
		return true
	}

	return false
}

// SetProducers gets a reference to the given []Producer and assigns it to the Producers field.
func (o *GetProducersListReplyObj) SetProducers(v []Producer) {
	o.Producers = v
}

// GetProducersErrors returns the ProducersErrors field value if set, zero value otherwise.
func (o *GetProducersListReplyObj) GetProducersErrors() map[string]interface{} {
	if o == nil || o.ProducersErrors == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.ProducersErrors
}

// GetProducersErrorsOk returns a tuple with the ProducersErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProducersListReplyObj) GetProducersErrorsOk() (map[string]interface{}, bool) {
	if o == nil || o.ProducersErrors == nil {
		return nil, false
	}
	return o.ProducersErrors, true
}

// HasProducersErrors returns a boolean if a field has been set.
func (o *GetProducersListReplyObj) HasProducersErrors() bool {
	if o != nil && o.ProducersErrors != nil {
		return true
	}

	return false
}

// SetProducersErrors gets a reference to the given map[string]interface{} and assigns it to the ProducersErrors field.
func (o *GetProducersListReplyObj) SetProducersErrors(v map[string]interface{}) {
	o.ProducersErrors = v
}

func (o GetProducersListReplyObj) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Producers != nil {
		toSerialize["producers"] = o.Producers
	}
	if o.ProducersErrors != nil {
		toSerialize["producers_errors"] = o.ProducersErrors
	}
	return json.Marshal(toSerialize)
}

type NullableGetProducersListReplyObj struct {
	value *GetProducersListReplyObj
	isSet bool
}

func (v NullableGetProducersListReplyObj) Get() *GetProducersListReplyObj {
	return v.value
}

func (v *NullableGetProducersListReplyObj) Set(val *GetProducersListReplyObj) {
	v.value = val
	v.isSet = true
}

func (v NullableGetProducersListReplyObj) IsSet() bool {
	return v.isSet
}

func (v *NullableGetProducersListReplyObj) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetProducersListReplyObj(val *GetProducersListReplyObj) *NullableGetProducersListReplyObj {
	return &NullableGetProducersListReplyObj{value: val, isSet: true}
}

func (v NullableGetProducersListReplyObj) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetProducersListReplyObj) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


