/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// checks if the DeleteRoleRuleOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteRoleRuleOutput{}

// DeleteRoleRuleOutput struct for DeleteRoleRuleOutput
type DeleteRoleRuleOutput struct {
	Deleted *bool `json:"deleted,omitempty"`
	Result *string `json:"result,omitempty"`
}

// NewDeleteRoleRuleOutput instantiates a new DeleteRoleRuleOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteRoleRuleOutput() *DeleteRoleRuleOutput {
	this := DeleteRoleRuleOutput{}
	return &this
}

// NewDeleteRoleRuleOutputWithDefaults instantiates a new DeleteRoleRuleOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteRoleRuleOutputWithDefaults() *DeleteRoleRuleOutput {
	this := DeleteRoleRuleOutput{}
	return &this
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *DeleteRoleRuleOutput) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteRoleRuleOutput) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *DeleteRoleRuleOutput) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *DeleteRoleRuleOutput) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *DeleteRoleRuleOutput) GetResult() string {
	if o == nil || IsNil(o.Result) {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteRoleRuleOutput) GetResultOk() (*string, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *DeleteRoleRuleOutput) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *DeleteRoleRuleOutput) SetResult(v string) {
	o.Result = &v
}

func (o DeleteRoleRuleOutput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteRoleRuleOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	return toSerialize, nil
}

type NullableDeleteRoleRuleOutput struct {
	value *DeleteRoleRuleOutput
	isSet bool
}

func (v NullableDeleteRoleRuleOutput) Get() *DeleteRoleRuleOutput {
	return v.value
}

func (v *NullableDeleteRoleRuleOutput) Set(val *DeleteRoleRuleOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteRoleRuleOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteRoleRuleOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteRoleRuleOutput(val *DeleteRoleRuleOutput) *NullableDeleteRoleRuleOutput {
	return &NullableDeleteRoleRuleOutput{value: val, isSet: true}
}

func (v NullableDeleteRoleRuleOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteRoleRuleOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


