/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// K8SAuthsConfigPart struct for K8SAuthsConfigPart
type K8SAuthsConfigPart struct {
	K8sAuths []K8SAuth `json:"k8s_auths,omitempty"`
}

// NewK8SAuthsConfigPart instantiates a new K8SAuthsConfigPart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewK8SAuthsConfigPart() *K8SAuthsConfigPart {
	this := K8SAuthsConfigPart{}
	return &this
}

// NewK8SAuthsConfigPartWithDefaults instantiates a new K8SAuthsConfigPart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewK8SAuthsConfigPartWithDefaults() *K8SAuthsConfigPart {
	this := K8SAuthsConfigPart{}
	return &this
}

// GetK8sAuths returns the K8sAuths field value if set, zero value otherwise.
func (o *K8SAuthsConfigPart) GetK8sAuths() []K8SAuth {
	if o == nil || o.K8sAuths == nil {
		var ret []K8SAuth
		return ret
	}
	return o.K8sAuths
}

// GetK8sAuthsOk returns a tuple with the K8sAuths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8SAuthsConfigPart) GetK8sAuthsOk() ([]K8SAuth, bool) {
	if o == nil || o.K8sAuths == nil {
		return nil, false
	}
	return o.K8sAuths, true
}

// HasK8sAuths returns a boolean if a field has been set.
func (o *K8SAuthsConfigPart) HasK8sAuths() bool {
	if o != nil && o.K8sAuths != nil {
		return true
	}

	return false
}

// SetK8sAuths gets a reference to the given []K8SAuth and assigns it to the K8sAuths field.
func (o *K8SAuthsConfigPart) SetK8sAuths(v []K8SAuth) {
	o.K8sAuths = v
}

func (o K8SAuthsConfigPart) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.K8sAuths != nil {
		toSerialize["k8s_auths"] = o.K8sAuths
	}
	return json.Marshal(toSerialize)
}

type NullableK8SAuthsConfigPart struct {
	value *K8SAuthsConfigPart
	isSet bool
}

func (v NullableK8SAuthsConfigPart) Get() *K8SAuthsConfigPart {
	return v.value
}

func (v *NullableK8SAuthsConfigPart) Set(val *K8SAuthsConfigPart) {
	v.value = val
	v.isSet = true
}

func (v NullableK8SAuthsConfigPart) IsSet() bool {
	return v.isSet
}

func (v *NullableK8SAuthsConfigPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableK8SAuthsConfigPart(val *K8SAuthsConfigPart) *NullableK8SAuthsConfigPart {
	return &NullableK8SAuthsConfigPart{value: val, isSet: true}
}

func (v NullableK8SAuthsConfigPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableK8SAuthsConfigPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


