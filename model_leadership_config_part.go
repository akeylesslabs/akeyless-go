/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// LeadershipConfigPart struct for LeadershipConfigPart
type LeadershipConfigPart struct {
	OpenLeadership []int32 `json:"open_leadership,omitempty"`
}

// NewLeadershipConfigPart instantiates a new LeadershipConfigPart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeadershipConfigPart() *LeadershipConfigPart {
	this := LeadershipConfigPart{}
	return &this
}

// NewLeadershipConfigPartWithDefaults instantiates a new LeadershipConfigPart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLeadershipConfigPartWithDefaults() *LeadershipConfigPart {
	this := LeadershipConfigPart{}
	return &this
}

// GetOpenLeadership returns the OpenLeadership field value if set, zero value otherwise.
func (o *LeadershipConfigPart) GetOpenLeadership() []int32 {
	if o == nil || o.OpenLeadership == nil {
		var ret []int32
		return ret
	}
	return o.OpenLeadership
}

// GetOpenLeadershipOk returns a tuple with the OpenLeadership field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeadershipConfigPart) GetOpenLeadershipOk() ([]int32, bool) {
	if o == nil || o.OpenLeadership == nil {
		return nil, false
	}
	return o.OpenLeadership, true
}

// HasOpenLeadership returns a boolean if a field has been set.
func (o *LeadershipConfigPart) HasOpenLeadership() bool {
	if o != nil && o.OpenLeadership != nil {
		return true
	}

	return false
}

// SetOpenLeadership gets a reference to the given []int32 and assigns it to the OpenLeadership field.
func (o *LeadershipConfigPart) SetOpenLeadership(v []int32) {
	o.OpenLeadership = v
}

func (o LeadershipConfigPart) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OpenLeadership != nil {
		toSerialize["open_leadership"] = o.OpenLeadership
	}
	return json.Marshal(toSerialize)
}

type NullableLeadershipConfigPart struct {
	value *LeadershipConfigPart
	isSet bool
}

func (v NullableLeadershipConfigPart) Get() *LeadershipConfigPart {
	return v.value
}

func (v *NullableLeadershipConfigPart) Set(val *LeadershipConfigPart) {
	v.value = val
	v.isSet = true
}

func (v NullableLeadershipConfigPart) IsSet() bool {
	return v.isSet
}

func (v *NullableLeadershipConfigPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeadershipConfigPart(val *LeadershipConfigPart) *NullableLeadershipConfigPart {
	return &NullableLeadershipConfigPart{value: val, isSet: true}
}

func (v NullableLeadershipConfigPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeadershipConfigPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


