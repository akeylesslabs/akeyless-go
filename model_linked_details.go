/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// LinkedDetails struct for LinkedDetails
type LinkedDetails struct {
	Hosts *map[string]string `json:"hosts,omitempty"`
}

// NewLinkedDetails instantiates a new LinkedDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkedDetails() *LinkedDetails {
	this := LinkedDetails{}
	return &this
}

// NewLinkedDetailsWithDefaults instantiates a new LinkedDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkedDetailsWithDefaults() *LinkedDetails {
	this := LinkedDetails{}
	return &this
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *LinkedDetails) GetHosts() map[string]string {
	if o == nil || o.Hosts == nil {
		var ret map[string]string
		return ret
	}
	return *o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkedDetails) GetHostsOk() (*map[string]string, bool) {
	if o == nil || o.Hosts == nil {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *LinkedDetails) HasHosts() bool {
	if o != nil && o.Hosts != nil {
		return true
	}

	return false
}

// SetHosts gets a reference to the given map[string]string and assigns it to the Hosts field.
func (o *LinkedDetails) SetHosts(v map[string]string) {
	o.Hosts = &v
}

func (o LinkedDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hosts != nil {
		toSerialize["hosts"] = o.Hosts
	}
	return json.Marshal(toSerialize)
}

type NullableLinkedDetails struct {
	value *LinkedDetails
	isSet bool
}

func (v NullableLinkedDetails) Get() *LinkedDetails {
	return v.value
}

func (v *NullableLinkedDetails) Set(val *LinkedDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkedDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkedDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkedDetails(val *LinkedDetails) *NullableLinkedDetails {
	return &NullableLinkedDetails{value: val, isSet: true}
}

func (v NullableLinkedDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkedDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


