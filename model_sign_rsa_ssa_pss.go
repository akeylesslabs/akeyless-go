/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// SignRsaSsaPss signRsaSsaPss is a command that calculates the signature of a given message using rsassa-pss
type SignRsaSsaPss struct {
	// The display id of the RSA key to use in the signing process
	DisplayId *string `json:"display-id,omitempty"`
	// HashFunction defines the hash function (e.g. sha-256)
	HashFunction *string `json:"hash-function,omitempty"`
	// The item id of the RSA key to use in the signing process
	ItemId *int64 `json:"item-id,omitempty"`
	// Set output format to JSON
	Json *bool `json:"json,omitempty"`
	// The name of the RSA key to use in the signing process
	KeyName *string `json:"key-name,omitempty"`
	// The input message to sign in a base64 format
	Message string `json:"message"`
	// Authentication token (see `/auth` and `/configure`)
	Token *string `json:"token,omitempty"`
	// The universal identity token, Required only for universal_identity authentication
	UidToken *string `json:"uid-token,omitempty"`
}

// NewSignRsaSsaPss instantiates a new SignRsaSsaPss object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignRsaSsaPss(message string, ) *SignRsaSsaPss {
	this := SignRsaSsaPss{}
	var json bool = false
	this.Json = &json
	this.Message = message
	return &this
}

// NewSignRsaSsaPssWithDefaults instantiates a new SignRsaSsaPss object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignRsaSsaPssWithDefaults() *SignRsaSsaPss {
	this := SignRsaSsaPss{}
	var json bool = false
	this.Json = &json
	return &this
}

// GetDisplayId returns the DisplayId field value if set, zero value otherwise.
func (o *SignRsaSsaPss) GetDisplayId() string {
	if o == nil || o.DisplayId == nil {
		var ret string
		return ret
	}
	return *o.DisplayId
}

// GetDisplayIdOk returns a tuple with the DisplayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignRsaSsaPss) GetDisplayIdOk() (*string, bool) {
	if o == nil || o.DisplayId == nil {
		return nil, false
	}
	return o.DisplayId, true
}

// HasDisplayId returns a boolean if a field has been set.
func (o *SignRsaSsaPss) HasDisplayId() bool {
	if o != nil && o.DisplayId != nil {
		return true
	}

	return false
}

// SetDisplayId gets a reference to the given string and assigns it to the DisplayId field.
func (o *SignRsaSsaPss) SetDisplayId(v string) {
	o.DisplayId = &v
}

// GetHashFunction returns the HashFunction field value if set, zero value otherwise.
func (o *SignRsaSsaPss) GetHashFunction() string {
	if o == nil || o.HashFunction == nil {
		var ret string
		return ret
	}
	return *o.HashFunction
}

// GetHashFunctionOk returns a tuple with the HashFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignRsaSsaPss) GetHashFunctionOk() (*string, bool) {
	if o == nil || o.HashFunction == nil {
		return nil, false
	}
	return o.HashFunction, true
}

// HasHashFunction returns a boolean if a field has been set.
func (o *SignRsaSsaPss) HasHashFunction() bool {
	if o != nil && o.HashFunction != nil {
		return true
	}

	return false
}

// SetHashFunction gets a reference to the given string and assigns it to the HashFunction field.
func (o *SignRsaSsaPss) SetHashFunction(v string) {
	o.HashFunction = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *SignRsaSsaPss) GetItemId() int64 {
	if o == nil || o.ItemId == nil {
		var ret int64
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignRsaSsaPss) GetItemIdOk() (*int64, bool) {
	if o == nil || o.ItemId == nil {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *SignRsaSsaPss) HasItemId() bool {
	if o != nil && o.ItemId != nil {
		return true
	}

	return false
}

// SetItemId gets a reference to the given int64 and assigns it to the ItemId field.
func (o *SignRsaSsaPss) SetItemId(v int64) {
	o.ItemId = &v
}

// GetJson returns the Json field value if set, zero value otherwise.
func (o *SignRsaSsaPss) GetJson() bool {
	if o == nil || o.Json == nil {
		var ret bool
		return ret
	}
	return *o.Json
}

// GetJsonOk returns a tuple with the Json field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignRsaSsaPss) GetJsonOk() (*bool, bool) {
	if o == nil || o.Json == nil {
		return nil, false
	}
	return o.Json, true
}

// HasJson returns a boolean if a field has been set.
func (o *SignRsaSsaPss) HasJson() bool {
	if o != nil && o.Json != nil {
		return true
	}

	return false
}

// SetJson gets a reference to the given bool and assigns it to the Json field.
func (o *SignRsaSsaPss) SetJson(v bool) {
	o.Json = &v
}

// GetKeyName returns the KeyName field value if set, zero value otherwise.
func (o *SignRsaSsaPss) GetKeyName() string {
	if o == nil || o.KeyName == nil {
		var ret string
		return ret
	}
	return *o.KeyName
}

// GetKeyNameOk returns a tuple with the KeyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignRsaSsaPss) GetKeyNameOk() (*string, bool) {
	if o == nil || o.KeyName == nil {
		return nil, false
	}
	return o.KeyName, true
}

// HasKeyName returns a boolean if a field has been set.
func (o *SignRsaSsaPss) HasKeyName() bool {
	if o != nil && o.KeyName != nil {
		return true
	}

	return false
}

// SetKeyName gets a reference to the given string and assigns it to the KeyName field.
func (o *SignRsaSsaPss) SetKeyName(v string) {
	o.KeyName = &v
}

// GetMessage returns the Message field value
func (o *SignRsaSsaPss) GetMessage() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *SignRsaSsaPss) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *SignRsaSsaPss) SetMessage(v string) {
	o.Message = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *SignRsaSsaPss) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignRsaSsaPss) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *SignRsaSsaPss) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *SignRsaSsaPss) SetToken(v string) {
	o.Token = &v
}

// GetUidToken returns the UidToken field value if set, zero value otherwise.
func (o *SignRsaSsaPss) GetUidToken() string {
	if o == nil || o.UidToken == nil {
		var ret string
		return ret
	}
	return *o.UidToken
}

// GetUidTokenOk returns a tuple with the UidToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignRsaSsaPss) GetUidTokenOk() (*string, bool) {
	if o == nil || o.UidToken == nil {
		return nil, false
	}
	return o.UidToken, true
}

// HasUidToken returns a boolean if a field has been set.
func (o *SignRsaSsaPss) HasUidToken() bool {
	if o != nil && o.UidToken != nil {
		return true
	}

	return false
}

// SetUidToken gets a reference to the given string and assigns it to the UidToken field.
func (o *SignRsaSsaPss) SetUidToken(v string) {
	o.UidToken = &v
}

func (o SignRsaSsaPss) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayId != nil {
		toSerialize["display-id"] = o.DisplayId
	}
	if o.HashFunction != nil {
		toSerialize["hash-function"] = o.HashFunction
	}
	if o.ItemId != nil {
		toSerialize["item-id"] = o.ItemId
	}
	if o.Json != nil {
		toSerialize["json"] = o.Json
	}
	if o.KeyName != nil {
		toSerialize["key-name"] = o.KeyName
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.UidToken != nil {
		toSerialize["uid-token"] = o.UidToken
	}
	return json.Marshal(toSerialize)
}

type NullableSignRsaSsaPss struct {
	value *SignRsaSsaPss
	isSet bool
}

func (v NullableSignRsaSsaPss) Get() *SignRsaSsaPss {
	return v.value
}

func (v *NullableSignRsaSsaPss) Set(val *SignRsaSsaPss) {
	v.value = val
	v.isSet = true
}

func (v NullableSignRsaSsaPss) IsSet() bool {
	return v.isSet
}

func (v *NullableSignRsaSsaPss) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignRsaSsaPss(val *SignRsaSsaPss) *NullableSignRsaSsaPss {
	return &NullableSignRsaSsaPss{value: val, isSet: true}
}

func (v NullableSignRsaSsaPss) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignRsaSsaPss) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


