/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// checks if the Producer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Producer{}

// Producer struct for Producer
type Producer struct {
	Active *bool `json:"active,omitempty"`
	FailureMessage *string `json:"failure_message,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Init *bool `json:"init,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewProducer instantiates a new Producer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProducer() *Producer {
	this := Producer{}
	return &this
}

// NewProducerWithDefaults instantiates a new Producer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProducerWithDefaults() *Producer {
	this := Producer{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Producer) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Producer) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Producer) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Producer) SetActive(v bool) {
	o.Active = &v
}

// GetFailureMessage returns the FailureMessage field value if set, zero value otherwise.
func (o *Producer) GetFailureMessage() string {
	if o == nil || IsNil(o.FailureMessage) {
		var ret string
		return ret
	}
	return *o.FailureMessage
}

// GetFailureMessageOk returns a tuple with the FailureMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Producer) GetFailureMessageOk() (*string, bool) {
	if o == nil || IsNil(o.FailureMessage) {
		return nil, false
	}
	return o.FailureMessage, true
}

// HasFailureMessage returns a boolean if a field has been set.
func (o *Producer) HasFailureMessage() bool {
	if o != nil && !IsNil(o.FailureMessage) {
		return true
	}

	return false
}

// SetFailureMessage gets a reference to the given string and assigns it to the FailureMessage field.
func (o *Producer) SetFailureMessage(v string) {
	o.FailureMessage = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Producer) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Producer) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Producer) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Producer) SetId(v int64) {
	o.Id = &v
}

// GetInit returns the Init field value if set, zero value otherwise.
func (o *Producer) GetInit() bool {
	if o == nil || IsNil(o.Init) {
		var ret bool
		return ret
	}
	return *o.Init
}

// GetInitOk returns a tuple with the Init field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Producer) GetInitOk() (*bool, bool) {
	if o == nil || IsNil(o.Init) {
		return nil, false
	}
	return o.Init, true
}

// HasInit returns a boolean if a field has been set.
func (o *Producer) HasInit() bool {
	if o != nil && !IsNil(o.Init) {
		return true
	}

	return false
}

// SetInit gets a reference to the given bool and assigns it to the Init field.
func (o *Producer) SetInit(v bool) {
	o.Init = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Producer) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Producer) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Producer) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Producer) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Producer) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Producer) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Producer) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Producer) SetType(v string) {
	o.Type = &v
}

func (o Producer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Producer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.FailureMessage) {
		toSerialize["failure_message"] = o.FailureMessage
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Init) {
		toSerialize["init"] = o.Init
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableProducer struct {
	value *Producer
	isSet bool
}

func (v NullableProducer) Get() *Producer {
	return v.value
}

func (v *NullableProducer) Set(val *Producer) {
	v.value = val
	v.isSet = true
}

func (v NullableProducer) IsSet() bool {
	return v.isSet
}

func (v *NullableProducer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProducer(val *Producer) *NullableProducer {
	return &NullableProducer{value: val, isSet: true}
}

func (v NullableProducer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProducer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


