/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// WindowsServiceAttributes struct for WindowsServiceAttributes
type WindowsServiceAttributes struct {
	ConnectionType *string `json:"connection_type,omitempty"`
	Port *string `json:"port,omitempty"`
	UseTls *bool `json:"use_tls,omitempty"`
}

// NewWindowsServiceAttributes instantiates a new WindowsServiceAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWindowsServiceAttributes() *WindowsServiceAttributes {
	this := WindowsServiceAttributes{}
	return &this
}

// NewWindowsServiceAttributesWithDefaults instantiates a new WindowsServiceAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWindowsServiceAttributesWithDefaults() *WindowsServiceAttributes {
	this := WindowsServiceAttributes{}
	return &this
}

// GetConnectionType returns the ConnectionType field value if set, zero value otherwise.
func (o *WindowsServiceAttributes) GetConnectionType() string {
	if o == nil || o.ConnectionType == nil {
		var ret string
		return ret
	}
	return *o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WindowsServiceAttributes) GetConnectionTypeOk() (*string, bool) {
	if o == nil || o.ConnectionType == nil {
		return nil, false
	}
	return o.ConnectionType, true
}

// HasConnectionType returns a boolean if a field has been set.
func (o *WindowsServiceAttributes) HasConnectionType() bool {
	if o != nil && o.ConnectionType != nil {
		return true
	}

	return false
}

// SetConnectionType gets a reference to the given string and assigns it to the ConnectionType field.
func (o *WindowsServiceAttributes) SetConnectionType(v string) {
	o.ConnectionType = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *WindowsServiceAttributes) GetPort() string {
	if o == nil || o.Port == nil {
		var ret string
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WindowsServiceAttributes) GetPortOk() (*string, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *WindowsServiceAttributes) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given string and assigns it to the Port field.
func (o *WindowsServiceAttributes) SetPort(v string) {
	o.Port = &v
}

// GetUseTls returns the UseTls field value if set, zero value otherwise.
func (o *WindowsServiceAttributes) GetUseTls() bool {
	if o == nil || o.UseTls == nil {
		var ret bool
		return ret
	}
	return *o.UseTls
}

// GetUseTlsOk returns a tuple with the UseTls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WindowsServiceAttributes) GetUseTlsOk() (*bool, bool) {
	if o == nil || o.UseTls == nil {
		return nil, false
	}
	return o.UseTls, true
}

// HasUseTls returns a boolean if a field has been set.
func (o *WindowsServiceAttributes) HasUseTls() bool {
	if o != nil && o.UseTls != nil {
		return true
	}

	return false
}

// SetUseTls gets a reference to the given bool and assigns it to the UseTls field.
func (o *WindowsServiceAttributes) SetUseTls(v bool) {
	o.UseTls = &v
}

func (o WindowsServiceAttributes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConnectionType != nil {
		toSerialize["connection_type"] = o.ConnectionType
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.UseTls != nil {
		toSerialize["use_tls"] = o.UseTls
	}
	return json.Marshal(toSerialize)
}

type NullableWindowsServiceAttributes struct {
	value *WindowsServiceAttributes
	isSet bool
}

func (v NullableWindowsServiceAttributes) Get() *WindowsServiceAttributes {
	return v.value
}

func (v *NullableWindowsServiceAttributes) Set(val *WindowsServiceAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableWindowsServiceAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableWindowsServiceAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWindowsServiceAttributes(val *WindowsServiceAttributes) *NullableWindowsServiceAttributes {
	return &NullableWindowsServiceAttributes{value: val, isSet: true}
}

func (v NullableWindowsServiceAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWindowsServiceAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


