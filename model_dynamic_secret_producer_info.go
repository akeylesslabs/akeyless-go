/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// DynamicSecretProducerInfo DynamicSecretProducerInfo The dynamic secret producer info This parameter relevant and required only in case of create update dynamic secret.
type DynamicSecretProducerInfo struct {
	FailureMessage *string `json:"failure_message,omitempty"`
	GwClusterId *int64 `json:"gw_cluster_id,omitempty"`
	// Relevant only for generic k8s producer
	K8sAllowedNamespaces *string `json:"k8s_allowed_namespaces,omitempty"`
	// Relevant only for generic k8s producer
	K8sDynamicMode *bool `json:"k8s_dynamic_mode,omitempty"`
	ProducerLastKeepAlive *string `json:"producer_last_keep_alive,omitempty"`
	ProducerMetadata *string `json:"producer_metadata,omitempty"`
	// RotationStatus defines types of rotation Status
	ProducerStatus *string `json:"producer_status,omitempty"`
	ProducerType *string `json:"producer_type,omitempty"`
}

// NewDynamicSecretProducerInfo instantiates a new DynamicSecretProducerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDynamicSecretProducerInfo() *DynamicSecretProducerInfo {
	this := DynamicSecretProducerInfo{}
	return &this
}

// NewDynamicSecretProducerInfoWithDefaults instantiates a new DynamicSecretProducerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDynamicSecretProducerInfoWithDefaults() *DynamicSecretProducerInfo {
	this := DynamicSecretProducerInfo{}
	return &this
}

// GetFailureMessage returns the FailureMessage field value if set, zero value otherwise.
func (o *DynamicSecretProducerInfo) GetFailureMessage() string {
	if o == nil || o.FailureMessage == nil {
		var ret string
		return ret
	}
	return *o.FailureMessage
}

// GetFailureMessageOk returns a tuple with the FailureMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicSecretProducerInfo) GetFailureMessageOk() (*string, bool) {
	if o == nil || o.FailureMessage == nil {
		return nil, false
	}
	return o.FailureMessage, true
}

// HasFailureMessage returns a boolean if a field has been set.
func (o *DynamicSecretProducerInfo) HasFailureMessage() bool {
	if o != nil && o.FailureMessage != nil {
		return true
	}

	return false
}

// SetFailureMessage gets a reference to the given string and assigns it to the FailureMessage field.
func (o *DynamicSecretProducerInfo) SetFailureMessage(v string) {
	o.FailureMessage = &v
}

// GetGwClusterId returns the GwClusterId field value if set, zero value otherwise.
func (o *DynamicSecretProducerInfo) GetGwClusterId() int64 {
	if o == nil || o.GwClusterId == nil {
		var ret int64
		return ret
	}
	return *o.GwClusterId
}

// GetGwClusterIdOk returns a tuple with the GwClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicSecretProducerInfo) GetGwClusterIdOk() (*int64, bool) {
	if o == nil || o.GwClusterId == nil {
		return nil, false
	}
	return o.GwClusterId, true
}

// HasGwClusterId returns a boolean if a field has been set.
func (o *DynamicSecretProducerInfo) HasGwClusterId() bool {
	if o != nil && o.GwClusterId != nil {
		return true
	}

	return false
}

// SetGwClusterId gets a reference to the given int64 and assigns it to the GwClusterId field.
func (o *DynamicSecretProducerInfo) SetGwClusterId(v int64) {
	o.GwClusterId = &v
}

// GetK8sAllowedNamespaces returns the K8sAllowedNamespaces field value if set, zero value otherwise.
func (o *DynamicSecretProducerInfo) GetK8sAllowedNamespaces() string {
	if o == nil || o.K8sAllowedNamespaces == nil {
		var ret string
		return ret
	}
	return *o.K8sAllowedNamespaces
}

// GetK8sAllowedNamespacesOk returns a tuple with the K8sAllowedNamespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicSecretProducerInfo) GetK8sAllowedNamespacesOk() (*string, bool) {
	if o == nil || o.K8sAllowedNamespaces == nil {
		return nil, false
	}
	return o.K8sAllowedNamespaces, true
}

// HasK8sAllowedNamespaces returns a boolean if a field has been set.
func (o *DynamicSecretProducerInfo) HasK8sAllowedNamespaces() bool {
	if o != nil && o.K8sAllowedNamespaces != nil {
		return true
	}

	return false
}

// SetK8sAllowedNamespaces gets a reference to the given string and assigns it to the K8sAllowedNamespaces field.
func (o *DynamicSecretProducerInfo) SetK8sAllowedNamespaces(v string) {
	o.K8sAllowedNamespaces = &v
}

// GetK8sDynamicMode returns the K8sDynamicMode field value if set, zero value otherwise.
func (o *DynamicSecretProducerInfo) GetK8sDynamicMode() bool {
	if o == nil || o.K8sDynamicMode == nil {
		var ret bool
		return ret
	}
	return *o.K8sDynamicMode
}

// GetK8sDynamicModeOk returns a tuple with the K8sDynamicMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicSecretProducerInfo) GetK8sDynamicModeOk() (*bool, bool) {
	if o == nil || o.K8sDynamicMode == nil {
		return nil, false
	}
	return o.K8sDynamicMode, true
}

// HasK8sDynamicMode returns a boolean if a field has been set.
func (o *DynamicSecretProducerInfo) HasK8sDynamicMode() bool {
	if o != nil && o.K8sDynamicMode != nil {
		return true
	}

	return false
}

// SetK8sDynamicMode gets a reference to the given bool and assigns it to the K8sDynamicMode field.
func (o *DynamicSecretProducerInfo) SetK8sDynamicMode(v bool) {
	o.K8sDynamicMode = &v
}

// GetProducerLastKeepAlive returns the ProducerLastKeepAlive field value if set, zero value otherwise.
func (o *DynamicSecretProducerInfo) GetProducerLastKeepAlive() string {
	if o == nil || o.ProducerLastKeepAlive == nil {
		var ret string
		return ret
	}
	return *o.ProducerLastKeepAlive
}

// GetProducerLastKeepAliveOk returns a tuple with the ProducerLastKeepAlive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicSecretProducerInfo) GetProducerLastKeepAliveOk() (*string, bool) {
	if o == nil || o.ProducerLastKeepAlive == nil {
		return nil, false
	}
	return o.ProducerLastKeepAlive, true
}

// HasProducerLastKeepAlive returns a boolean if a field has been set.
func (o *DynamicSecretProducerInfo) HasProducerLastKeepAlive() bool {
	if o != nil && o.ProducerLastKeepAlive != nil {
		return true
	}

	return false
}

// SetProducerLastKeepAlive gets a reference to the given string and assigns it to the ProducerLastKeepAlive field.
func (o *DynamicSecretProducerInfo) SetProducerLastKeepAlive(v string) {
	o.ProducerLastKeepAlive = &v
}

// GetProducerMetadata returns the ProducerMetadata field value if set, zero value otherwise.
func (o *DynamicSecretProducerInfo) GetProducerMetadata() string {
	if o == nil || o.ProducerMetadata == nil {
		var ret string
		return ret
	}
	return *o.ProducerMetadata
}

// GetProducerMetadataOk returns a tuple with the ProducerMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicSecretProducerInfo) GetProducerMetadataOk() (*string, bool) {
	if o == nil || o.ProducerMetadata == nil {
		return nil, false
	}
	return o.ProducerMetadata, true
}

// HasProducerMetadata returns a boolean if a field has been set.
func (o *DynamicSecretProducerInfo) HasProducerMetadata() bool {
	if o != nil && o.ProducerMetadata != nil {
		return true
	}

	return false
}

// SetProducerMetadata gets a reference to the given string and assigns it to the ProducerMetadata field.
func (o *DynamicSecretProducerInfo) SetProducerMetadata(v string) {
	o.ProducerMetadata = &v
}

// GetProducerStatus returns the ProducerStatus field value if set, zero value otherwise.
func (o *DynamicSecretProducerInfo) GetProducerStatus() string {
	if o == nil || o.ProducerStatus == nil {
		var ret string
		return ret
	}
	return *o.ProducerStatus
}

// GetProducerStatusOk returns a tuple with the ProducerStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicSecretProducerInfo) GetProducerStatusOk() (*string, bool) {
	if o == nil || o.ProducerStatus == nil {
		return nil, false
	}
	return o.ProducerStatus, true
}

// HasProducerStatus returns a boolean if a field has been set.
func (o *DynamicSecretProducerInfo) HasProducerStatus() bool {
	if o != nil && o.ProducerStatus != nil {
		return true
	}

	return false
}

// SetProducerStatus gets a reference to the given string and assigns it to the ProducerStatus field.
func (o *DynamicSecretProducerInfo) SetProducerStatus(v string) {
	o.ProducerStatus = &v
}

// GetProducerType returns the ProducerType field value if set, zero value otherwise.
func (o *DynamicSecretProducerInfo) GetProducerType() string {
	if o == nil || o.ProducerType == nil {
		var ret string
		return ret
	}
	return *o.ProducerType
}

// GetProducerTypeOk returns a tuple with the ProducerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicSecretProducerInfo) GetProducerTypeOk() (*string, bool) {
	if o == nil || o.ProducerType == nil {
		return nil, false
	}
	return o.ProducerType, true
}

// HasProducerType returns a boolean if a field has been set.
func (o *DynamicSecretProducerInfo) HasProducerType() bool {
	if o != nil && o.ProducerType != nil {
		return true
	}

	return false
}

// SetProducerType gets a reference to the given string and assigns it to the ProducerType field.
func (o *DynamicSecretProducerInfo) SetProducerType(v string) {
	o.ProducerType = &v
}

func (o DynamicSecretProducerInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FailureMessage != nil {
		toSerialize["failure_message"] = o.FailureMessage
	}
	if o.GwClusterId != nil {
		toSerialize["gw_cluster_id"] = o.GwClusterId
	}
	if o.K8sAllowedNamespaces != nil {
		toSerialize["k8s_allowed_namespaces"] = o.K8sAllowedNamespaces
	}
	if o.K8sDynamicMode != nil {
		toSerialize["k8s_dynamic_mode"] = o.K8sDynamicMode
	}
	if o.ProducerLastKeepAlive != nil {
		toSerialize["producer_last_keep_alive"] = o.ProducerLastKeepAlive
	}
	if o.ProducerMetadata != nil {
		toSerialize["producer_metadata"] = o.ProducerMetadata
	}
	if o.ProducerStatus != nil {
		toSerialize["producer_status"] = o.ProducerStatus
	}
	if o.ProducerType != nil {
		toSerialize["producer_type"] = o.ProducerType
	}
	return json.Marshal(toSerialize)
}

type NullableDynamicSecretProducerInfo struct {
	value *DynamicSecretProducerInfo
	isSet bool
}

func (v NullableDynamicSecretProducerInfo) Get() *DynamicSecretProducerInfo {
	return v.value
}

func (v *NullableDynamicSecretProducerInfo) Set(val *DynamicSecretProducerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicSecretProducerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicSecretProducerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicSecretProducerInfo(val *DynamicSecretProducerInfo) *NullableDynamicSecretProducerInfo {
	return &NullableDynamicSecretProducerInfo{value: val, isSet: true}
}

func (v NullableDynamicSecretProducerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicSecretProducerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


