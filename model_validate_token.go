/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// ValidateToken validate-token is a command that validaties token
type ValidateToken struct {
	// Token
	ValidateToken *string `json:"validate-token,omitempty"`
}

// NewValidateToken instantiates a new ValidateToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateToken() *ValidateToken {
	this := ValidateToken{}
	return &this
}

// NewValidateTokenWithDefaults instantiates a new ValidateToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateTokenWithDefaults() *ValidateToken {
	this := ValidateToken{}
	return &this
}

// GetValidateToken returns the ValidateToken field value if set, zero value otherwise.
func (o *ValidateToken) GetValidateToken() string {
	if o == nil || o.ValidateToken == nil {
		var ret string
		return ret
	}
	return *o.ValidateToken
}

// GetValidateTokenOk returns a tuple with the ValidateToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateToken) GetValidateTokenOk() (*string, bool) {
	if o == nil || o.ValidateToken == nil {
		return nil, false
	}
	return o.ValidateToken, true
}

// HasValidateToken returns a boolean if a field has been set.
func (o *ValidateToken) HasValidateToken() bool {
	if o != nil && o.ValidateToken != nil {
		return true
	}

	return false
}

// SetValidateToken gets a reference to the given string and assigns it to the ValidateToken field.
func (o *ValidateToken) SetValidateToken(v string) {
	o.ValidateToken = &v
}

func (o ValidateToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ValidateToken != nil {
		toSerialize["validate-token"] = o.ValidateToken
	}
	return json.Marshal(toSerialize)
}

type NullableValidateToken struct {
	value *ValidateToken
	isSet bool
}

func (v NullableValidateToken) Get() *ValidateToken {
	return v.value
}

func (v *NullableValidateToken) Set(val *ValidateToken) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateToken) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateToken(val *ValidateToken) *NullableValidateToken {
	return &NullableValidateToken{value: val, isSet: true}
}

func (v NullableValidateToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


