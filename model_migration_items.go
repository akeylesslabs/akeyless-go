/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// checks if the MigrationItems type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MigrationItems{}

// MigrationItems struct for MigrationItems
type MigrationItems struct {
	Failed *int64 `json:"failed,omitempty"`
	Migrated *int64 `json:"migrated,omitempty"`
	Skipped *int64 `json:"skipped,omitempty"`
	Total *int64 `json:"total,omitempty"`
}

// NewMigrationItems instantiates a new MigrationItems object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMigrationItems() *MigrationItems {
	this := MigrationItems{}
	return &this
}

// NewMigrationItemsWithDefaults instantiates a new MigrationItems object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMigrationItemsWithDefaults() *MigrationItems {
	this := MigrationItems{}
	return &this
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *MigrationItems) GetFailed() int64 {
	if o == nil || IsNil(o.Failed) {
		var ret int64
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationItems) GetFailedOk() (*int64, bool) {
	if o == nil || IsNil(o.Failed) {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *MigrationItems) HasFailed() bool {
	if o != nil && !IsNil(o.Failed) {
		return true
	}

	return false
}

// SetFailed gets a reference to the given int64 and assigns it to the Failed field.
func (o *MigrationItems) SetFailed(v int64) {
	o.Failed = &v
}

// GetMigrated returns the Migrated field value if set, zero value otherwise.
func (o *MigrationItems) GetMigrated() int64 {
	if o == nil || IsNil(o.Migrated) {
		var ret int64
		return ret
	}
	return *o.Migrated
}

// GetMigratedOk returns a tuple with the Migrated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationItems) GetMigratedOk() (*int64, bool) {
	if o == nil || IsNil(o.Migrated) {
		return nil, false
	}
	return o.Migrated, true
}

// HasMigrated returns a boolean if a field has been set.
func (o *MigrationItems) HasMigrated() bool {
	if o != nil && !IsNil(o.Migrated) {
		return true
	}

	return false
}

// SetMigrated gets a reference to the given int64 and assigns it to the Migrated field.
func (o *MigrationItems) SetMigrated(v int64) {
	o.Migrated = &v
}

// GetSkipped returns the Skipped field value if set, zero value otherwise.
func (o *MigrationItems) GetSkipped() int64 {
	if o == nil || IsNil(o.Skipped) {
		var ret int64
		return ret
	}
	return *o.Skipped
}

// GetSkippedOk returns a tuple with the Skipped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationItems) GetSkippedOk() (*int64, bool) {
	if o == nil || IsNil(o.Skipped) {
		return nil, false
	}
	return o.Skipped, true
}

// HasSkipped returns a boolean if a field has been set.
func (o *MigrationItems) HasSkipped() bool {
	if o != nil && !IsNil(o.Skipped) {
		return true
	}

	return false
}

// SetSkipped gets a reference to the given int64 and assigns it to the Skipped field.
func (o *MigrationItems) SetSkipped(v int64) {
	o.Skipped = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *MigrationItems) GetTotal() int64 {
	if o == nil || IsNil(o.Total) {
		var ret int64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationItems) GetTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *MigrationItems) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int64 and assigns it to the Total field.
func (o *MigrationItems) SetTotal(v int64) {
	o.Total = &v
}

func (o MigrationItems) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MigrationItems) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Failed) {
		toSerialize["failed"] = o.Failed
	}
	if !IsNil(o.Migrated) {
		toSerialize["migrated"] = o.Migrated
	}
	if !IsNil(o.Skipped) {
		toSerialize["skipped"] = o.Skipped
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

type NullableMigrationItems struct {
	value *MigrationItems
	isSet bool
}

func (v NullableMigrationItems) Get() *MigrationItems {
	return v.value
}

func (v *NullableMigrationItems) Set(val *MigrationItems) {
	v.value = val
	v.isSet = true
}

func (v NullableMigrationItems) IsSet() bool {
	return v.isSet
}

func (v *NullableMigrationItems) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMigrationItems(val *MigrationItems) *NullableMigrationItems {
	return &NullableMigrationItems{value: val, isSet: true}
}

func (v NullableMigrationItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMigrationItems) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


