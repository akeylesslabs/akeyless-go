/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// GetPKICertificate struct for GetPKICertificate
type GetPKICertificate struct {
	// The Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)
	AltNames *string `json:"alt-names,omitempty"`
	// The name of the PKI certificate issuer
	CertIssuerName string `json:"cert-issuer-name"`
	// The common name to be included in the PKI certificate
	CommonName *string `json:"common-name,omitempty"`
	// The client public or private key file path (in case of a private key, it will be use to extract the public key)
	KeyFilePath string `json:"key-file-path"`
	// Output file path with the certificate. If not provided, the file with the certificate will be created in the same location of the provided public key with the -cert extension
	Outfile *string `json:"outfile,omitempty"`
	// Authentication token (see `/auth` and `/configure`)
	Token *string `json:"token,omitempty"`
	// The universal identity token, Required only for universal_identity authentication
	UidToken *string `json:"uid-token,omitempty"`
	// The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)
	UriSans *string `json:"uri-sans,omitempty"`
}

// NewGetPKICertificate instantiates a new GetPKICertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetPKICertificate(certIssuerName string, keyFilePath string, ) *GetPKICertificate {
	this := GetPKICertificate{}
	this.CertIssuerName = certIssuerName
	this.KeyFilePath = keyFilePath
	return &this
}

// NewGetPKICertificateWithDefaults instantiates a new GetPKICertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetPKICertificateWithDefaults() *GetPKICertificate {
	this := GetPKICertificate{}
	return &this
}

// GetAltNames returns the AltNames field value if set, zero value otherwise.
func (o *GetPKICertificate) GetAltNames() string {
	if o == nil || o.AltNames == nil {
		var ret string
		return ret
	}
	return *o.AltNames
}

// GetAltNamesOk returns a tuple with the AltNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPKICertificate) GetAltNamesOk() (*string, bool) {
	if o == nil || o.AltNames == nil {
		return nil, false
	}
	return o.AltNames, true
}

// HasAltNames returns a boolean if a field has been set.
func (o *GetPKICertificate) HasAltNames() bool {
	if o != nil && o.AltNames != nil {
		return true
	}

	return false
}

// SetAltNames gets a reference to the given string and assigns it to the AltNames field.
func (o *GetPKICertificate) SetAltNames(v string) {
	o.AltNames = &v
}

// GetCertIssuerName returns the CertIssuerName field value
func (o *GetPKICertificate) GetCertIssuerName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.CertIssuerName
}

// GetCertIssuerNameOk returns a tuple with the CertIssuerName field value
// and a boolean to check if the value has been set.
func (o *GetPKICertificate) GetCertIssuerNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CertIssuerName, true
}

// SetCertIssuerName sets field value
func (o *GetPKICertificate) SetCertIssuerName(v string) {
	o.CertIssuerName = v
}

// GetCommonName returns the CommonName field value if set, zero value otherwise.
func (o *GetPKICertificate) GetCommonName() string {
	if o == nil || o.CommonName == nil {
		var ret string
		return ret
	}
	return *o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPKICertificate) GetCommonNameOk() (*string, bool) {
	if o == nil || o.CommonName == nil {
		return nil, false
	}
	return o.CommonName, true
}

// HasCommonName returns a boolean if a field has been set.
func (o *GetPKICertificate) HasCommonName() bool {
	if o != nil && o.CommonName != nil {
		return true
	}

	return false
}

// SetCommonName gets a reference to the given string and assigns it to the CommonName field.
func (o *GetPKICertificate) SetCommonName(v string) {
	o.CommonName = &v
}

// GetKeyFilePath returns the KeyFilePath field value
func (o *GetPKICertificate) GetKeyFilePath() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.KeyFilePath
}

// GetKeyFilePathOk returns a tuple with the KeyFilePath field value
// and a boolean to check if the value has been set.
func (o *GetPKICertificate) GetKeyFilePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.KeyFilePath, true
}

// SetKeyFilePath sets field value
func (o *GetPKICertificate) SetKeyFilePath(v string) {
	o.KeyFilePath = v
}

// GetOutfile returns the Outfile field value if set, zero value otherwise.
func (o *GetPKICertificate) GetOutfile() string {
	if o == nil || o.Outfile == nil {
		var ret string
		return ret
	}
	return *o.Outfile
}

// GetOutfileOk returns a tuple with the Outfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPKICertificate) GetOutfileOk() (*string, bool) {
	if o == nil || o.Outfile == nil {
		return nil, false
	}
	return o.Outfile, true
}

// HasOutfile returns a boolean if a field has been set.
func (o *GetPKICertificate) HasOutfile() bool {
	if o != nil && o.Outfile != nil {
		return true
	}

	return false
}

// SetOutfile gets a reference to the given string and assigns it to the Outfile field.
func (o *GetPKICertificate) SetOutfile(v string) {
	o.Outfile = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *GetPKICertificate) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPKICertificate) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *GetPKICertificate) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *GetPKICertificate) SetToken(v string) {
	o.Token = &v
}

// GetUidToken returns the UidToken field value if set, zero value otherwise.
func (o *GetPKICertificate) GetUidToken() string {
	if o == nil || o.UidToken == nil {
		var ret string
		return ret
	}
	return *o.UidToken
}

// GetUidTokenOk returns a tuple with the UidToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPKICertificate) GetUidTokenOk() (*string, bool) {
	if o == nil || o.UidToken == nil {
		return nil, false
	}
	return o.UidToken, true
}

// HasUidToken returns a boolean if a field has been set.
func (o *GetPKICertificate) HasUidToken() bool {
	if o != nil && o.UidToken != nil {
		return true
	}

	return false
}

// SetUidToken gets a reference to the given string and assigns it to the UidToken field.
func (o *GetPKICertificate) SetUidToken(v string) {
	o.UidToken = &v
}

// GetUriSans returns the UriSans field value if set, zero value otherwise.
func (o *GetPKICertificate) GetUriSans() string {
	if o == nil || o.UriSans == nil {
		var ret string
		return ret
	}
	return *o.UriSans
}

// GetUriSansOk returns a tuple with the UriSans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPKICertificate) GetUriSansOk() (*string, bool) {
	if o == nil || o.UriSans == nil {
		return nil, false
	}
	return o.UriSans, true
}

// HasUriSans returns a boolean if a field has been set.
func (o *GetPKICertificate) HasUriSans() bool {
	if o != nil && o.UriSans != nil {
		return true
	}

	return false
}

// SetUriSans gets a reference to the given string and assigns it to the UriSans field.
func (o *GetPKICertificate) SetUriSans(v string) {
	o.UriSans = &v
}

func (o GetPKICertificate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AltNames != nil {
		toSerialize["alt-names"] = o.AltNames
	}
	if true {
		toSerialize["cert-issuer-name"] = o.CertIssuerName
	}
	if o.CommonName != nil {
		toSerialize["common-name"] = o.CommonName
	}
	if true {
		toSerialize["key-file-path"] = o.KeyFilePath
	}
	if o.Outfile != nil {
		toSerialize["outfile"] = o.Outfile
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.UidToken != nil {
		toSerialize["uid-token"] = o.UidToken
	}
	if o.UriSans != nil {
		toSerialize["uri-sans"] = o.UriSans
	}
	return json.Marshal(toSerialize)
}

type NullableGetPKICertificate struct {
	value *GetPKICertificate
	isSet bool
}

func (v NullableGetPKICertificate) Get() *GetPKICertificate {
	return v.value
}

func (v *NullableGetPKICertificate) Set(val *GetPKICertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableGetPKICertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableGetPKICertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetPKICertificate(val *GetPKICertificate) *NullableGetPKICertificate {
	return &NullableGetPKICertificate{value: val, isSet: true}
}

func (v NullableGetPKICertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetPKICertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


