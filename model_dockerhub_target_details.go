/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// DockerhubTargetDetails DockerhubTargetDetails
type DockerhubTargetDetails struct {
	Password *string `json:"password,omitempty"`
	UserName *string `json:"user_name,omitempty"`
}

// NewDockerhubTargetDetails instantiates a new DockerhubTargetDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDockerhubTargetDetails() *DockerhubTargetDetails {
	this := DockerhubTargetDetails{}
	return &this
}

// NewDockerhubTargetDetailsWithDefaults instantiates a new DockerhubTargetDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDockerhubTargetDetailsWithDefaults() *DockerhubTargetDetails {
	this := DockerhubTargetDetails{}
	return &this
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *DockerhubTargetDetails) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerhubTargetDetails) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *DockerhubTargetDetails) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *DockerhubTargetDetails) SetPassword(v string) {
	o.Password = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *DockerhubTargetDetails) GetUserName() string {
	if o == nil || o.UserName == nil {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerhubTargetDetails) GetUserNameOk() (*string, bool) {
	if o == nil || o.UserName == nil {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *DockerhubTargetDetails) HasUserName() bool {
	if o != nil && o.UserName != nil {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *DockerhubTargetDetails) SetUserName(v string) {
	o.UserName = &v
}

func (o DockerhubTargetDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.UserName != nil {
		toSerialize["user_name"] = o.UserName
	}
	return json.Marshal(toSerialize)
}

type NullableDockerhubTargetDetails struct {
	value *DockerhubTargetDetails
	isSet bool
}

func (v NullableDockerhubTargetDetails) Get() *DockerhubTargetDetails {
	return v.value
}

func (v *NullableDockerhubTargetDetails) Set(val *DockerhubTargetDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableDockerhubTargetDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableDockerhubTargetDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDockerhubTargetDetails(val *DockerhubTargetDetails) *NullableDockerhubTargetDetails {
	return &NullableDockerhubTargetDetails{value: val, isSet: true}
}

func (v NullableDockerhubTargetDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDockerhubTargetDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


