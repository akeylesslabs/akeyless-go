/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// checks if the AuthMethodRoleAssociation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthMethodRoleAssociation{}

// AuthMethodRoleAssociation AuthMethodRoleAssociation includes details of an association between an auth method and a role.
type AuthMethodRoleAssociation struct {
	AllowedOps []string `json:"allowed_ops,omitempty"`
	AssocId *string `json:"assoc_id,omitempty"`
	AuthMethodSubClaims *map[string][]string `json:"auth_method_sub_claims,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	Rules *Rules `json:"rules,omitempty"`
}

// NewAuthMethodRoleAssociation instantiates a new AuthMethodRoleAssociation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthMethodRoleAssociation() *AuthMethodRoleAssociation {
	this := AuthMethodRoleAssociation{}
	return &this
}

// NewAuthMethodRoleAssociationWithDefaults instantiates a new AuthMethodRoleAssociation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthMethodRoleAssociationWithDefaults() *AuthMethodRoleAssociation {
	this := AuthMethodRoleAssociation{}
	return &this
}

// GetAllowedOps returns the AllowedOps field value if set, zero value otherwise.
func (o *AuthMethodRoleAssociation) GetAllowedOps() []string {
	if o == nil || IsNil(o.AllowedOps) {
		var ret []string
		return ret
	}
	return o.AllowedOps
}

// GetAllowedOpsOk returns a tuple with the AllowedOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthMethodRoleAssociation) GetAllowedOpsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedOps) {
		return nil, false
	}
	return o.AllowedOps, true
}

// HasAllowedOps returns a boolean if a field has been set.
func (o *AuthMethodRoleAssociation) HasAllowedOps() bool {
	if o != nil && !IsNil(o.AllowedOps) {
		return true
	}

	return false
}

// SetAllowedOps gets a reference to the given []string and assigns it to the AllowedOps field.
func (o *AuthMethodRoleAssociation) SetAllowedOps(v []string) {
	o.AllowedOps = v
}

// GetAssocId returns the AssocId field value if set, zero value otherwise.
func (o *AuthMethodRoleAssociation) GetAssocId() string {
	if o == nil || IsNil(o.AssocId) {
		var ret string
		return ret
	}
	return *o.AssocId
}

// GetAssocIdOk returns a tuple with the AssocId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthMethodRoleAssociation) GetAssocIdOk() (*string, bool) {
	if o == nil || IsNil(o.AssocId) {
		return nil, false
	}
	return o.AssocId, true
}

// HasAssocId returns a boolean if a field has been set.
func (o *AuthMethodRoleAssociation) HasAssocId() bool {
	if o != nil && !IsNil(o.AssocId) {
		return true
	}

	return false
}

// SetAssocId gets a reference to the given string and assigns it to the AssocId field.
func (o *AuthMethodRoleAssociation) SetAssocId(v string) {
	o.AssocId = &v
}

// GetAuthMethodSubClaims returns the AuthMethodSubClaims field value if set, zero value otherwise.
func (o *AuthMethodRoleAssociation) GetAuthMethodSubClaims() map[string][]string {
	if o == nil || IsNil(o.AuthMethodSubClaims) {
		var ret map[string][]string
		return ret
	}
	return *o.AuthMethodSubClaims
}

// GetAuthMethodSubClaimsOk returns a tuple with the AuthMethodSubClaims field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthMethodRoleAssociation) GetAuthMethodSubClaimsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.AuthMethodSubClaims) {
		return nil, false
	}
	return o.AuthMethodSubClaims, true
}

// HasAuthMethodSubClaims returns a boolean if a field has been set.
func (o *AuthMethodRoleAssociation) HasAuthMethodSubClaims() bool {
	if o != nil && !IsNil(o.AuthMethodSubClaims) {
		return true
	}

	return false
}

// SetAuthMethodSubClaims gets a reference to the given map[string][]string and assigns it to the AuthMethodSubClaims field.
func (o *AuthMethodRoleAssociation) SetAuthMethodSubClaims(v map[string][]string) {
	o.AuthMethodSubClaims = &v
}

// GetRoleName returns the RoleName field value if set, zero value otherwise.
func (o *AuthMethodRoleAssociation) GetRoleName() string {
	if o == nil || IsNil(o.RoleName) {
		var ret string
		return ret
	}
	return *o.RoleName
}

// GetRoleNameOk returns a tuple with the RoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthMethodRoleAssociation) GetRoleNameOk() (*string, bool) {
	if o == nil || IsNil(o.RoleName) {
		return nil, false
	}
	return o.RoleName, true
}

// HasRoleName returns a boolean if a field has been set.
func (o *AuthMethodRoleAssociation) HasRoleName() bool {
	if o != nil && !IsNil(o.RoleName) {
		return true
	}

	return false
}

// SetRoleName gets a reference to the given string and assigns it to the RoleName field.
func (o *AuthMethodRoleAssociation) SetRoleName(v string) {
	o.RoleName = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *AuthMethodRoleAssociation) GetRules() Rules {
	if o == nil || IsNil(o.Rules) {
		var ret Rules
		return ret
	}
	return *o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthMethodRoleAssociation) GetRulesOk() (*Rules, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *AuthMethodRoleAssociation) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given Rules and assigns it to the Rules field.
func (o *AuthMethodRoleAssociation) SetRules(v Rules) {
	o.Rules = &v
}

func (o AuthMethodRoleAssociation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthMethodRoleAssociation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowedOps) {
		toSerialize["allowed_ops"] = o.AllowedOps
	}
	if !IsNil(o.AssocId) {
		toSerialize["assoc_id"] = o.AssocId
	}
	if !IsNil(o.AuthMethodSubClaims) {
		toSerialize["auth_method_sub_claims"] = o.AuthMethodSubClaims
	}
	if !IsNil(o.RoleName) {
		toSerialize["role_name"] = o.RoleName
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	return toSerialize, nil
}

type NullableAuthMethodRoleAssociation struct {
	value *AuthMethodRoleAssociation
	isSet bool
}

func (v NullableAuthMethodRoleAssociation) Get() *AuthMethodRoleAssociation {
	return v.value
}

func (v *NullableAuthMethodRoleAssociation) Set(val *AuthMethodRoleAssociation) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthMethodRoleAssociation) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthMethodRoleAssociation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthMethodRoleAssociation(val *AuthMethodRoleAssociation) *NullableAuthMethodRoleAssociation {
	return &NullableAuthMethodRoleAssociation{value: val, isSet: true}
}

func (v NullableAuthMethodRoleAssociation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthMethodRoleAssociation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


