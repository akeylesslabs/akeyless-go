/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// UIDTokenDetails struct for UIDTokenDetails
type UIDTokenDetails struct {
	Children *map[string]UIDTokenDetails `json:"children,omitempty"`
	Comment *string `json:"comment,omitempty"`
	DenyInheritance *bool `json:"deny_inheritance,omitempty"`
	DenyRotate *bool `json:"deny_rotate,omitempty"`
	Depth *int32 `json:"depth,omitempty"`
	ExpiredDate *string `json:"expired_date,omitempty"`
	Id *string `json:"id,omitempty"`
	LastRotate *string `json:"last_rotate,omitempty"`
	Revoked *bool `json:"revoked,omitempty"`
	Ttl *int32 `json:"ttl,omitempty"`
}

// NewUIDTokenDetails instantiates a new UIDTokenDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUIDTokenDetails() *UIDTokenDetails {
	this := UIDTokenDetails{}
	return &this
}

// NewUIDTokenDetailsWithDefaults instantiates a new UIDTokenDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUIDTokenDetailsWithDefaults() *UIDTokenDetails {
	this := UIDTokenDetails{}
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *UIDTokenDetails) GetChildren() map[string]UIDTokenDetails {
	if o == nil || o.Children == nil {
		var ret map[string]UIDTokenDetails
		return ret
	}
	return *o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIDTokenDetails) GetChildrenOk() (*map[string]UIDTokenDetails, bool) {
	if o == nil || o.Children == nil {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *UIDTokenDetails) HasChildren() bool {
	if o != nil && o.Children != nil {
		return true
	}

	return false
}

// SetChildren gets a reference to the given map[string]UIDTokenDetails and assigns it to the Children field.
func (o *UIDTokenDetails) SetChildren(v map[string]UIDTokenDetails) {
	o.Children = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *UIDTokenDetails) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIDTokenDetails) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *UIDTokenDetails) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *UIDTokenDetails) SetComment(v string) {
	o.Comment = &v
}

// GetDenyInheritance returns the DenyInheritance field value if set, zero value otherwise.
func (o *UIDTokenDetails) GetDenyInheritance() bool {
	if o == nil || o.DenyInheritance == nil {
		var ret bool
		return ret
	}
	return *o.DenyInheritance
}

// GetDenyInheritanceOk returns a tuple with the DenyInheritance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIDTokenDetails) GetDenyInheritanceOk() (*bool, bool) {
	if o == nil || o.DenyInheritance == nil {
		return nil, false
	}
	return o.DenyInheritance, true
}

// HasDenyInheritance returns a boolean if a field has been set.
func (o *UIDTokenDetails) HasDenyInheritance() bool {
	if o != nil && o.DenyInheritance != nil {
		return true
	}

	return false
}

// SetDenyInheritance gets a reference to the given bool and assigns it to the DenyInheritance field.
func (o *UIDTokenDetails) SetDenyInheritance(v bool) {
	o.DenyInheritance = &v
}

// GetDenyRotate returns the DenyRotate field value if set, zero value otherwise.
func (o *UIDTokenDetails) GetDenyRotate() bool {
	if o == nil || o.DenyRotate == nil {
		var ret bool
		return ret
	}
	return *o.DenyRotate
}

// GetDenyRotateOk returns a tuple with the DenyRotate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIDTokenDetails) GetDenyRotateOk() (*bool, bool) {
	if o == nil || o.DenyRotate == nil {
		return nil, false
	}
	return o.DenyRotate, true
}

// HasDenyRotate returns a boolean if a field has been set.
func (o *UIDTokenDetails) HasDenyRotate() bool {
	if o != nil && o.DenyRotate != nil {
		return true
	}

	return false
}

// SetDenyRotate gets a reference to the given bool and assigns it to the DenyRotate field.
func (o *UIDTokenDetails) SetDenyRotate(v bool) {
	o.DenyRotate = &v
}

// GetDepth returns the Depth field value if set, zero value otherwise.
func (o *UIDTokenDetails) GetDepth() int32 {
	if o == nil || o.Depth == nil {
		var ret int32
		return ret
	}
	return *o.Depth
}

// GetDepthOk returns a tuple with the Depth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIDTokenDetails) GetDepthOk() (*int32, bool) {
	if o == nil || o.Depth == nil {
		return nil, false
	}
	return o.Depth, true
}

// HasDepth returns a boolean if a field has been set.
func (o *UIDTokenDetails) HasDepth() bool {
	if o != nil && o.Depth != nil {
		return true
	}

	return false
}

// SetDepth gets a reference to the given int32 and assigns it to the Depth field.
func (o *UIDTokenDetails) SetDepth(v int32) {
	o.Depth = &v
}

// GetExpiredDate returns the ExpiredDate field value if set, zero value otherwise.
func (o *UIDTokenDetails) GetExpiredDate() string {
	if o == nil || o.ExpiredDate == nil {
		var ret string
		return ret
	}
	return *o.ExpiredDate
}

// GetExpiredDateOk returns a tuple with the ExpiredDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIDTokenDetails) GetExpiredDateOk() (*string, bool) {
	if o == nil || o.ExpiredDate == nil {
		return nil, false
	}
	return o.ExpiredDate, true
}

// HasExpiredDate returns a boolean if a field has been set.
func (o *UIDTokenDetails) HasExpiredDate() bool {
	if o != nil && o.ExpiredDate != nil {
		return true
	}

	return false
}

// SetExpiredDate gets a reference to the given string and assigns it to the ExpiredDate field.
func (o *UIDTokenDetails) SetExpiredDate(v string) {
	o.ExpiredDate = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UIDTokenDetails) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIDTokenDetails) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UIDTokenDetails) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UIDTokenDetails) SetId(v string) {
	o.Id = &v
}

// GetLastRotate returns the LastRotate field value if set, zero value otherwise.
func (o *UIDTokenDetails) GetLastRotate() string {
	if o == nil || o.LastRotate == nil {
		var ret string
		return ret
	}
	return *o.LastRotate
}

// GetLastRotateOk returns a tuple with the LastRotate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIDTokenDetails) GetLastRotateOk() (*string, bool) {
	if o == nil || o.LastRotate == nil {
		return nil, false
	}
	return o.LastRotate, true
}

// HasLastRotate returns a boolean if a field has been set.
func (o *UIDTokenDetails) HasLastRotate() bool {
	if o != nil && o.LastRotate != nil {
		return true
	}

	return false
}

// SetLastRotate gets a reference to the given string and assigns it to the LastRotate field.
func (o *UIDTokenDetails) SetLastRotate(v string) {
	o.LastRotate = &v
}

// GetRevoked returns the Revoked field value if set, zero value otherwise.
func (o *UIDTokenDetails) GetRevoked() bool {
	if o == nil || o.Revoked == nil {
		var ret bool
		return ret
	}
	return *o.Revoked
}

// GetRevokedOk returns a tuple with the Revoked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIDTokenDetails) GetRevokedOk() (*bool, bool) {
	if o == nil || o.Revoked == nil {
		return nil, false
	}
	return o.Revoked, true
}

// HasRevoked returns a boolean if a field has been set.
func (o *UIDTokenDetails) HasRevoked() bool {
	if o != nil && o.Revoked != nil {
		return true
	}

	return false
}

// SetRevoked gets a reference to the given bool and assigns it to the Revoked field.
func (o *UIDTokenDetails) SetRevoked(v bool) {
	o.Revoked = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *UIDTokenDetails) GetTtl() int32 {
	if o == nil || o.Ttl == nil {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIDTokenDetails) GetTtlOk() (*int32, bool) {
	if o == nil || o.Ttl == nil {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *UIDTokenDetails) HasTtl() bool {
	if o != nil && o.Ttl != nil {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *UIDTokenDetails) SetTtl(v int32) {
	o.Ttl = &v
}

func (o UIDTokenDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Children != nil {
		toSerialize["children"] = o.Children
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.DenyInheritance != nil {
		toSerialize["deny_inheritance"] = o.DenyInheritance
	}
	if o.DenyRotate != nil {
		toSerialize["deny_rotate"] = o.DenyRotate
	}
	if o.Depth != nil {
		toSerialize["depth"] = o.Depth
	}
	if o.ExpiredDate != nil {
		toSerialize["expired_date"] = o.ExpiredDate
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LastRotate != nil {
		toSerialize["last_rotate"] = o.LastRotate
	}
	if o.Revoked != nil {
		toSerialize["revoked"] = o.Revoked
	}
	if o.Ttl != nil {
		toSerialize["ttl"] = o.Ttl
	}
	return json.Marshal(toSerialize)
}

type NullableUIDTokenDetails struct {
	value *UIDTokenDetails
	isSet bool
}

func (v NullableUIDTokenDetails) Get() *UIDTokenDetails {
	return v.value
}

func (v *NullableUIDTokenDetails) Set(val *UIDTokenDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableUIDTokenDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableUIDTokenDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUIDTokenDetails(val *UIDTokenDetails) *NullableUIDTokenDetails {
	return &NullableUIDTokenDetails{value: val, isSet: true}
}

func (v NullableUIDTokenDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUIDTokenDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


