/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// TokenizeOutput struct for TokenizeOutput
type TokenizeOutput struct {
	Result *string `json:"result,omitempty"`
	Tweak *string `json:"tweak,omitempty"`
}

// NewTokenizeOutput instantiates a new TokenizeOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizeOutput() *TokenizeOutput {
	this := TokenizeOutput{}
	return &this
}

// NewTokenizeOutputWithDefaults instantiates a new TokenizeOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizeOutputWithDefaults() *TokenizeOutput {
	this := TokenizeOutput{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *TokenizeOutput) GetResult() string {
	if o == nil || o.Result == nil {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizeOutput) GetResultOk() (*string, bool) {
	if o == nil || o.Result == nil {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *TokenizeOutput) HasResult() bool {
	if o != nil && o.Result != nil {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *TokenizeOutput) SetResult(v string) {
	o.Result = &v
}

// GetTweak returns the Tweak field value if set, zero value otherwise.
func (o *TokenizeOutput) GetTweak() string {
	if o == nil || o.Tweak == nil {
		var ret string
		return ret
	}
	return *o.Tweak
}

// GetTweakOk returns a tuple with the Tweak field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizeOutput) GetTweakOk() (*string, bool) {
	if o == nil || o.Tweak == nil {
		return nil, false
	}
	return o.Tweak, true
}

// HasTweak returns a boolean if a field has been set.
func (o *TokenizeOutput) HasTweak() bool {
	if o != nil && o.Tweak != nil {
		return true
	}

	return false
}

// SetTweak gets a reference to the given string and assigns it to the Tweak field.
func (o *TokenizeOutput) SetTweak(v string) {
	o.Tweak = &v
}

func (o TokenizeOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	if o.Tweak != nil {
		toSerialize["tweak"] = o.Tweak
	}
	return json.Marshal(toSerialize)
}

type NullableTokenizeOutput struct {
	value *TokenizeOutput
	isSet bool
}

func (v NullableTokenizeOutput) Get() *TokenizeOutput {
	return v.value
}

func (v *NullableTokenizeOutput) Set(val *TokenizeOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizeOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizeOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizeOutput(val *TokenizeOutput) *NullableTokenizeOutput {
	return &NullableTokenizeOutput{value: val, isSet: true}
}

func (v NullableTokenizeOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizeOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


