/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// UsageReportSummary struct for UsageReportSummary
type UsageReportSummary struct {
	ClientsByAuthMethodTypes *map[string]int64 `json:"clients_by_auth_method_types,omitempty"`
	Product *string `json:"product,omitempty"`
	SecretsByTypes *map[string]int64 `json:"secrets_by_types,omitempty"`
	Time *int64 `json:"time,omitempty"`
	TotalClients *int64 `json:"total_clients,omitempty"`
	TotalSecrets *int64 `json:"total_secrets,omitempty"`
}

// NewUsageReportSummary instantiates a new UsageReportSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageReportSummary() *UsageReportSummary {
	this := UsageReportSummary{}
	return &this
}

// NewUsageReportSummaryWithDefaults instantiates a new UsageReportSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageReportSummaryWithDefaults() *UsageReportSummary {
	this := UsageReportSummary{}
	return &this
}

// GetClientsByAuthMethodTypes returns the ClientsByAuthMethodTypes field value if set, zero value otherwise.
func (o *UsageReportSummary) GetClientsByAuthMethodTypes() map[string]int64 {
	if o == nil || o.ClientsByAuthMethodTypes == nil {
		var ret map[string]int64
		return ret
	}
	return *o.ClientsByAuthMethodTypes
}

// GetClientsByAuthMethodTypesOk returns a tuple with the ClientsByAuthMethodTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageReportSummary) GetClientsByAuthMethodTypesOk() (*map[string]int64, bool) {
	if o == nil || o.ClientsByAuthMethodTypes == nil {
		return nil, false
	}
	return o.ClientsByAuthMethodTypes, true
}

// HasClientsByAuthMethodTypes returns a boolean if a field has been set.
func (o *UsageReportSummary) HasClientsByAuthMethodTypes() bool {
	if o != nil && o.ClientsByAuthMethodTypes != nil {
		return true
	}

	return false
}

// SetClientsByAuthMethodTypes gets a reference to the given map[string]int64 and assigns it to the ClientsByAuthMethodTypes field.
func (o *UsageReportSummary) SetClientsByAuthMethodTypes(v map[string]int64) {
	o.ClientsByAuthMethodTypes = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *UsageReportSummary) GetProduct() string {
	if o == nil || o.Product == nil {
		var ret string
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageReportSummary) GetProductOk() (*string, bool) {
	if o == nil || o.Product == nil {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *UsageReportSummary) HasProduct() bool {
	if o != nil && o.Product != nil {
		return true
	}

	return false
}

// SetProduct gets a reference to the given string and assigns it to the Product field.
func (o *UsageReportSummary) SetProduct(v string) {
	o.Product = &v
}

// GetSecretsByTypes returns the SecretsByTypes field value if set, zero value otherwise.
func (o *UsageReportSummary) GetSecretsByTypes() map[string]int64 {
	if o == nil || o.SecretsByTypes == nil {
		var ret map[string]int64
		return ret
	}
	return *o.SecretsByTypes
}

// GetSecretsByTypesOk returns a tuple with the SecretsByTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageReportSummary) GetSecretsByTypesOk() (*map[string]int64, bool) {
	if o == nil || o.SecretsByTypes == nil {
		return nil, false
	}
	return o.SecretsByTypes, true
}

// HasSecretsByTypes returns a boolean if a field has been set.
func (o *UsageReportSummary) HasSecretsByTypes() bool {
	if o != nil && o.SecretsByTypes != nil {
		return true
	}

	return false
}

// SetSecretsByTypes gets a reference to the given map[string]int64 and assigns it to the SecretsByTypes field.
func (o *UsageReportSummary) SetSecretsByTypes(v map[string]int64) {
	o.SecretsByTypes = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *UsageReportSummary) GetTime() int64 {
	if o == nil || o.Time == nil {
		var ret int64
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageReportSummary) GetTimeOk() (*int64, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *UsageReportSummary) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given int64 and assigns it to the Time field.
func (o *UsageReportSummary) SetTime(v int64) {
	o.Time = &v
}

// GetTotalClients returns the TotalClients field value if set, zero value otherwise.
func (o *UsageReportSummary) GetTotalClients() int64 {
	if o == nil || o.TotalClients == nil {
		var ret int64
		return ret
	}
	return *o.TotalClients
}

// GetTotalClientsOk returns a tuple with the TotalClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageReportSummary) GetTotalClientsOk() (*int64, bool) {
	if o == nil || o.TotalClients == nil {
		return nil, false
	}
	return o.TotalClients, true
}

// HasTotalClients returns a boolean if a field has been set.
func (o *UsageReportSummary) HasTotalClients() bool {
	if o != nil && o.TotalClients != nil {
		return true
	}

	return false
}

// SetTotalClients gets a reference to the given int64 and assigns it to the TotalClients field.
func (o *UsageReportSummary) SetTotalClients(v int64) {
	o.TotalClients = &v
}

// GetTotalSecrets returns the TotalSecrets field value if set, zero value otherwise.
func (o *UsageReportSummary) GetTotalSecrets() int64 {
	if o == nil || o.TotalSecrets == nil {
		var ret int64
		return ret
	}
	return *o.TotalSecrets
}

// GetTotalSecretsOk returns a tuple with the TotalSecrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageReportSummary) GetTotalSecretsOk() (*int64, bool) {
	if o == nil || o.TotalSecrets == nil {
		return nil, false
	}
	return o.TotalSecrets, true
}

// HasTotalSecrets returns a boolean if a field has been set.
func (o *UsageReportSummary) HasTotalSecrets() bool {
	if o != nil && o.TotalSecrets != nil {
		return true
	}

	return false
}

// SetTotalSecrets gets a reference to the given int64 and assigns it to the TotalSecrets field.
func (o *UsageReportSummary) SetTotalSecrets(v int64) {
	o.TotalSecrets = &v
}

func (o UsageReportSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClientsByAuthMethodTypes != nil {
		toSerialize["clients_by_auth_method_types"] = o.ClientsByAuthMethodTypes
	}
	if o.Product != nil {
		toSerialize["product"] = o.Product
	}
	if o.SecretsByTypes != nil {
		toSerialize["secrets_by_types"] = o.SecretsByTypes
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.TotalClients != nil {
		toSerialize["total_clients"] = o.TotalClients
	}
	if o.TotalSecrets != nil {
		toSerialize["total_secrets"] = o.TotalSecrets
	}
	return json.Marshal(toSerialize)
}

type NullableUsageReportSummary struct {
	value *UsageReportSummary
	isSet bool
}

func (v NullableUsageReportSummary) Get() *UsageReportSummary {
	return v.value
}

func (v *NullableUsageReportSummary) Set(val *UsageReportSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageReportSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageReportSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageReportSummary(val *UsageReportSummary) *NullableUsageReportSummary {
	return &NullableUsageReportSummary{value: val, isSet: true}
}

func (v NullableUsageReportSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageReportSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


