/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// HashiVaultTargetDetails HashiVaultTargetDetails
type HashiVaultTargetDetails struct {
	VaultNamespaces *string `json:"vault_namespaces,omitempty"`
	VaultToken *string `json:"vault_token,omitempty"`
	VaultUrl *string `json:"vault_url,omitempty"`
}

// NewHashiVaultTargetDetails instantiates a new HashiVaultTargetDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHashiVaultTargetDetails() *HashiVaultTargetDetails {
	this := HashiVaultTargetDetails{}
	return &this
}

// NewHashiVaultTargetDetailsWithDefaults instantiates a new HashiVaultTargetDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHashiVaultTargetDetailsWithDefaults() *HashiVaultTargetDetails {
	this := HashiVaultTargetDetails{}
	return &this
}

// GetVaultNamespaces returns the VaultNamespaces field value if set, zero value otherwise.
func (o *HashiVaultTargetDetails) GetVaultNamespaces() string {
	if o == nil || o.VaultNamespaces == nil {
		var ret string
		return ret
	}
	return *o.VaultNamespaces
}

// GetVaultNamespacesOk returns a tuple with the VaultNamespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HashiVaultTargetDetails) GetVaultNamespacesOk() (*string, bool) {
	if o == nil || o.VaultNamespaces == nil {
		return nil, false
	}
	return o.VaultNamespaces, true
}

// HasVaultNamespaces returns a boolean if a field has been set.
func (o *HashiVaultTargetDetails) HasVaultNamespaces() bool {
	if o != nil && o.VaultNamespaces != nil {
		return true
	}

	return false
}

// SetVaultNamespaces gets a reference to the given string and assigns it to the VaultNamespaces field.
func (o *HashiVaultTargetDetails) SetVaultNamespaces(v string) {
	o.VaultNamespaces = &v
}

// GetVaultToken returns the VaultToken field value if set, zero value otherwise.
func (o *HashiVaultTargetDetails) GetVaultToken() string {
	if o == nil || o.VaultToken == nil {
		var ret string
		return ret
	}
	return *o.VaultToken
}

// GetVaultTokenOk returns a tuple with the VaultToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HashiVaultTargetDetails) GetVaultTokenOk() (*string, bool) {
	if o == nil || o.VaultToken == nil {
		return nil, false
	}
	return o.VaultToken, true
}

// HasVaultToken returns a boolean if a field has been set.
func (o *HashiVaultTargetDetails) HasVaultToken() bool {
	if o != nil && o.VaultToken != nil {
		return true
	}

	return false
}

// SetVaultToken gets a reference to the given string and assigns it to the VaultToken field.
func (o *HashiVaultTargetDetails) SetVaultToken(v string) {
	o.VaultToken = &v
}

// GetVaultUrl returns the VaultUrl field value if set, zero value otherwise.
func (o *HashiVaultTargetDetails) GetVaultUrl() string {
	if o == nil || o.VaultUrl == nil {
		var ret string
		return ret
	}
	return *o.VaultUrl
}

// GetVaultUrlOk returns a tuple with the VaultUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HashiVaultTargetDetails) GetVaultUrlOk() (*string, bool) {
	if o == nil || o.VaultUrl == nil {
		return nil, false
	}
	return o.VaultUrl, true
}

// HasVaultUrl returns a boolean if a field has been set.
func (o *HashiVaultTargetDetails) HasVaultUrl() bool {
	if o != nil && o.VaultUrl != nil {
		return true
	}

	return false
}

// SetVaultUrl gets a reference to the given string and assigns it to the VaultUrl field.
func (o *HashiVaultTargetDetails) SetVaultUrl(v string) {
	o.VaultUrl = &v
}

func (o HashiVaultTargetDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VaultNamespaces != nil {
		toSerialize["vault_namespaces"] = o.VaultNamespaces
	}
	if o.VaultToken != nil {
		toSerialize["vault_token"] = o.VaultToken
	}
	if o.VaultUrl != nil {
		toSerialize["vault_url"] = o.VaultUrl
	}
	return json.Marshal(toSerialize)
}

type NullableHashiVaultTargetDetails struct {
	value *HashiVaultTargetDetails
	isSet bool
}

func (v NullableHashiVaultTargetDetails) Get() *HashiVaultTargetDetails {
	return v.value
}

func (v *NullableHashiVaultTargetDetails) Set(val *HashiVaultTargetDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableHashiVaultTargetDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableHashiVaultTargetDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHashiVaultTargetDetails(val *HashiVaultTargetDetails) *NullableHashiVaultTargetDetails {
	return &NullableHashiVaultTargetDetails{value: val, isSet: true}
}

func (v NullableHashiVaultTargetDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHashiVaultTargetDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


