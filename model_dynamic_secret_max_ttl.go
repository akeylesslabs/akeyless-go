/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// DynamicSecretMaxTtl struct for DynamicSecretMaxTtl
type DynamicSecretMaxTtl struct {
	Enable *bool `json:"enable,omitempty"`
	MaxTtlByMinutes *int64 `json:"max_ttl_by_minutes,omitempty"`
}

// NewDynamicSecretMaxTtl instantiates a new DynamicSecretMaxTtl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDynamicSecretMaxTtl() *DynamicSecretMaxTtl {
	this := DynamicSecretMaxTtl{}
	return &this
}

// NewDynamicSecretMaxTtlWithDefaults instantiates a new DynamicSecretMaxTtl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDynamicSecretMaxTtlWithDefaults() *DynamicSecretMaxTtl {
	this := DynamicSecretMaxTtl{}
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *DynamicSecretMaxTtl) GetEnable() bool {
	if o == nil || o.Enable == nil {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicSecretMaxTtl) GetEnableOk() (*bool, bool) {
	if o == nil || o.Enable == nil {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *DynamicSecretMaxTtl) HasEnable() bool {
	if o != nil && o.Enable != nil {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *DynamicSecretMaxTtl) SetEnable(v bool) {
	o.Enable = &v
}

// GetMaxTtlByMinutes returns the MaxTtlByMinutes field value if set, zero value otherwise.
func (o *DynamicSecretMaxTtl) GetMaxTtlByMinutes() int64 {
	if o == nil || o.MaxTtlByMinutes == nil {
		var ret int64
		return ret
	}
	return *o.MaxTtlByMinutes
}

// GetMaxTtlByMinutesOk returns a tuple with the MaxTtlByMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicSecretMaxTtl) GetMaxTtlByMinutesOk() (*int64, bool) {
	if o == nil || o.MaxTtlByMinutes == nil {
		return nil, false
	}
	return o.MaxTtlByMinutes, true
}

// HasMaxTtlByMinutes returns a boolean if a field has been set.
func (o *DynamicSecretMaxTtl) HasMaxTtlByMinutes() bool {
	if o != nil && o.MaxTtlByMinutes != nil {
		return true
	}

	return false
}

// SetMaxTtlByMinutes gets a reference to the given int64 and assigns it to the MaxTtlByMinutes field.
func (o *DynamicSecretMaxTtl) SetMaxTtlByMinutes(v int64) {
	o.MaxTtlByMinutes = &v
}

func (o DynamicSecretMaxTtl) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enable != nil {
		toSerialize["enable"] = o.Enable
	}
	if o.MaxTtlByMinutes != nil {
		toSerialize["max_ttl_by_minutes"] = o.MaxTtlByMinutes
	}
	return json.Marshal(toSerialize)
}

type NullableDynamicSecretMaxTtl struct {
	value *DynamicSecretMaxTtl
	isSet bool
}

func (v NullableDynamicSecretMaxTtl) Get() *DynamicSecretMaxTtl {
	return v.value
}

func (v *NullableDynamicSecretMaxTtl) Set(val *DynamicSecretMaxTtl) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicSecretMaxTtl) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicSecretMaxTtl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicSecretMaxTtl(val *DynamicSecretMaxTtl) *NullableDynamicSecretMaxTtl {
	return &NullableDynamicSecretMaxTtl{value: val, isSet: true}
}

func (v NullableDynamicSecretMaxTtl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicSecretMaxTtl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


