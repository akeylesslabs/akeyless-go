/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// RotatorsConfigPart struct for RotatorsConfigPart
type RotatorsConfigPart struct {
	Rotators []Rotator `json:"rotators,omitempty"`
}

// NewRotatorsConfigPart instantiates a new RotatorsConfigPart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRotatorsConfigPart() *RotatorsConfigPart {
	this := RotatorsConfigPart{}
	return &this
}

// NewRotatorsConfigPartWithDefaults instantiates a new RotatorsConfigPart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRotatorsConfigPartWithDefaults() *RotatorsConfigPart {
	this := RotatorsConfigPart{}
	return &this
}

// GetRotators returns the Rotators field value if set, zero value otherwise.
func (o *RotatorsConfigPart) GetRotators() []Rotator {
	if o == nil || o.Rotators == nil {
		var ret []Rotator
		return ret
	}
	return o.Rotators
}

// GetRotatorsOk returns a tuple with the Rotators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RotatorsConfigPart) GetRotatorsOk() ([]Rotator, bool) {
	if o == nil || o.Rotators == nil {
		return nil, false
	}
	return o.Rotators, true
}

// HasRotators returns a boolean if a field has been set.
func (o *RotatorsConfigPart) HasRotators() bool {
	if o != nil && o.Rotators != nil {
		return true
	}

	return false
}

// SetRotators gets a reference to the given []Rotator and assigns it to the Rotators field.
func (o *RotatorsConfigPart) SetRotators(v []Rotator) {
	o.Rotators = v
}

func (o RotatorsConfigPart) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Rotators != nil {
		toSerialize["rotators"] = o.Rotators
	}
	return json.Marshal(toSerialize)
}

type NullableRotatorsConfigPart struct {
	value *RotatorsConfigPart
	isSet bool
}

func (v NullableRotatorsConfigPart) Get() *RotatorsConfigPart {
	return v.value
}

func (v *NullableRotatorsConfigPart) Set(val *RotatorsConfigPart) {
	v.value = val
	v.isSet = true
}

func (v NullableRotatorsConfigPart) IsSet() bool {
	return v.isSet
}

func (v *NullableRotatorsConfigPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRotatorsConfigPart(val *RotatorsConfigPart) *NullableRotatorsConfigPart {
	return &NullableRotatorsConfigPart{value: val, isSet: true}
}

func (v NullableRotatorsConfigPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRotatorsConfigPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


