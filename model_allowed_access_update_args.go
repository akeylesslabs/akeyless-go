/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// checks if the AllowedAccessUpdateArgs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllowedAccessUpdateArgs{}

// AllowedAccessUpdateArgs struct for AllowedAccessUpdateArgs
type AllowedAccessUpdateArgs struct {
	// Access ID The access id to be attached to this allowed access. Auth method with this access id should already exist.
	AccessId string `json:"access-id"`
	// Allowed access description
	Description *string `json:"description,omitempty"`
	// Allowed access name
	Name string `json:"name"`
	// New allowed access name
	NewName *string `json:"new-name,omitempty"`
	// Permissions  Comma-seperated list of permissions for this allowed access. Available permissions: [defaults,targets,classic_keys,automatic_migration,ldap_auth,dynamic_secret,k8s_auth,log_forwarding,zero_knowledge_encryption,rotated_secret,caching,event_forwarding,admin,kmip,general]
	Permissions *string `json:"permissions,omitempty"`
	// Sub claims key/val of sub claims, e.g group=admins,developers
	SubClaims *map[string]string `json:"sub-claims,omitempty"`
}

// NewAllowedAccessUpdateArgs instantiates a new AllowedAccessUpdateArgs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllowedAccessUpdateArgs(accessId string, name string) *AllowedAccessUpdateArgs {
	this := AllowedAccessUpdateArgs{}
	this.AccessId = accessId
	this.Name = name
	return &this
}

// NewAllowedAccessUpdateArgsWithDefaults instantiates a new AllowedAccessUpdateArgs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllowedAccessUpdateArgsWithDefaults() *AllowedAccessUpdateArgs {
	this := AllowedAccessUpdateArgs{}
	return &this
}

// GetAccessId returns the AccessId field value
func (o *AllowedAccessUpdateArgs) GetAccessId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessId
}

// GetAccessIdOk returns a tuple with the AccessId field value
// and a boolean to check if the value has been set.
func (o *AllowedAccessUpdateArgs) GetAccessIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessId, true
}

// SetAccessId sets field value
func (o *AllowedAccessUpdateArgs) SetAccessId(v string) {
	o.AccessId = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AllowedAccessUpdateArgs) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedAccessUpdateArgs) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AllowedAccessUpdateArgs) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AllowedAccessUpdateArgs) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *AllowedAccessUpdateArgs) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AllowedAccessUpdateArgs) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AllowedAccessUpdateArgs) SetName(v string) {
	o.Name = v
}

// GetNewName returns the NewName field value if set, zero value otherwise.
func (o *AllowedAccessUpdateArgs) GetNewName() string {
	if o == nil || IsNil(o.NewName) {
		var ret string
		return ret
	}
	return *o.NewName
}

// GetNewNameOk returns a tuple with the NewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedAccessUpdateArgs) GetNewNameOk() (*string, bool) {
	if o == nil || IsNil(o.NewName) {
		return nil, false
	}
	return o.NewName, true
}

// HasNewName returns a boolean if a field has been set.
func (o *AllowedAccessUpdateArgs) HasNewName() bool {
	if o != nil && !IsNil(o.NewName) {
		return true
	}

	return false
}

// SetNewName gets a reference to the given string and assigns it to the NewName field.
func (o *AllowedAccessUpdateArgs) SetNewName(v string) {
	o.NewName = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *AllowedAccessUpdateArgs) GetPermissions() string {
	if o == nil || IsNil(o.Permissions) {
		var ret string
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedAccessUpdateArgs) GetPermissionsOk() (*string, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *AllowedAccessUpdateArgs) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given string and assigns it to the Permissions field.
func (o *AllowedAccessUpdateArgs) SetPermissions(v string) {
	o.Permissions = &v
}

// GetSubClaims returns the SubClaims field value if set, zero value otherwise.
func (o *AllowedAccessUpdateArgs) GetSubClaims() map[string]string {
	if o == nil || IsNil(o.SubClaims) {
		var ret map[string]string
		return ret
	}
	return *o.SubClaims
}

// GetSubClaimsOk returns a tuple with the SubClaims field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedAccessUpdateArgs) GetSubClaimsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.SubClaims) {
		return nil, false
	}
	return o.SubClaims, true
}

// HasSubClaims returns a boolean if a field has been set.
func (o *AllowedAccessUpdateArgs) HasSubClaims() bool {
	if o != nil && !IsNil(o.SubClaims) {
		return true
	}

	return false
}

// SetSubClaims gets a reference to the given map[string]string and assigns it to the SubClaims field.
func (o *AllowedAccessUpdateArgs) SetSubClaims(v map[string]string) {
	o.SubClaims = &v
}

func (o AllowedAccessUpdateArgs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllowedAccessUpdateArgs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access-id"] = o.AccessId
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.NewName) {
		toSerialize["new-name"] = o.NewName
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.SubClaims) {
		toSerialize["sub-claims"] = o.SubClaims
	}
	return toSerialize, nil
}

type NullableAllowedAccessUpdateArgs struct {
	value *AllowedAccessUpdateArgs
	isSet bool
}

func (v NullableAllowedAccessUpdateArgs) Get() *AllowedAccessUpdateArgs {
	return v.value
}

func (v *NullableAllowedAccessUpdateArgs) Set(val *AllowedAccessUpdateArgs) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowedAccessUpdateArgs) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowedAccessUpdateArgs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowedAccessUpdateArgs(val *AllowedAccessUpdateArgs) *NullableAllowedAccessUpdateArgs {
	return &NullableAllowedAccessUpdateArgs{value: val, isSet: true}
}

func (v NullableAllowedAccessUpdateArgs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowedAccessUpdateArgs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


