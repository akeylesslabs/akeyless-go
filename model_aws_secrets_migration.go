/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// checks if the AWSSecretsMigration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AWSSecretsMigration{}

// AWSSecretsMigration struct for AWSSecretsMigration
type AWSSecretsMigration struct {
	General *MigrationGeneral `json:"general,omitempty"`
	Payload *AWSPayload `json:"payload,omitempty"`
}

// NewAWSSecretsMigration instantiates a new AWSSecretsMigration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAWSSecretsMigration() *AWSSecretsMigration {
	this := AWSSecretsMigration{}
	return &this
}

// NewAWSSecretsMigrationWithDefaults instantiates a new AWSSecretsMigration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAWSSecretsMigrationWithDefaults() *AWSSecretsMigration {
	this := AWSSecretsMigration{}
	return &this
}

// GetGeneral returns the General field value if set, zero value otherwise.
func (o *AWSSecretsMigration) GetGeneral() MigrationGeneral {
	if o == nil || IsNil(o.General) {
		var ret MigrationGeneral
		return ret
	}
	return *o.General
}

// GetGeneralOk returns a tuple with the General field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AWSSecretsMigration) GetGeneralOk() (*MigrationGeneral, bool) {
	if o == nil || IsNil(o.General) {
		return nil, false
	}
	return o.General, true
}

// HasGeneral returns a boolean if a field has been set.
func (o *AWSSecretsMigration) HasGeneral() bool {
	if o != nil && !IsNil(o.General) {
		return true
	}

	return false
}

// SetGeneral gets a reference to the given MigrationGeneral and assigns it to the General field.
func (o *AWSSecretsMigration) SetGeneral(v MigrationGeneral) {
	o.General = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *AWSSecretsMigration) GetPayload() AWSPayload {
	if o == nil || IsNil(o.Payload) {
		var ret AWSPayload
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AWSSecretsMigration) GetPayloadOk() (*AWSPayload, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *AWSSecretsMigration) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given AWSPayload and assigns it to the Payload field.
func (o *AWSSecretsMigration) SetPayload(v AWSPayload) {
	o.Payload = &v
}

func (o AWSSecretsMigration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AWSSecretsMigration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.General) {
		toSerialize["general"] = o.General
	}
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	return toSerialize, nil
}

type NullableAWSSecretsMigration struct {
	value *AWSSecretsMigration
	isSet bool
}

func (v NullableAWSSecretsMigration) Get() *AWSSecretsMigration {
	return v.value
}

func (v *NullableAWSSecretsMigration) Set(val *AWSSecretsMigration) {
	v.value = val
	v.isSet = true
}

func (v NullableAWSSecretsMigration) IsSet() bool {
	return v.isSet
}

func (v *NullableAWSSecretsMigration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAWSSecretsMigration(val *AWSSecretsMigration) *NullableAWSSecretsMigration {
	return &NullableAWSSecretsMigration{value: val, isSet: true}
}

func (v NullableAWSSecretsMigration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAWSSecretsMigration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


