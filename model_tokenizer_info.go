/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// TokenizerInfo struct for TokenizerInfo
type TokenizerInfo struct {
	VaultlessTokenizerInfo *VaultlessTokenizerInfo `json:"vaultless_tokenizer_info,omitempty"`
}

// NewTokenizerInfo instantiates a new TokenizerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizerInfo() *TokenizerInfo {
	this := TokenizerInfo{}
	return &this
}

// NewTokenizerInfoWithDefaults instantiates a new TokenizerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizerInfoWithDefaults() *TokenizerInfo {
	this := TokenizerInfo{}
	return &this
}

// GetVaultlessTokenizerInfo returns the VaultlessTokenizerInfo field value if set, zero value otherwise.
func (o *TokenizerInfo) GetVaultlessTokenizerInfo() VaultlessTokenizerInfo {
	if o == nil || o.VaultlessTokenizerInfo == nil {
		var ret VaultlessTokenizerInfo
		return ret
	}
	return *o.VaultlessTokenizerInfo
}

// GetVaultlessTokenizerInfoOk returns a tuple with the VaultlessTokenizerInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizerInfo) GetVaultlessTokenizerInfoOk() (*VaultlessTokenizerInfo, bool) {
	if o == nil || o.VaultlessTokenizerInfo == nil {
		return nil, false
	}
	return o.VaultlessTokenizerInfo, true
}

// HasVaultlessTokenizerInfo returns a boolean if a field has been set.
func (o *TokenizerInfo) HasVaultlessTokenizerInfo() bool {
	if o != nil && o.VaultlessTokenizerInfo != nil {
		return true
	}

	return false
}

// SetVaultlessTokenizerInfo gets a reference to the given VaultlessTokenizerInfo and assigns it to the VaultlessTokenizerInfo field.
func (o *TokenizerInfo) SetVaultlessTokenizerInfo(v VaultlessTokenizerInfo) {
	o.VaultlessTokenizerInfo = &v
}

func (o TokenizerInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VaultlessTokenizerInfo != nil {
		toSerialize["vaultless_tokenizer_info"] = o.VaultlessTokenizerInfo
	}
	return json.Marshal(toSerialize)
}

type NullableTokenizerInfo struct {
	value *TokenizerInfo
	isSet bool
}

func (v NullableTokenizerInfo) Get() *TokenizerInfo {
	return v.value
}

func (v *NullableTokenizerInfo) Set(val *TokenizerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizerInfo(val *TokenizerInfo) *NullableTokenizerInfo {
	return &NullableTokenizerInfo{value: val, isSet: true}
}

func (v NullableTokenizerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


