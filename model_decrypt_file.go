/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// DecryptFile struct for DecryptFile
type DecryptFile struct {
	// The encryption context. If this was specified in the encrypt command, it must be specified here or the decryption operation will fail
	EncContext *map[string]string `json:"EncContext,omitempty"`
	// Path to the file to be decrypted. If not provided, the content will be taken from stdin
	InputFile string `json:"InputFile"`
	// The name of the key to use in the decryption process
	KeyName string `json:"KeyName"`
	// Path to the output file. If not provided, the output will be sent to stdout
	OutputFilePath *string `json:"OutputFilePath,omitempty"`
	// Authentication token (see `/auth` and `/configure`)
	Token *string `json:"token,omitempty"`
	// The universal identity token, Required only for universal_identity authentication
	UidToken *string `json:"uid-token,omitempty"`
}

// NewDecryptFile instantiates a new DecryptFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecryptFile(inputFile string, keyName string, ) *DecryptFile {
	this := DecryptFile{}
	this.InputFile = inputFile
	this.KeyName = keyName
	return &this
}

// NewDecryptFileWithDefaults instantiates a new DecryptFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecryptFileWithDefaults() *DecryptFile {
	this := DecryptFile{}
	return &this
}

// GetEncContext returns the EncContext field value if set, zero value otherwise.
func (o *DecryptFile) GetEncContext() map[string]string {
	if o == nil || o.EncContext == nil {
		var ret map[string]string
		return ret
	}
	return *o.EncContext
}

// GetEncContextOk returns a tuple with the EncContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptFile) GetEncContextOk() (*map[string]string, bool) {
	if o == nil || o.EncContext == nil {
		return nil, false
	}
	return o.EncContext, true
}

// HasEncContext returns a boolean if a field has been set.
func (o *DecryptFile) HasEncContext() bool {
	if o != nil && o.EncContext != nil {
		return true
	}

	return false
}

// SetEncContext gets a reference to the given map[string]string and assigns it to the EncContext field.
func (o *DecryptFile) SetEncContext(v map[string]string) {
	o.EncContext = &v
}

// GetInputFile returns the InputFile field value
func (o *DecryptFile) GetInputFile() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.InputFile
}

// GetInputFileOk returns a tuple with the InputFile field value
// and a boolean to check if the value has been set.
func (o *DecryptFile) GetInputFileOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InputFile, true
}

// SetInputFile sets field value
func (o *DecryptFile) SetInputFile(v string) {
	o.InputFile = v
}

// GetKeyName returns the KeyName field value
func (o *DecryptFile) GetKeyName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.KeyName
}

// GetKeyNameOk returns a tuple with the KeyName field value
// and a boolean to check if the value has been set.
func (o *DecryptFile) GetKeyNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.KeyName, true
}

// SetKeyName sets field value
func (o *DecryptFile) SetKeyName(v string) {
	o.KeyName = v
}

// GetOutputFilePath returns the OutputFilePath field value if set, zero value otherwise.
func (o *DecryptFile) GetOutputFilePath() string {
	if o == nil || o.OutputFilePath == nil {
		var ret string
		return ret
	}
	return *o.OutputFilePath
}

// GetOutputFilePathOk returns a tuple with the OutputFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptFile) GetOutputFilePathOk() (*string, bool) {
	if o == nil || o.OutputFilePath == nil {
		return nil, false
	}
	return o.OutputFilePath, true
}

// HasOutputFilePath returns a boolean if a field has been set.
func (o *DecryptFile) HasOutputFilePath() bool {
	if o != nil && o.OutputFilePath != nil {
		return true
	}

	return false
}

// SetOutputFilePath gets a reference to the given string and assigns it to the OutputFilePath field.
func (o *DecryptFile) SetOutputFilePath(v string) {
	o.OutputFilePath = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *DecryptFile) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptFile) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *DecryptFile) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *DecryptFile) SetToken(v string) {
	o.Token = &v
}

// GetUidToken returns the UidToken field value if set, zero value otherwise.
func (o *DecryptFile) GetUidToken() string {
	if o == nil || o.UidToken == nil {
		var ret string
		return ret
	}
	return *o.UidToken
}

// GetUidTokenOk returns a tuple with the UidToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptFile) GetUidTokenOk() (*string, bool) {
	if o == nil || o.UidToken == nil {
		return nil, false
	}
	return o.UidToken, true
}

// HasUidToken returns a boolean if a field has been set.
func (o *DecryptFile) HasUidToken() bool {
	if o != nil && o.UidToken != nil {
		return true
	}

	return false
}

// SetUidToken gets a reference to the given string and assigns it to the UidToken field.
func (o *DecryptFile) SetUidToken(v string) {
	o.UidToken = &v
}

func (o DecryptFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EncContext != nil {
		toSerialize["EncContext"] = o.EncContext
	}
	if true {
		toSerialize["InputFile"] = o.InputFile
	}
	if true {
		toSerialize["KeyName"] = o.KeyName
	}
	if o.OutputFilePath != nil {
		toSerialize["OutputFilePath"] = o.OutputFilePath
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.UidToken != nil {
		toSerialize["uid-token"] = o.UidToken
	}
	return json.Marshal(toSerialize)
}

type NullableDecryptFile struct {
	value *DecryptFile
	isSet bool
}

func (v NullableDecryptFile) Get() *DecryptFile {
	return v.value
}

func (v *NullableDecryptFile) Set(val *DecryptFile) {
	v.value = val
	v.isSet = true
}

func (v NullableDecryptFile) IsSet() bool {
	return v.isSet
}

func (v *NullableDecryptFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecryptFile(val *DecryptFile) *NullableDecryptFile {
	return &NullableDecryptFile{value: val, isSet: true}
}

func (v NullableDecryptFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecryptFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


