/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// SignPKCS1Output struct for SignPKCS1Output
type SignPKCS1Output struct {
	Result []int32 `json:"result,omitempty"`
}

// NewSignPKCS1Output instantiates a new SignPKCS1Output object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignPKCS1Output() *SignPKCS1Output {
	this := SignPKCS1Output{}
	return &this
}

// NewSignPKCS1OutputWithDefaults instantiates a new SignPKCS1Output object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignPKCS1OutputWithDefaults() *SignPKCS1Output {
	this := SignPKCS1Output{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *SignPKCS1Output) GetResult() []int32 {
	if o == nil || o.Result == nil {
		var ret []int32
		return ret
	}
	return o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignPKCS1Output) GetResultOk() ([]int32, bool) {
	if o == nil || o.Result == nil {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *SignPKCS1Output) HasResult() bool {
	if o != nil && o.Result != nil {
		return true
	}

	return false
}

// SetResult gets a reference to the given []int32 and assigns it to the Result field.
func (o *SignPKCS1Output) SetResult(v []int32) {
	o.Result = v
}

func (o SignPKCS1Output) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	return json.Marshal(toSerialize)
}

type NullableSignPKCS1Output struct {
	value *SignPKCS1Output
	isSet bool
}

func (v NullableSignPKCS1Output) Get() *SignPKCS1Output {
	return v.value
}

func (v *NullableSignPKCS1Output) Set(val *SignPKCS1Output) {
	v.value = val
	v.isSet = true
}

func (v NullableSignPKCS1Output) IsSet() bool {
	return v.isSet
}

func (v *NullableSignPKCS1Output) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignPKCS1Output(val *SignPKCS1Output) *NullableSignPKCS1Output {
	return &NullableSignPKCS1Output{value: val, isSet: true}
}

func (v NullableSignPKCS1Output) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignPKCS1Output) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


