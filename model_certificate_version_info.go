/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
	"time"
)

// CertificateVersionInfo struct for CertificateVersionInfo
type CertificateVersionInfo struct {
	NotAfter *time.Time `json:"not_after,omitempty"`
	NotBefore *time.Time `json:"not_before,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewCertificateVersionInfo instantiates a new CertificateVersionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateVersionInfo() *CertificateVersionInfo {
	this := CertificateVersionInfo{}
	return &this
}

// NewCertificateVersionInfoWithDefaults instantiates a new CertificateVersionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateVersionInfoWithDefaults() *CertificateVersionInfo {
	this := CertificateVersionInfo{}
	return &this
}

// GetNotAfter returns the NotAfter field value if set, zero value otherwise.
func (o *CertificateVersionInfo) GetNotAfter() time.Time {
	if o == nil || o.NotAfter == nil {
		var ret time.Time
		return ret
	}
	return *o.NotAfter
}

// GetNotAfterOk returns a tuple with the NotAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateVersionInfo) GetNotAfterOk() (*time.Time, bool) {
	if o == nil || o.NotAfter == nil {
		return nil, false
	}
	return o.NotAfter, true
}

// HasNotAfter returns a boolean if a field has been set.
func (o *CertificateVersionInfo) HasNotAfter() bool {
	if o != nil && o.NotAfter != nil {
		return true
	}

	return false
}

// SetNotAfter gets a reference to the given time.Time and assigns it to the NotAfter field.
func (o *CertificateVersionInfo) SetNotAfter(v time.Time) {
	o.NotAfter = &v
}

// GetNotBefore returns the NotBefore field value if set, zero value otherwise.
func (o *CertificateVersionInfo) GetNotBefore() time.Time {
	if o == nil || o.NotBefore == nil {
		var ret time.Time
		return ret
	}
	return *o.NotBefore
}

// GetNotBeforeOk returns a tuple with the NotBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateVersionInfo) GetNotBeforeOk() (*time.Time, bool) {
	if o == nil || o.NotBefore == nil {
		return nil, false
	}
	return o.NotBefore, true
}

// HasNotBefore returns a boolean if a field has been set.
func (o *CertificateVersionInfo) HasNotBefore() bool {
	if o != nil && o.NotBefore != nil {
		return true
	}

	return false
}

// SetNotBefore gets a reference to the given time.Time and assigns it to the NotBefore field.
func (o *CertificateVersionInfo) SetNotBefore(v time.Time) {
	o.NotBefore = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CertificateVersionInfo) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateVersionInfo) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CertificateVersionInfo) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CertificateVersionInfo) SetStatus(v string) {
	o.Status = &v
}

func (o CertificateVersionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NotAfter != nil {
		toSerialize["not_after"] = o.NotAfter
	}
	if o.NotBefore != nil {
		toSerialize["not_before"] = o.NotBefore
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableCertificateVersionInfo struct {
	value *CertificateVersionInfo
	isSet bool
}

func (v NullableCertificateVersionInfo) Get() *CertificateVersionInfo {
	return v.value
}

func (v *NullableCertificateVersionInfo) Set(val *CertificateVersionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateVersionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateVersionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateVersionInfo(val *CertificateVersionInfo) *NullableCertificateVersionInfo {
	return &NullableCertificateVersionInfo{value: val, isSet: true}
}

func (v NullableCertificateVersionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateVersionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


