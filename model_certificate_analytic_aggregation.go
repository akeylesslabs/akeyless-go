/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// CertificateAnalyticAggregation struct for CertificateAnalyticAggregation
type CertificateAnalyticAggregation struct {
	AccountId *string `json:"account_id,omitempty"`
	CaCounts *map[string]int32 `json:"ca_counts,omitempty"`
	RiskCounts *map[string]int32 `json:"risk_counts,omitempty"`
}

// NewCertificateAnalyticAggregation instantiates a new CertificateAnalyticAggregation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateAnalyticAggregation() *CertificateAnalyticAggregation {
	this := CertificateAnalyticAggregation{}
	return &this
}

// NewCertificateAnalyticAggregationWithDefaults instantiates a new CertificateAnalyticAggregation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateAnalyticAggregationWithDefaults() *CertificateAnalyticAggregation {
	this := CertificateAnalyticAggregation{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *CertificateAnalyticAggregation) GetAccountId() string {
	if o == nil || o.AccountId == nil {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAnalyticAggregation) GetAccountIdOk() (*string, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *CertificateAnalyticAggregation) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *CertificateAnalyticAggregation) SetAccountId(v string) {
	o.AccountId = &v
}

// GetCaCounts returns the CaCounts field value if set, zero value otherwise.
func (o *CertificateAnalyticAggregation) GetCaCounts() map[string]int32 {
	if o == nil || o.CaCounts == nil {
		var ret map[string]int32
		return ret
	}
	return *o.CaCounts
}

// GetCaCountsOk returns a tuple with the CaCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAnalyticAggregation) GetCaCountsOk() (*map[string]int32, bool) {
	if o == nil || o.CaCounts == nil {
		return nil, false
	}
	return o.CaCounts, true
}

// HasCaCounts returns a boolean if a field has been set.
func (o *CertificateAnalyticAggregation) HasCaCounts() bool {
	if o != nil && o.CaCounts != nil {
		return true
	}

	return false
}

// SetCaCounts gets a reference to the given map[string]int32 and assigns it to the CaCounts field.
func (o *CertificateAnalyticAggregation) SetCaCounts(v map[string]int32) {
	o.CaCounts = &v
}

// GetRiskCounts returns the RiskCounts field value if set, zero value otherwise.
func (o *CertificateAnalyticAggregation) GetRiskCounts() map[string]int32 {
	if o == nil || o.RiskCounts == nil {
		var ret map[string]int32
		return ret
	}
	return *o.RiskCounts
}

// GetRiskCountsOk returns a tuple with the RiskCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAnalyticAggregation) GetRiskCountsOk() (*map[string]int32, bool) {
	if o == nil || o.RiskCounts == nil {
		return nil, false
	}
	return o.RiskCounts, true
}

// HasRiskCounts returns a boolean if a field has been set.
func (o *CertificateAnalyticAggregation) HasRiskCounts() bool {
	if o != nil && o.RiskCounts != nil {
		return true
	}

	return false
}

// SetRiskCounts gets a reference to the given map[string]int32 and assigns it to the RiskCounts field.
func (o *CertificateAnalyticAggregation) SetRiskCounts(v map[string]int32) {
	o.RiskCounts = &v
}

func (o CertificateAnalyticAggregation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountId != nil {
		toSerialize["account_id"] = o.AccountId
	}
	if o.CaCounts != nil {
		toSerialize["ca_counts"] = o.CaCounts
	}
	if o.RiskCounts != nil {
		toSerialize["risk_counts"] = o.RiskCounts
	}
	return json.Marshal(toSerialize)
}

type NullableCertificateAnalyticAggregation struct {
	value *CertificateAnalyticAggregation
	isSet bool
}

func (v NullableCertificateAnalyticAggregation) Get() *CertificateAnalyticAggregation {
	return v.value
}

func (v *NullableCertificateAnalyticAggregation) Set(val *CertificateAnalyticAggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateAnalyticAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateAnalyticAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateAnalyticAggregation(val *CertificateAnalyticAggregation) *NullableCertificateAnalyticAggregation {
	return &NullableCertificateAnalyticAggregation{value: val, isSet: true}
}

func (v NullableCertificateAnalyticAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateAnalyticAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


