/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// ImportPasswordsOutput struct for ImportPasswordsOutput
type ImportPasswordsOutput struct {
	Imported *int32 `json:"imported,omitempty"`
	PasswordsInFile *int64 `json:"passwords_in_file,omitempty"`
	SuccessfullyParsed *int64 `json:"successfully_parsed,omitempty"`
}

// NewImportPasswordsOutput instantiates a new ImportPasswordsOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportPasswordsOutput() *ImportPasswordsOutput {
	this := ImportPasswordsOutput{}
	return &this
}

// NewImportPasswordsOutputWithDefaults instantiates a new ImportPasswordsOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportPasswordsOutputWithDefaults() *ImportPasswordsOutput {
	this := ImportPasswordsOutput{}
	return &this
}

// GetImported returns the Imported field value if set, zero value otherwise.
func (o *ImportPasswordsOutput) GetImported() int32 {
	if o == nil || o.Imported == nil {
		var ret int32
		return ret
	}
	return *o.Imported
}

// GetImportedOk returns a tuple with the Imported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportPasswordsOutput) GetImportedOk() (*int32, bool) {
	if o == nil || o.Imported == nil {
		return nil, false
	}
	return o.Imported, true
}

// HasImported returns a boolean if a field has been set.
func (o *ImportPasswordsOutput) HasImported() bool {
	if o != nil && o.Imported != nil {
		return true
	}

	return false
}

// SetImported gets a reference to the given int32 and assigns it to the Imported field.
func (o *ImportPasswordsOutput) SetImported(v int32) {
	o.Imported = &v
}

// GetPasswordsInFile returns the PasswordsInFile field value if set, zero value otherwise.
func (o *ImportPasswordsOutput) GetPasswordsInFile() int64 {
	if o == nil || o.PasswordsInFile == nil {
		var ret int64
		return ret
	}
	return *o.PasswordsInFile
}

// GetPasswordsInFileOk returns a tuple with the PasswordsInFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportPasswordsOutput) GetPasswordsInFileOk() (*int64, bool) {
	if o == nil || o.PasswordsInFile == nil {
		return nil, false
	}
	return o.PasswordsInFile, true
}

// HasPasswordsInFile returns a boolean if a field has been set.
func (o *ImportPasswordsOutput) HasPasswordsInFile() bool {
	if o != nil && o.PasswordsInFile != nil {
		return true
	}

	return false
}

// SetPasswordsInFile gets a reference to the given int64 and assigns it to the PasswordsInFile field.
func (o *ImportPasswordsOutput) SetPasswordsInFile(v int64) {
	o.PasswordsInFile = &v
}

// GetSuccessfullyParsed returns the SuccessfullyParsed field value if set, zero value otherwise.
func (o *ImportPasswordsOutput) GetSuccessfullyParsed() int64 {
	if o == nil || o.SuccessfullyParsed == nil {
		var ret int64
		return ret
	}
	return *o.SuccessfullyParsed
}

// GetSuccessfullyParsedOk returns a tuple with the SuccessfullyParsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportPasswordsOutput) GetSuccessfullyParsedOk() (*int64, bool) {
	if o == nil || o.SuccessfullyParsed == nil {
		return nil, false
	}
	return o.SuccessfullyParsed, true
}

// HasSuccessfullyParsed returns a boolean if a field has been set.
func (o *ImportPasswordsOutput) HasSuccessfullyParsed() bool {
	if o != nil && o.SuccessfullyParsed != nil {
		return true
	}

	return false
}

// SetSuccessfullyParsed gets a reference to the given int64 and assigns it to the SuccessfullyParsed field.
func (o *ImportPasswordsOutput) SetSuccessfullyParsed(v int64) {
	o.SuccessfullyParsed = &v
}

func (o ImportPasswordsOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Imported != nil {
		toSerialize["imported"] = o.Imported
	}
	if o.PasswordsInFile != nil {
		toSerialize["passwords_in_file"] = o.PasswordsInFile
	}
	if o.SuccessfullyParsed != nil {
		toSerialize["successfully_parsed"] = o.SuccessfullyParsed
	}
	return json.Marshal(toSerialize)
}

type NullableImportPasswordsOutput struct {
	value *ImportPasswordsOutput
	isSet bool
}

func (v NullableImportPasswordsOutput) Get() *ImportPasswordsOutput {
	return v.value
}

func (v *NullableImportPasswordsOutput) Set(val *ImportPasswordsOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableImportPasswordsOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableImportPasswordsOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportPasswordsOutput(val *ImportPasswordsOutput) *NullableImportPasswordsOutput {
	return &NullableImportPasswordsOutput{value: val, isSet: true}
}

func (v NullableImportPasswordsOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportPasswordsOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


