/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// checks if the UpdateCertificateValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCertificateValue{}

// UpdateCertificateValue struct for UpdateCertificateValue
type UpdateCertificateValue struct {
	// Content of the certificate in a Base64 format.
	CertificateData *string `json:"certificate-data,omitempty"`
	// How many days before the expiration of the certificate would you like to be notified.
	ExpirationEventIn []string `json:"expiration-event-in,omitempty"`
	// CertificateFormat of the certificate and private key, possible values: cer,crt,pem,pfx,p12. Required when passing inline certificate content with --certificate-data or --key-data, otherwise format is derived from the file extension.
	Format *string `json:"format,omitempty"`
	// Set output format to JSON
	Json *bool `json:"json,omitempty"`
	// The name of a key to use to encrypt the certificate's key (if empty, the account default protectionKey key will be used)
	Key *string `json:"key,omitempty"`
	// Content of the certificate's private key in a Base64 format.
	KeyData *string `json:"key-data,omitempty"`
	// Certificate name
	Name string `json:"name"`
	// Authentication token (see `/auth` and `/configure`)
	Token *string `json:"token,omitempty"`
	// The universal identity token, Required only for universal_identity authentication
	UidToken *string `json:"uid-token,omitempty"`
}

// NewUpdateCertificateValue instantiates a new UpdateCertificateValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCertificateValue(name string) *UpdateCertificateValue {
	this := UpdateCertificateValue{}
	var json bool = false
	this.Json = &json
	this.Name = name
	return &this
}

// NewUpdateCertificateValueWithDefaults instantiates a new UpdateCertificateValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCertificateValueWithDefaults() *UpdateCertificateValue {
	this := UpdateCertificateValue{}
	var json bool = false
	this.Json = &json
	return &this
}

// GetCertificateData returns the CertificateData field value if set, zero value otherwise.
func (o *UpdateCertificateValue) GetCertificateData() string {
	if o == nil || IsNil(o.CertificateData) {
		var ret string
		return ret
	}
	return *o.CertificateData
}

// GetCertificateDataOk returns a tuple with the CertificateData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCertificateValue) GetCertificateDataOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateData) {
		return nil, false
	}
	return o.CertificateData, true
}

// HasCertificateData returns a boolean if a field has been set.
func (o *UpdateCertificateValue) HasCertificateData() bool {
	if o != nil && !IsNil(o.CertificateData) {
		return true
	}

	return false
}

// SetCertificateData gets a reference to the given string and assigns it to the CertificateData field.
func (o *UpdateCertificateValue) SetCertificateData(v string) {
	o.CertificateData = &v
}

// GetExpirationEventIn returns the ExpirationEventIn field value if set, zero value otherwise.
func (o *UpdateCertificateValue) GetExpirationEventIn() []string {
	if o == nil || IsNil(o.ExpirationEventIn) {
		var ret []string
		return ret
	}
	return o.ExpirationEventIn
}

// GetExpirationEventInOk returns a tuple with the ExpirationEventIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCertificateValue) GetExpirationEventInOk() ([]string, bool) {
	if o == nil || IsNil(o.ExpirationEventIn) {
		return nil, false
	}
	return o.ExpirationEventIn, true
}

// HasExpirationEventIn returns a boolean if a field has been set.
func (o *UpdateCertificateValue) HasExpirationEventIn() bool {
	if o != nil && !IsNil(o.ExpirationEventIn) {
		return true
	}

	return false
}

// SetExpirationEventIn gets a reference to the given []string and assigns it to the ExpirationEventIn field.
func (o *UpdateCertificateValue) SetExpirationEventIn(v []string) {
	o.ExpirationEventIn = v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *UpdateCertificateValue) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCertificateValue) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *UpdateCertificateValue) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *UpdateCertificateValue) SetFormat(v string) {
	o.Format = &v
}

// GetJson returns the Json field value if set, zero value otherwise.
func (o *UpdateCertificateValue) GetJson() bool {
	if o == nil || IsNil(o.Json) {
		var ret bool
		return ret
	}
	return *o.Json
}

// GetJsonOk returns a tuple with the Json field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCertificateValue) GetJsonOk() (*bool, bool) {
	if o == nil || IsNil(o.Json) {
		return nil, false
	}
	return o.Json, true
}

// HasJson returns a boolean if a field has been set.
func (o *UpdateCertificateValue) HasJson() bool {
	if o != nil && !IsNil(o.Json) {
		return true
	}

	return false
}

// SetJson gets a reference to the given bool and assigns it to the Json field.
func (o *UpdateCertificateValue) SetJson(v bool) {
	o.Json = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *UpdateCertificateValue) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCertificateValue) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *UpdateCertificateValue) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *UpdateCertificateValue) SetKey(v string) {
	o.Key = &v
}

// GetKeyData returns the KeyData field value if set, zero value otherwise.
func (o *UpdateCertificateValue) GetKeyData() string {
	if o == nil || IsNil(o.KeyData) {
		var ret string
		return ret
	}
	return *o.KeyData
}

// GetKeyDataOk returns a tuple with the KeyData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCertificateValue) GetKeyDataOk() (*string, bool) {
	if o == nil || IsNil(o.KeyData) {
		return nil, false
	}
	return o.KeyData, true
}

// HasKeyData returns a boolean if a field has been set.
func (o *UpdateCertificateValue) HasKeyData() bool {
	if o != nil && !IsNil(o.KeyData) {
		return true
	}

	return false
}

// SetKeyData gets a reference to the given string and assigns it to the KeyData field.
func (o *UpdateCertificateValue) SetKeyData(v string) {
	o.KeyData = &v
}

// GetName returns the Name field value
func (o *UpdateCertificateValue) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateCertificateValue) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateCertificateValue) SetName(v string) {
	o.Name = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *UpdateCertificateValue) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCertificateValue) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *UpdateCertificateValue) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *UpdateCertificateValue) SetToken(v string) {
	o.Token = &v
}

// GetUidToken returns the UidToken field value if set, zero value otherwise.
func (o *UpdateCertificateValue) GetUidToken() string {
	if o == nil || IsNil(o.UidToken) {
		var ret string
		return ret
	}
	return *o.UidToken
}

// GetUidTokenOk returns a tuple with the UidToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCertificateValue) GetUidTokenOk() (*string, bool) {
	if o == nil || IsNil(o.UidToken) {
		return nil, false
	}
	return o.UidToken, true
}

// HasUidToken returns a boolean if a field has been set.
func (o *UpdateCertificateValue) HasUidToken() bool {
	if o != nil && !IsNil(o.UidToken) {
		return true
	}

	return false
}

// SetUidToken gets a reference to the given string and assigns it to the UidToken field.
func (o *UpdateCertificateValue) SetUidToken(v string) {
	o.UidToken = &v
}

func (o UpdateCertificateValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCertificateValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CertificateData) {
		toSerialize["certificate-data"] = o.CertificateData
	}
	if !IsNil(o.ExpirationEventIn) {
		toSerialize["expiration-event-in"] = o.ExpirationEventIn
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.Json) {
		toSerialize["json"] = o.Json
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.KeyData) {
		toSerialize["key-data"] = o.KeyData
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.UidToken) {
		toSerialize["uid-token"] = o.UidToken
	}
	return toSerialize, nil
}

type NullableUpdateCertificateValue struct {
	value *UpdateCertificateValue
	isSet bool
}

func (v NullableUpdateCertificateValue) Get() *UpdateCertificateValue {
	return v.value
}

func (v *NullableUpdateCertificateValue) Set(val *UpdateCertificateValue) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCertificateValue) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCertificateValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCertificateValue(val *UpdateCertificateValue) *NullableUpdateCertificateValue {
	return &NullableUpdateCertificateValue{value: val, isSet: true}
}

func (v NullableUpdateCertificateValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCertificateValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


