/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// ReverseRBACClient struct for ReverseRBACClient
type ReverseRBACClient struct {
	Assocs *[]AuthMethodRoleAssociation `json:"assocs,omitempty"`
	AuthMethodName *string `json:"auth_method_name,omitempty"`
}

// NewReverseRBACClient instantiates a new ReverseRBACClient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReverseRBACClient() *ReverseRBACClient {
	this := ReverseRBACClient{}
	return &this
}

// NewReverseRBACClientWithDefaults instantiates a new ReverseRBACClient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReverseRBACClientWithDefaults() *ReverseRBACClient {
	this := ReverseRBACClient{}
	return &this
}

// GetAssocs returns the Assocs field value if set, zero value otherwise.
func (o *ReverseRBACClient) GetAssocs() []AuthMethodRoleAssociation {
	if o == nil || o.Assocs == nil {
		var ret []AuthMethodRoleAssociation
		return ret
	}
	return *o.Assocs
}

// GetAssocsOk returns a tuple with the Assocs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReverseRBACClient) GetAssocsOk() (*[]AuthMethodRoleAssociation, bool) {
	if o == nil || o.Assocs == nil {
		return nil, false
	}
	return o.Assocs, true
}

// HasAssocs returns a boolean if a field has been set.
func (o *ReverseRBACClient) HasAssocs() bool {
	if o != nil && o.Assocs != nil {
		return true
	}

	return false
}

// SetAssocs gets a reference to the given []AuthMethodRoleAssociation and assigns it to the Assocs field.
func (o *ReverseRBACClient) SetAssocs(v []AuthMethodRoleAssociation) {
	o.Assocs = &v
}

// GetAuthMethodName returns the AuthMethodName field value if set, zero value otherwise.
func (o *ReverseRBACClient) GetAuthMethodName() string {
	if o == nil || o.AuthMethodName == nil {
		var ret string
		return ret
	}
	return *o.AuthMethodName
}

// GetAuthMethodNameOk returns a tuple with the AuthMethodName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReverseRBACClient) GetAuthMethodNameOk() (*string, bool) {
	if o == nil || o.AuthMethodName == nil {
		return nil, false
	}
	return o.AuthMethodName, true
}

// HasAuthMethodName returns a boolean if a field has been set.
func (o *ReverseRBACClient) HasAuthMethodName() bool {
	if o != nil && o.AuthMethodName != nil {
		return true
	}

	return false
}

// SetAuthMethodName gets a reference to the given string and assigns it to the AuthMethodName field.
func (o *ReverseRBACClient) SetAuthMethodName(v string) {
	o.AuthMethodName = &v
}

func (o ReverseRBACClient) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Assocs != nil {
		toSerialize["assocs"] = o.Assocs
	}
	if o.AuthMethodName != nil {
		toSerialize["auth_method_name"] = o.AuthMethodName
	}
	return json.Marshal(toSerialize)
}

type NullableReverseRBACClient struct {
	value *ReverseRBACClient
	isSet bool
}

func (v NullableReverseRBACClient) Get() *ReverseRBACClient {
	return v.value
}

func (v *NullableReverseRBACClient) Set(val *ReverseRBACClient) {
	v.value = val
	v.isSet = true
}

func (v NullableReverseRBACClient) IsSet() bool {
	return v.isSet
}

func (v *NullableReverseRBACClient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReverseRBACClient(val *ReverseRBACClient) *NullableReverseRBACClient {
	return &NullableReverseRBACClient{value: val, isSet: true}
}

func (v NullableReverseRBACClient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReverseRBACClient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


