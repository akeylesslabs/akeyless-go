/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// RuleAssigner struct for RuleAssigner
type RuleAssigner struct {
	AccessId *string `json:"access_id,omitempty"`
	UniqueId *string `json:"unique_id,omitempty"`
}

// NewRuleAssigner instantiates a new RuleAssigner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleAssigner() *RuleAssigner {
	this := RuleAssigner{}
	return &this
}

// NewRuleAssignerWithDefaults instantiates a new RuleAssigner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleAssignerWithDefaults() *RuleAssigner {
	this := RuleAssigner{}
	return &this
}

// GetAccessId returns the AccessId field value if set, zero value otherwise.
func (o *RuleAssigner) GetAccessId() string {
	if o == nil || o.AccessId == nil {
		var ret string
		return ret
	}
	return *o.AccessId
}

// GetAccessIdOk returns a tuple with the AccessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleAssigner) GetAccessIdOk() (*string, bool) {
	if o == nil || o.AccessId == nil {
		return nil, false
	}
	return o.AccessId, true
}

// HasAccessId returns a boolean if a field has been set.
func (o *RuleAssigner) HasAccessId() bool {
	if o != nil && o.AccessId != nil {
		return true
	}

	return false
}

// SetAccessId gets a reference to the given string and assigns it to the AccessId field.
func (o *RuleAssigner) SetAccessId(v string) {
	o.AccessId = &v
}

// GetUniqueId returns the UniqueId field value if set, zero value otherwise.
func (o *RuleAssigner) GetUniqueId() string {
	if o == nil || o.UniqueId == nil {
		var ret string
		return ret
	}
	return *o.UniqueId
}

// GetUniqueIdOk returns a tuple with the UniqueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleAssigner) GetUniqueIdOk() (*string, bool) {
	if o == nil || o.UniqueId == nil {
		return nil, false
	}
	return o.UniqueId, true
}

// HasUniqueId returns a boolean if a field has been set.
func (o *RuleAssigner) HasUniqueId() bool {
	if o != nil && o.UniqueId != nil {
		return true
	}

	return false
}

// SetUniqueId gets a reference to the given string and assigns it to the UniqueId field.
func (o *RuleAssigner) SetUniqueId(v string) {
	o.UniqueId = &v
}

func (o RuleAssigner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessId != nil {
		toSerialize["access_id"] = o.AccessId
	}
	if o.UniqueId != nil {
		toSerialize["unique_id"] = o.UniqueId
	}
	return json.Marshal(toSerialize)
}

type NullableRuleAssigner struct {
	value *RuleAssigner
	isSet bool
}

func (v NullableRuleAssigner) Get() *RuleAssigner {
	return v.value
}

func (v *NullableRuleAssigner) Set(val *RuleAssigner) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleAssigner) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleAssigner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleAssigner(val *RuleAssigner) *NullableRuleAssigner {
	return &NullableRuleAssigner{value: val, isSet: true}
}

func (v NullableRuleAssigner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleAssigner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


