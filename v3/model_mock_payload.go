/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// MockPayload struct for MockPayload
type MockPayload struct {
	Vaults *[]string `json:"vaults,omitempty"`
}

// NewMockPayload instantiates a new MockPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMockPayload() *MockPayload {
	this := MockPayload{}
	return &this
}

// NewMockPayloadWithDefaults instantiates a new MockPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMockPayloadWithDefaults() *MockPayload {
	this := MockPayload{}
	return &this
}

// GetVaults returns the Vaults field value if set, zero value otherwise.
func (o *MockPayload) GetVaults() []string {
	if o == nil || o.Vaults == nil {
		var ret []string
		return ret
	}
	return *o.Vaults
}

// GetVaultsOk returns a tuple with the Vaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MockPayload) GetVaultsOk() (*[]string, bool) {
	if o == nil || o.Vaults == nil {
		return nil, false
	}
	return o.Vaults, true
}

// HasVaults returns a boolean if a field has been set.
func (o *MockPayload) HasVaults() bool {
	if o != nil && o.Vaults != nil {
		return true
	}

	return false
}

// SetVaults gets a reference to the given []string and assigns it to the Vaults field.
func (o *MockPayload) SetVaults(v []string) {
	o.Vaults = &v
}

func (o MockPayload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Vaults != nil {
		toSerialize["vaults"] = o.Vaults
	}
	return json.Marshal(toSerialize)
}

type NullableMockPayload struct {
	value *MockPayload
	isSet bool
}

func (v NullableMockPayload) Get() *MockPayload {
	return v.value
}

func (v *NullableMockPayload) Set(val *MockPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableMockPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableMockPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMockPayload(val *MockPayload) *NullableMockPayload {
	return &NullableMockPayload{value: val, isSet: true}
}

func (v NullableMockPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMockPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


