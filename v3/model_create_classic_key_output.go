/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// CreateClassicKeyOutput struct for CreateClassicKeyOutput
type CreateClassicKeyOutput struct {
	ClassicKeyId *string `json:"classic_key_id,omitempty"`
	ClassicKeyName *string `json:"classic_key_name,omitempty"`
	ClassicKeyType *string `json:"classic_key_type,omitempty"`
}

// NewCreateClassicKeyOutput instantiates a new CreateClassicKeyOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateClassicKeyOutput() *CreateClassicKeyOutput {
	this := CreateClassicKeyOutput{}
	return &this
}

// NewCreateClassicKeyOutputWithDefaults instantiates a new CreateClassicKeyOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateClassicKeyOutputWithDefaults() *CreateClassicKeyOutput {
	this := CreateClassicKeyOutput{}
	return &this
}

// GetClassicKeyId returns the ClassicKeyId field value if set, zero value otherwise.
func (o *CreateClassicKeyOutput) GetClassicKeyId() string {
	if o == nil || o.ClassicKeyId == nil {
		var ret string
		return ret
	}
	return *o.ClassicKeyId
}

// GetClassicKeyIdOk returns a tuple with the ClassicKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateClassicKeyOutput) GetClassicKeyIdOk() (*string, bool) {
	if o == nil || o.ClassicKeyId == nil {
		return nil, false
	}
	return o.ClassicKeyId, true
}

// HasClassicKeyId returns a boolean if a field has been set.
func (o *CreateClassicKeyOutput) HasClassicKeyId() bool {
	if o != nil && o.ClassicKeyId != nil {
		return true
	}

	return false
}

// SetClassicKeyId gets a reference to the given string and assigns it to the ClassicKeyId field.
func (o *CreateClassicKeyOutput) SetClassicKeyId(v string) {
	o.ClassicKeyId = &v
}

// GetClassicKeyName returns the ClassicKeyName field value if set, zero value otherwise.
func (o *CreateClassicKeyOutput) GetClassicKeyName() string {
	if o == nil || o.ClassicKeyName == nil {
		var ret string
		return ret
	}
	return *o.ClassicKeyName
}

// GetClassicKeyNameOk returns a tuple with the ClassicKeyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateClassicKeyOutput) GetClassicKeyNameOk() (*string, bool) {
	if o == nil || o.ClassicKeyName == nil {
		return nil, false
	}
	return o.ClassicKeyName, true
}

// HasClassicKeyName returns a boolean if a field has been set.
func (o *CreateClassicKeyOutput) HasClassicKeyName() bool {
	if o != nil && o.ClassicKeyName != nil {
		return true
	}

	return false
}

// SetClassicKeyName gets a reference to the given string and assigns it to the ClassicKeyName field.
func (o *CreateClassicKeyOutput) SetClassicKeyName(v string) {
	o.ClassicKeyName = &v
}

// GetClassicKeyType returns the ClassicKeyType field value if set, zero value otherwise.
func (o *CreateClassicKeyOutput) GetClassicKeyType() string {
	if o == nil || o.ClassicKeyType == nil {
		var ret string
		return ret
	}
	return *o.ClassicKeyType
}

// GetClassicKeyTypeOk returns a tuple with the ClassicKeyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateClassicKeyOutput) GetClassicKeyTypeOk() (*string, bool) {
	if o == nil || o.ClassicKeyType == nil {
		return nil, false
	}
	return o.ClassicKeyType, true
}

// HasClassicKeyType returns a boolean if a field has been set.
func (o *CreateClassicKeyOutput) HasClassicKeyType() bool {
	if o != nil && o.ClassicKeyType != nil {
		return true
	}

	return false
}

// SetClassicKeyType gets a reference to the given string and assigns it to the ClassicKeyType field.
func (o *CreateClassicKeyOutput) SetClassicKeyType(v string) {
	o.ClassicKeyType = &v
}

func (o CreateClassicKeyOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClassicKeyId != nil {
		toSerialize["classic_key_id"] = o.ClassicKeyId
	}
	if o.ClassicKeyName != nil {
		toSerialize["classic_key_name"] = o.ClassicKeyName
	}
	if o.ClassicKeyType != nil {
		toSerialize["classic_key_type"] = o.ClassicKeyType
	}
	return json.Marshal(toSerialize)
}

type NullableCreateClassicKeyOutput struct {
	value *CreateClassicKeyOutput
	isSet bool
}

func (v NullableCreateClassicKeyOutput) Get() *CreateClassicKeyOutput {
	return v.value
}

func (v *NullableCreateClassicKeyOutput) Set(val *CreateClassicKeyOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateClassicKeyOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateClassicKeyOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateClassicKeyOutput(val *CreateClassicKeyOutput) *NullableCreateClassicKeyOutput {
	return &NullableCreateClassicKeyOutput{value: val, isSet: true}
}

func (v NullableCreateClassicKeyOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateClassicKeyOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


