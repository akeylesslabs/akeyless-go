/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
	"time"
)

// GetUserEventStatusOutput struct for GetUserEventStatusOutput
type GetUserEventStatusOutput struct {
	AccessStatus *string `json:"access_status,omitempty"`
	EventCreatedAt *time.Time `json:"event_created_at,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewGetUserEventStatusOutput instantiates a new GetUserEventStatusOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetUserEventStatusOutput() *GetUserEventStatusOutput {
	this := GetUserEventStatusOutput{}
	return &this
}

// NewGetUserEventStatusOutputWithDefaults instantiates a new GetUserEventStatusOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetUserEventStatusOutputWithDefaults() *GetUserEventStatusOutput {
	this := GetUserEventStatusOutput{}
	return &this
}

// GetAccessStatus returns the AccessStatus field value if set, zero value otherwise.
func (o *GetUserEventStatusOutput) GetAccessStatus() string {
	if o == nil || o.AccessStatus == nil {
		var ret string
		return ret
	}
	return *o.AccessStatus
}

// GetAccessStatusOk returns a tuple with the AccessStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserEventStatusOutput) GetAccessStatusOk() (*string, bool) {
	if o == nil || o.AccessStatus == nil {
		return nil, false
	}
	return o.AccessStatus, true
}

// HasAccessStatus returns a boolean if a field has been set.
func (o *GetUserEventStatusOutput) HasAccessStatus() bool {
	if o != nil && o.AccessStatus != nil {
		return true
	}

	return false
}

// SetAccessStatus gets a reference to the given string and assigns it to the AccessStatus field.
func (o *GetUserEventStatusOutput) SetAccessStatus(v string) {
	o.AccessStatus = &v
}

// GetEventCreatedAt returns the EventCreatedAt field value if set, zero value otherwise.
func (o *GetUserEventStatusOutput) GetEventCreatedAt() time.Time {
	if o == nil || o.EventCreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.EventCreatedAt
}

// GetEventCreatedAtOk returns a tuple with the EventCreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserEventStatusOutput) GetEventCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.EventCreatedAt == nil {
		return nil, false
	}
	return o.EventCreatedAt, true
}

// HasEventCreatedAt returns a boolean if a field has been set.
func (o *GetUserEventStatusOutput) HasEventCreatedAt() bool {
	if o != nil && o.EventCreatedAt != nil {
		return true
	}

	return false
}

// SetEventCreatedAt gets a reference to the given time.Time and assigns it to the EventCreatedAt field.
func (o *GetUserEventStatusOutput) SetEventCreatedAt(v time.Time) {
	o.EventCreatedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *GetUserEventStatusOutput) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserEventStatusOutput) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *GetUserEventStatusOutput) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *GetUserEventStatusOutput) SetStatus(v string) {
	o.Status = &v
}

func (o GetUserEventStatusOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessStatus != nil {
		toSerialize["access_status"] = o.AccessStatus
	}
	if o.EventCreatedAt != nil {
		toSerialize["event_created_at"] = o.EventCreatedAt
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableGetUserEventStatusOutput struct {
	value *GetUserEventStatusOutput
	isSet bool
}

func (v NullableGetUserEventStatusOutput) Get() *GetUserEventStatusOutput {
	return v.value
}

func (v *NullableGetUserEventStatusOutput) Set(val *GetUserEventStatusOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableGetUserEventStatusOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableGetUserEventStatusOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetUserEventStatusOutput(val *GetUserEventStatusOutput) *NullableGetUserEventStatusOutput {
	return &NullableGetUserEventStatusOutput{value: val, isSet: true}
}

func (v NullableGetUserEventStatusOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetUserEventStatusOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


