/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// OCIAccessRules OCIAccessRules contains access rules specific to Oracle cloud instance / user authentication
type OCIAccessRules struct {
	GroupOcids *[]string `json:"group_ocids,omitempty"`
	TenantOcid *string `json:"tenant_ocid,omitempty"`
}

// NewOCIAccessRules instantiates a new OCIAccessRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOCIAccessRules() *OCIAccessRules {
	this := OCIAccessRules{}
	return &this
}

// NewOCIAccessRulesWithDefaults instantiates a new OCIAccessRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOCIAccessRulesWithDefaults() *OCIAccessRules {
	this := OCIAccessRules{}
	return &this
}

// GetGroupOcids returns the GroupOcids field value if set, zero value otherwise.
func (o *OCIAccessRules) GetGroupOcids() []string {
	if o == nil || o.GroupOcids == nil {
		var ret []string
		return ret
	}
	return *o.GroupOcids
}

// GetGroupOcidsOk returns a tuple with the GroupOcids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OCIAccessRules) GetGroupOcidsOk() (*[]string, bool) {
	if o == nil || o.GroupOcids == nil {
		return nil, false
	}
	return o.GroupOcids, true
}

// HasGroupOcids returns a boolean if a field has been set.
func (o *OCIAccessRules) HasGroupOcids() bool {
	if o != nil && o.GroupOcids != nil {
		return true
	}

	return false
}

// SetGroupOcids gets a reference to the given []string and assigns it to the GroupOcids field.
func (o *OCIAccessRules) SetGroupOcids(v []string) {
	o.GroupOcids = &v
}

// GetTenantOcid returns the TenantOcid field value if set, zero value otherwise.
func (o *OCIAccessRules) GetTenantOcid() string {
	if o == nil || o.TenantOcid == nil {
		var ret string
		return ret
	}
	return *o.TenantOcid
}

// GetTenantOcidOk returns a tuple with the TenantOcid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OCIAccessRules) GetTenantOcidOk() (*string, bool) {
	if o == nil || o.TenantOcid == nil {
		return nil, false
	}
	return o.TenantOcid, true
}

// HasTenantOcid returns a boolean if a field has been set.
func (o *OCIAccessRules) HasTenantOcid() bool {
	if o != nil && o.TenantOcid != nil {
		return true
	}

	return false
}

// SetTenantOcid gets a reference to the given string and assigns it to the TenantOcid field.
func (o *OCIAccessRules) SetTenantOcid(v string) {
	o.TenantOcid = &v
}

func (o OCIAccessRules) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GroupOcids != nil {
		toSerialize["group_ocids"] = o.GroupOcids
	}
	if o.TenantOcid != nil {
		toSerialize["tenant_ocid"] = o.TenantOcid
	}
	return json.Marshal(toSerialize)
}

type NullableOCIAccessRules struct {
	value *OCIAccessRules
	isSet bool
}

func (v NullableOCIAccessRules) Get() *OCIAccessRules {
	return v.value
}

func (v *NullableOCIAccessRules) Set(val *OCIAccessRules) {
	v.value = val
	v.isSet = true
}

func (v NullableOCIAccessRules) IsSet() bool {
	return v.isSet
}

func (v *NullableOCIAccessRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOCIAccessRules(val *OCIAccessRules) *NullableOCIAccessRules {
	return &NullableOCIAccessRules{value: val, isSet: true}
}

func (v NullableOCIAccessRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOCIAccessRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


