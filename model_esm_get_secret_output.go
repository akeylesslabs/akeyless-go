/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// EsmGetSecretOutput struct for EsmGetSecretOutput
type EsmGetSecretOutput struct {
	BinaryValue *bool `json:"binary_value,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
	Name *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewEsmGetSecretOutput instantiates a new EsmGetSecretOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEsmGetSecretOutput() *EsmGetSecretOutput {
	this := EsmGetSecretOutput{}
	return &this
}

// NewEsmGetSecretOutputWithDefaults instantiates a new EsmGetSecretOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEsmGetSecretOutputWithDefaults() *EsmGetSecretOutput {
	this := EsmGetSecretOutput{}
	return &this
}

// GetBinaryValue returns the BinaryValue field value if set, zero value otherwise.
func (o *EsmGetSecretOutput) GetBinaryValue() bool {
	if o == nil || o.BinaryValue == nil {
		var ret bool
		return ret
	}
	return *o.BinaryValue
}

// GetBinaryValueOk returns a tuple with the BinaryValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmGetSecretOutput) GetBinaryValueOk() (*bool, bool) {
	if o == nil || o.BinaryValue == nil {
		return nil, false
	}
	return o.BinaryValue, true
}

// HasBinaryValue returns a boolean if a field has been set.
func (o *EsmGetSecretOutput) HasBinaryValue() bool {
	if o != nil && o.BinaryValue != nil {
		return true
	}

	return false
}

// SetBinaryValue gets a reference to the given bool and assigns it to the BinaryValue field.
func (o *EsmGetSecretOutput) SetBinaryValue(v bool) {
	o.BinaryValue = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *EsmGetSecretOutput) GetMetadata() map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmGetSecretOutput) GetMetadataOk() (*map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *EsmGetSecretOutput) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *EsmGetSecretOutput) SetMetadata(v map[string]interface{}) {
	o.Metadata = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EsmGetSecretOutput) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmGetSecretOutput) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EsmGetSecretOutput) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EsmGetSecretOutput) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *EsmGetSecretOutput) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmGetSecretOutput) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *EsmGetSecretOutput) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *EsmGetSecretOutput) SetValue(v string) {
	o.Value = &v
}

func (o EsmGetSecretOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BinaryValue != nil {
		toSerialize["binary_value"] = o.BinaryValue
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableEsmGetSecretOutput struct {
	value *EsmGetSecretOutput
	isSet bool
}

func (v NullableEsmGetSecretOutput) Get() *EsmGetSecretOutput {
	return v.value
}

func (v *NullableEsmGetSecretOutput) Set(val *EsmGetSecretOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableEsmGetSecretOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableEsmGetSecretOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEsmGetSecretOutput(val *EsmGetSecretOutput) *NullableEsmGetSecretOutput {
	return &NullableEsmGetSecretOutput{value: val, isSet: true}
}

func (v NullableEsmGetSecretOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEsmGetSecretOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


