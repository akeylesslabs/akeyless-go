/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// KmipSetServerStateOutput struct for KmipSetServerStateOutput
type KmipSetServerStateOutput struct {
	IsActive *bool `json:"is_active,omitempty"`
}

// NewKmipSetServerStateOutput instantiates a new KmipSetServerStateOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKmipSetServerStateOutput() *KmipSetServerStateOutput {
	this := KmipSetServerStateOutput{}
	return &this
}

// NewKmipSetServerStateOutputWithDefaults instantiates a new KmipSetServerStateOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKmipSetServerStateOutputWithDefaults() *KmipSetServerStateOutput {
	this := KmipSetServerStateOutput{}
	return &this
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *KmipSetServerStateOutput) GetIsActive() bool {
	if o == nil || o.IsActive == nil {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KmipSetServerStateOutput) GetIsActiveOk() (*bool, bool) {
	if o == nil || o.IsActive == nil {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *KmipSetServerStateOutput) HasIsActive() bool {
	if o != nil && o.IsActive != nil {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *KmipSetServerStateOutput) SetIsActive(v bool) {
	o.IsActive = &v
}

func (o KmipSetServerStateOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsActive != nil {
		toSerialize["is_active"] = o.IsActive
	}
	return json.Marshal(toSerialize)
}

type NullableKmipSetServerStateOutput struct {
	value *KmipSetServerStateOutput
	isSet bool
}

func (v NullableKmipSetServerStateOutput) Get() *KmipSetServerStateOutput {
	return v.value
}

func (v *NullableKmipSetServerStateOutput) Set(val *KmipSetServerStateOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableKmipSetServerStateOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableKmipSetServerStateOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKmipSetServerStateOutput(val *KmipSetServerStateOutput) *NullableKmipSetServerStateOutput {
	return &NullableKmipSetServerStateOutput{value: val, isSet: true}
}

func (v NullableKmipSetServerStateOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKmipSetServerStateOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


