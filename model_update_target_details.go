/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// checks if the UpdateTargetDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTargetDetails{}

// UpdateTargetDetails struct for UpdateTargetDetails
type UpdateTargetDetails struct {
	// Set output format to JSON
	Json *bool `json:"json,omitempty"`
}

// NewUpdateTargetDetails instantiates a new UpdateTargetDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTargetDetails() *UpdateTargetDetails {
	this := UpdateTargetDetails{}
	var json bool = false
	this.Json = &json
	return &this
}

// NewUpdateTargetDetailsWithDefaults instantiates a new UpdateTargetDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTargetDetailsWithDefaults() *UpdateTargetDetails {
	this := UpdateTargetDetails{}
	var json bool = false
	this.Json = &json
	return &this
}

// GetJson returns the Json field value if set, zero value otherwise.
func (o *UpdateTargetDetails) GetJson() bool {
	if o == nil || IsNil(o.Json) {
		var ret bool
		return ret
	}
	return *o.Json
}

// GetJsonOk returns a tuple with the Json field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTargetDetails) GetJsonOk() (*bool, bool) {
	if o == nil || IsNil(o.Json) {
		return nil, false
	}
	return o.Json, true
}

// HasJson returns a boolean if a field has been set.
func (o *UpdateTargetDetails) HasJson() bool {
	if o != nil && !IsNil(o.Json) {
		return true
	}

	return false
}

// SetJson gets a reference to the given bool and assigns it to the Json field.
func (o *UpdateTargetDetails) SetJson(v bool) {
	o.Json = &v
}

func (o UpdateTargetDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTargetDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Json) {
		toSerialize["json"] = o.Json
	}
	return toSerialize, nil
}

type NullableUpdateTargetDetails struct {
	value *UpdateTargetDetails
	isSet bool
}

func (v NullableUpdateTargetDetails) Get() *UpdateTargetDetails {
	return v.value
}

func (v *NullableUpdateTargetDetails) Set(val *UpdateTargetDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTargetDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTargetDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTargetDetails(val *UpdateTargetDetails) *NullableUpdateTargetDetails {
	return &NullableUpdateTargetDetails{value: val, isSet: true}
}

func (v NullableUpdateTargetDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTargetDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


