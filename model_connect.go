/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// checks if the Connect type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Connect{}

// Connect Connect is a command that performs secure remote access
type Connect struct {
	Helper map[string]interface{} `json:"Helper,omitempty"`
	// used to override .akeyless-connect.rc in tests
	RcFileOverride *string `json:"RcFileOverride,omitempty"`
	// The Bastion API path
	BastionCtrlPath *string `json:"bastion-ctrl-path,omitempty"`
	// The Bastion API Port
	BastionCtrlPort *string `json:"bastion-ctrl-port,omitempty"`
	// The Bastion API protocol
	BastionCtrlProto *string `json:"bastion-ctrl-proto,omitempty"`
	// The Bastion API prefix
	BastionCtrlSubdomain *string `json:"bastion-ctrl-subdomain,omitempty"`
	// The Akeyless certificate issuer name
	CertIssuerName *string `json:"cert-issuer-name,omitempty"`
	// The file from which the identity (private key) for public key authentication is read
	IdentityFile *string `json:"identity-file,omitempty"`
	// Set output format to JSON
	Json *bool `json:"json,omitempty"`
	// The Secret name (for database and AWS producers - producer name)
	Name *string `json:"name,omitempty"`
	// Path to SSH executable. e.g. /usr/bin/ssh
	SshCommand *string `json:"ssh-command,omitempty"`
	// The Use to add offical SSH arguments (except -i)
	SshExtraArgs *string `json:"ssh-extra-args,omitempty"`
	// Set this option to output legacy ('ssh-rsa-cert-v01@openssh.com') signing algorithm name in the ssh certificate.
	SshLegacySigningAlg *bool `json:"ssh-legacy-signing-alg,omitempty"`
	// The target
	Target *string `json:"target,omitempty"`
	// Authentication token (see `/auth` and `/configure`)
	Token *string `json:"token,omitempty"`
	// The universal identity token, Required only for universal_identity authentication
	UidToken *string `json:"uid-token,omitempty"`
	// The jump box server
	ViaBastion *string `json:"via-bastion,omitempty"`
}

// NewConnect instantiates a new Connect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnect() *Connect {
	this := Connect{}
	var bastionCtrlPort string = "9900"
	this.BastionCtrlPort = &bastionCtrlPort
	var bastionCtrlProto string = "http"
	this.BastionCtrlProto = &bastionCtrlProto
	var json bool = false
	this.Json = &json
	var sshLegacySigningAlg bool = false
	this.SshLegacySigningAlg = &sshLegacySigningAlg
	return &this
}

// NewConnectWithDefaults instantiates a new Connect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectWithDefaults() *Connect {
	this := Connect{}
	var bastionCtrlPort string = "9900"
	this.BastionCtrlPort = &bastionCtrlPort
	var bastionCtrlProto string = "http"
	this.BastionCtrlProto = &bastionCtrlProto
	var json bool = false
	this.Json = &json
	var sshLegacySigningAlg bool = false
	this.SshLegacySigningAlg = &sshLegacySigningAlg
	return &this
}

// GetHelper returns the Helper field value if set, zero value otherwise.
func (o *Connect) GetHelper() map[string]interface{} {
	if o == nil || IsNil(o.Helper) {
		var ret map[string]interface{}
		return ret
	}
	return o.Helper
}

// GetHelperOk returns a tuple with the Helper field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connect) GetHelperOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Helper) {
		return map[string]interface{}{}, false
	}
	return o.Helper, true
}

// HasHelper returns a boolean if a field has been set.
func (o *Connect) HasHelper() bool {
	if o != nil && !IsNil(o.Helper) {
		return true
	}

	return false
}

// SetHelper gets a reference to the given map[string]interface{} and assigns it to the Helper field.
func (o *Connect) SetHelper(v map[string]interface{}) {
	o.Helper = v
}

// GetRcFileOverride returns the RcFileOverride field value if set, zero value otherwise.
func (o *Connect) GetRcFileOverride() string {
	if o == nil || IsNil(o.RcFileOverride) {
		var ret string
		return ret
	}
	return *o.RcFileOverride
}

// GetRcFileOverrideOk returns a tuple with the RcFileOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connect) GetRcFileOverrideOk() (*string, bool) {
	if o == nil || IsNil(o.RcFileOverride) {
		return nil, false
	}
	return o.RcFileOverride, true
}

// HasRcFileOverride returns a boolean if a field has been set.
func (o *Connect) HasRcFileOverride() bool {
	if o != nil && !IsNil(o.RcFileOverride) {
		return true
	}

	return false
}

// SetRcFileOverride gets a reference to the given string and assigns it to the RcFileOverride field.
func (o *Connect) SetRcFileOverride(v string) {
	o.RcFileOverride = &v
}

// GetBastionCtrlPath returns the BastionCtrlPath field value if set, zero value otherwise.
func (o *Connect) GetBastionCtrlPath() string {
	if o == nil || IsNil(o.BastionCtrlPath) {
		var ret string
		return ret
	}
	return *o.BastionCtrlPath
}

// GetBastionCtrlPathOk returns a tuple with the BastionCtrlPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connect) GetBastionCtrlPathOk() (*string, bool) {
	if o == nil || IsNil(o.BastionCtrlPath) {
		return nil, false
	}
	return o.BastionCtrlPath, true
}

// HasBastionCtrlPath returns a boolean if a field has been set.
func (o *Connect) HasBastionCtrlPath() bool {
	if o != nil && !IsNil(o.BastionCtrlPath) {
		return true
	}

	return false
}

// SetBastionCtrlPath gets a reference to the given string and assigns it to the BastionCtrlPath field.
func (o *Connect) SetBastionCtrlPath(v string) {
	o.BastionCtrlPath = &v
}

// GetBastionCtrlPort returns the BastionCtrlPort field value if set, zero value otherwise.
func (o *Connect) GetBastionCtrlPort() string {
	if o == nil || IsNil(o.BastionCtrlPort) {
		var ret string
		return ret
	}
	return *o.BastionCtrlPort
}

// GetBastionCtrlPortOk returns a tuple with the BastionCtrlPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connect) GetBastionCtrlPortOk() (*string, bool) {
	if o == nil || IsNil(o.BastionCtrlPort) {
		return nil, false
	}
	return o.BastionCtrlPort, true
}

// HasBastionCtrlPort returns a boolean if a field has been set.
func (o *Connect) HasBastionCtrlPort() bool {
	if o != nil && !IsNil(o.BastionCtrlPort) {
		return true
	}

	return false
}

// SetBastionCtrlPort gets a reference to the given string and assigns it to the BastionCtrlPort field.
func (o *Connect) SetBastionCtrlPort(v string) {
	o.BastionCtrlPort = &v
}

// GetBastionCtrlProto returns the BastionCtrlProto field value if set, zero value otherwise.
func (o *Connect) GetBastionCtrlProto() string {
	if o == nil || IsNil(o.BastionCtrlProto) {
		var ret string
		return ret
	}
	return *o.BastionCtrlProto
}

// GetBastionCtrlProtoOk returns a tuple with the BastionCtrlProto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connect) GetBastionCtrlProtoOk() (*string, bool) {
	if o == nil || IsNil(o.BastionCtrlProto) {
		return nil, false
	}
	return o.BastionCtrlProto, true
}

// HasBastionCtrlProto returns a boolean if a field has been set.
func (o *Connect) HasBastionCtrlProto() bool {
	if o != nil && !IsNil(o.BastionCtrlProto) {
		return true
	}

	return false
}

// SetBastionCtrlProto gets a reference to the given string and assigns it to the BastionCtrlProto field.
func (o *Connect) SetBastionCtrlProto(v string) {
	o.BastionCtrlProto = &v
}

// GetBastionCtrlSubdomain returns the BastionCtrlSubdomain field value if set, zero value otherwise.
func (o *Connect) GetBastionCtrlSubdomain() string {
	if o == nil || IsNil(o.BastionCtrlSubdomain) {
		var ret string
		return ret
	}
	return *o.BastionCtrlSubdomain
}

// GetBastionCtrlSubdomainOk returns a tuple with the BastionCtrlSubdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connect) GetBastionCtrlSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.BastionCtrlSubdomain) {
		return nil, false
	}
	return o.BastionCtrlSubdomain, true
}

// HasBastionCtrlSubdomain returns a boolean if a field has been set.
func (o *Connect) HasBastionCtrlSubdomain() bool {
	if o != nil && !IsNil(o.BastionCtrlSubdomain) {
		return true
	}

	return false
}

// SetBastionCtrlSubdomain gets a reference to the given string and assigns it to the BastionCtrlSubdomain field.
func (o *Connect) SetBastionCtrlSubdomain(v string) {
	o.BastionCtrlSubdomain = &v
}

// GetCertIssuerName returns the CertIssuerName field value if set, zero value otherwise.
func (o *Connect) GetCertIssuerName() string {
	if o == nil || IsNil(o.CertIssuerName) {
		var ret string
		return ret
	}
	return *o.CertIssuerName
}

// GetCertIssuerNameOk returns a tuple with the CertIssuerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connect) GetCertIssuerNameOk() (*string, bool) {
	if o == nil || IsNil(o.CertIssuerName) {
		return nil, false
	}
	return o.CertIssuerName, true
}

// HasCertIssuerName returns a boolean if a field has been set.
func (o *Connect) HasCertIssuerName() bool {
	if o != nil && !IsNil(o.CertIssuerName) {
		return true
	}

	return false
}

// SetCertIssuerName gets a reference to the given string and assigns it to the CertIssuerName field.
func (o *Connect) SetCertIssuerName(v string) {
	o.CertIssuerName = &v
}

// GetIdentityFile returns the IdentityFile field value if set, zero value otherwise.
func (o *Connect) GetIdentityFile() string {
	if o == nil || IsNil(o.IdentityFile) {
		var ret string
		return ret
	}
	return *o.IdentityFile
}

// GetIdentityFileOk returns a tuple with the IdentityFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connect) GetIdentityFileOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityFile) {
		return nil, false
	}
	return o.IdentityFile, true
}

// HasIdentityFile returns a boolean if a field has been set.
func (o *Connect) HasIdentityFile() bool {
	if o != nil && !IsNil(o.IdentityFile) {
		return true
	}

	return false
}

// SetIdentityFile gets a reference to the given string and assigns it to the IdentityFile field.
func (o *Connect) SetIdentityFile(v string) {
	o.IdentityFile = &v
}

// GetJson returns the Json field value if set, zero value otherwise.
func (o *Connect) GetJson() bool {
	if o == nil || IsNil(o.Json) {
		var ret bool
		return ret
	}
	return *o.Json
}

// GetJsonOk returns a tuple with the Json field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connect) GetJsonOk() (*bool, bool) {
	if o == nil || IsNil(o.Json) {
		return nil, false
	}
	return o.Json, true
}

// HasJson returns a boolean if a field has been set.
func (o *Connect) HasJson() bool {
	if o != nil && !IsNil(o.Json) {
		return true
	}

	return false
}

// SetJson gets a reference to the given bool and assigns it to the Json field.
func (o *Connect) SetJson(v bool) {
	o.Json = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Connect) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connect) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Connect) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Connect) SetName(v string) {
	o.Name = &v
}

// GetSshCommand returns the SshCommand field value if set, zero value otherwise.
func (o *Connect) GetSshCommand() string {
	if o == nil || IsNil(o.SshCommand) {
		var ret string
		return ret
	}
	return *o.SshCommand
}

// GetSshCommandOk returns a tuple with the SshCommand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connect) GetSshCommandOk() (*string, bool) {
	if o == nil || IsNil(o.SshCommand) {
		return nil, false
	}
	return o.SshCommand, true
}

// HasSshCommand returns a boolean if a field has been set.
func (o *Connect) HasSshCommand() bool {
	if o != nil && !IsNil(o.SshCommand) {
		return true
	}

	return false
}

// SetSshCommand gets a reference to the given string and assigns it to the SshCommand field.
func (o *Connect) SetSshCommand(v string) {
	o.SshCommand = &v
}

// GetSshExtraArgs returns the SshExtraArgs field value if set, zero value otherwise.
func (o *Connect) GetSshExtraArgs() string {
	if o == nil || IsNil(o.SshExtraArgs) {
		var ret string
		return ret
	}
	return *o.SshExtraArgs
}

// GetSshExtraArgsOk returns a tuple with the SshExtraArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connect) GetSshExtraArgsOk() (*string, bool) {
	if o == nil || IsNil(o.SshExtraArgs) {
		return nil, false
	}
	return o.SshExtraArgs, true
}

// HasSshExtraArgs returns a boolean if a field has been set.
func (o *Connect) HasSshExtraArgs() bool {
	if o != nil && !IsNil(o.SshExtraArgs) {
		return true
	}

	return false
}

// SetSshExtraArgs gets a reference to the given string and assigns it to the SshExtraArgs field.
func (o *Connect) SetSshExtraArgs(v string) {
	o.SshExtraArgs = &v
}

// GetSshLegacySigningAlg returns the SshLegacySigningAlg field value if set, zero value otherwise.
func (o *Connect) GetSshLegacySigningAlg() bool {
	if o == nil || IsNil(o.SshLegacySigningAlg) {
		var ret bool
		return ret
	}
	return *o.SshLegacySigningAlg
}

// GetSshLegacySigningAlgOk returns a tuple with the SshLegacySigningAlg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connect) GetSshLegacySigningAlgOk() (*bool, bool) {
	if o == nil || IsNil(o.SshLegacySigningAlg) {
		return nil, false
	}
	return o.SshLegacySigningAlg, true
}

// HasSshLegacySigningAlg returns a boolean if a field has been set.
func (o *Connect) HasSshLegacySigningAlg() bool {
	if o != nil && !IsNil(o.SshLegacySigningAlg) {
		return true
	}

	return false
}

// SetSshLegacySigningAlg gets a reference to the given bool and assigns it to the SshLegacySigningAlg field.
func (o *Connect) SetSshLegacySigningAlg(v bool) {
	o.SshLegacySigningAlg = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *Connect) GetTarget() string {
	if o == nil || IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connect) GetTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *Connect) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *Connect) SetTarget(v string) {
	o.Target = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *Connect) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connect) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *Connect) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *Connect) SetToken(v string) {
	o.Token = &v
}

// GetUidToken returns the UidToken field value if set, zero value otherwise.
func (o *Connect) GetUidToken() string {
	if o == nil || IsNil(o.UidToken) {
		var ret string
		return ret
	}
	return *o.UidToken
}

// GetUidTokenOk returns a tuple with the UidToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connect) GetUidTokenOk() (*string, bool) {
	if o == nil || IsNil(o.UidToken) {
		return nil, false
	}
	return o.UidToken, true
}

// HasUidToken returns a boolean if a field has been set.
func (o *Connect) HasUidToken() bool {
	if o != nil && !IsNil(o.UidToken) {
		return true
	}

	return false
}

// SetUidToken gets a reference to the given string and assigns it to the UidToken field.
func (o *Connect) SetUidToken(v string) {
	o.UidToken = &v
}

// GetViaBastion returns the ViaBastion field value if set, zero value otherwise.
func (o *Connect) GetViaBastion() string {
	if o == nil || IsNil(o.ViaBastion) {
		var ret string
		return ret
	}
	return *o.ViaBastion
}

// GetViaBastionOk returns a tuple with the ViaBastion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connect) GetViaBastionOk() (*string, bool) {
	if o == nil || IsNil(o.ViaBastion) {
		return nil, false
	}
	return o.ViaBastion, true
}

// HasViaBastion returns a boolean if a field has been set.
func (o *Connect) HasViaBastion() bool {
	if o != nil && !IsNil(o.ViaBastion) {
		return true
	}

	return false
}

// SetViaBastion gets a reference to the given string and assigns it to the ViaBastion field.
func (o *Connect) SetViaBastion(v string) {
	o.ViaBastion = &v
}

func (o Connect) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Connect) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Helper) {
		toSerialize["Helper"] = o.Helper
	}
	if !IsNil(o.RcFileOverride) {
		toSerialize["RcFileOverride"] = o.RcFileOverride
	}
	if !IsNil(o.BastionCtrlPath) {
		toSerialize["bastion-ctrl-path"] = o.BastionCtrlPath
	}
	if !IsNil(o.BastionCtrlPort) {
		toSerialize["bastion-ctrl-port"] = o.BastionCtrlPort
	}
	if !IsNil(o.BastionCtrlProto) {
		toSerialize["bastion-ctrl-proto"] = o.BastionCtrlProto
	}
	if !IsNil(o.BastionCtrlSubdomain) {
		toSerialize["bastion-ctrl-subdomain"] = o.BastionCtrlSubdomain
	}
	if !IsNil(o.CertIssuerName) {
		toSerialize["cert-issuer-name"] = o.CertIssuerName
	}
	if !IsNil(o.IdentityFile) {
		toSerialize["identity-file"] = o.IdentityFile
	}
	if !IsNil(o.Json) {
		toSerialize["json"] = o.Json
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SshCommand) {
		toSerialize["ssh-command"] = o.SshCommand
	}
	if !IsNil(o.SshExtraArgs) {
		toSerialize["ssh-extra-args"] = o.SshExtraArgs
	}
	if !IsNil(o.SshLegacySigningAlg) {
		toSerialize["ssh-legacy-signing-alg"] = o.SshLegacySigningAlg
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.UidToken) {
		toSerialize["uid-token"] = o.UidToken
	}
	if !IsNil(o.ViaBastion) {
		toSerialize["via-bastion"] = o.ViaBastion
	}
	return toSerialize, nil
}

type NullableConnect struct {
	value *Connect
	isSet bool
}

func (v NullableConnect) Get() *Connect {
	return v.value
}

func (v *NullableConnect) Set(val *Connect) {
	v.value = val
	v.isSet = true
}

func (v NullableConnect) IsSet() bool {
	return v.isSet
}

func (v *NullableConnect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnect(val *Connect) *NullableConnect {
	return &NullableConnect{value: val, isSet: true}
}

func (v NullableConnect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


