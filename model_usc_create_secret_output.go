/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// UscCreateSecretOutput struct for UscCreateSecretOutput
type UscCreateSecretOutput struct {
	SecretId *string `json:"secret_id,omitempty"`
	VersionId *string `json:"version_id,omitempty"`
}

// NewUscCreateSecretOutput instantiates a new UscCreateSecretOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUscCreateSecretOutput() *UscCreateSecretOutput {
	this := UscCreateSecretOutput{}
	return &this
}

// NewUscCreateSecretOutputWithDefaults instantiates a new UscCreateSecretOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUscCreateSecretOutputWithDefaults() *UscCreateSecretOutput {
	this := UscCreateSecretOutput{}
	return &this
}

// GetSecretId returns the SecretId field value if set, zero value otherwise.
func (o *UscCreateSecretOutput) GetSecretId() string {
	if o == nil || o.SecretId == nil {
		var ret string
		return ret
	}
	return *o.SecretId
}

// GetSecretIdOk returns a tuple with the SecretId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UscCreateSecretOutput) GetSecretIdOk() (*string, bool) {
	if o == nil || o.SecretId == nil {
		return nil, false
	}
	return o.SecretId, true
}

// HasSecretId returns a boolean if a field has been set.
func (o *UscCreateSecretOutput) HasSecretId() bool {
	if o != nil && o.SecretId != nil {
		return true
	}

	return false
}

// SetSecretId gets a reference to the given string and assigns it to the SecretId field.
func (o *UscCreateSecretOutput) SetSecretId(v string) {
	o.SecretId = &v
}

// GetVersionId returns the VersionId field value if set, zero value otherwise.
func (o *UscCreateSecretOutput) GetVersionId() string {
	if o == nil || o.VersionId == nil {
		var ret string
		return ret
	}
	return *o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UscCreateSecretOutput) GetVersionIdOk() (*string, bool) {
	if o == nil || o.VersionId == nil {
		return nil, false
	}
	return o.VersionId, true
}

// HasVersionId returns a boolean if a field has been set.
func (o *UscCreateSecretOutput) HasVersionId() bool {
	if o != nil && o.VersionId != nil {
		return true
	}

	return false
}

// SetVersionId gets a reference to the given string and assigns it to the VersionId field.
func (o *UscCreateSecretOutput) SetVersionId(v string) {
	o.VersionId = &v
}

func (o UscCreateSecretOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SecretId != nil {
		toSerialize["secret_id"] = o.SecretId
	}
	if o.VersionId != nil {
		toSerialize["version_id"] = o.VersionId
	}
	return json.Marshal(toSerialize)
}

type NullableUscCreateSecretOutput struct {
	value *UscCreateSecretOutput
	isSet bool
}

func (v NullableUscCreateSecretOutput) Get() *UscCreateSecretOutput {
	return v.value
}

func (v *NullableUscCreateSecretOutput) Set(val *UscCreateSecretOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableUscCreateSecretOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableUscCreateSecretOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUscCreateSecretOutput(val *UscCreateSecretOutput) *NullableUscCreateSecretOutput {
	return &NullableUscCreateSecretOutput{value: val, isSet: true}
}

func (v NullableUscCreateSecretOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUscCreateSecretOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


