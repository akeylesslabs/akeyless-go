/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// GetPKICertificateOutput struct for GetPKICertificateOutput
type GetPKICertificateOutput struct {
	CertDisplayId *string `json:"cert_display_id,omitempty"`
	Data *string `json:"data,omitempty"`
	ParentCert *string `json:"parent_cert,omitempty"`
	Path *string `json:"path,omitempty"`
	ReadingToken *string `json:"reading_token,omitempty"`
}

// NewGetPKICertificateOutput instantiates a new GetPKICertificateOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetPKICertificateOutput() *GetPKICertificateOutput {
	this := GetPKICertificateOutput{}
	return &this
}

// NewGetPKICertificateOutputWithDefaults instantiates a new GetPKICertificateOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetPKICertificateOutputWithDefaults() *GetPKICertificateOutput {
	this := GetPKICertificateOutput{}
	return &this
}

// GetCertDisplayId returns the CertDisplayId field value if set, zero value otherwise.
func (o *GetPKICertificateOutput) GetCertDisplayId() string {
	if o == nil || o.CertDisplayId == nil {
		var ret string
		return ret
	}
	return *o.CertDisplayId
}

// GetCertDisplayIdOk returns a tuple with the CertDisplayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPKICertificateOutput) GetCertDisplayIdOk() (*string, bool) {
	if o == nil || o.CertDisplayId == nil {
		return nil, false
	}
	return o.CertDisplayId, true
}

// HasCertDisplayId returns a boolean if a field has been set.
func (o *GetPKICertificateOutput) HasCertDisplayId() bool {
	if o != nil && o.CertDisplayId != nil {
		return true
	}

	return false
}

// SetCertDisplayId gets a reference to the given string and assigns it to the CertDisplayId field.
func (o *GetPKICertificateOutput) SetCertDisplayId(v string) {
	o.CertDisplayId = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *GetPKICertificateOutput) GetData() string {
	if o == nil || o.Data == nil {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPKICertificateOutput) GetDataOk() (*string, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *GetPKICertificateOutput) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *GetPKICertificateOutput) SetData(v string) {
	o.Data = &v
}

// GetParentCert returns the ParentCert field value if set, zero value otherwise.
func (o *GetPKICertificateOutput) GetParentCert() string {
	if o == nil || o.ParentCert == nil {
		var ret string
		return ret
	}
	return *o.ParentCert
}

// GetParentCertOk returns a tuple with the ParentCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPKICertificateOutput) GetParentCertOk() (*string, bool) {
	if o == nil || o.ParentCert == nil {
		return nil, false
	}
	return o.ParentCert, true
}

// HasParentCert returns a boolean if a field has been set.
func (o *GetPKICertificateOutput) HasParentCert() bool {
	if o != nil && o.ParentCert != nil {
		return true
	}

	return false
}

// SetParentCert gets a reference to the given string and assigns it to the ParentCert field.
func (o *GetPKICertificateOutput) SetParentCert(v string) {
	o.ParentCert = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *GetPKICertificateOutput) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPKICertificateOutput) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *GetPKICertificateOutput) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *GetPKICertificateOutput) SetPath(v string) {
	o.Path = &v
}

// GetReadingToken returns the ReadingToken field value if set, zero value otherwise.
func (o *GetPKICertificateOutput) GetReadingToken() string {
	if o == nil || o.ReadingToken == nil {
		var ret string
		return ret
	}
	return *o.ReadingToken
}

// GetReadingTokenOk returns a tuple with the ReadingToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPKICertificateOutput) GetReadingTokenOk() (*string, bool) {
	if o == nil || o.ReadingToken == nil {
		return nil, false
	}
	return o.ReadingToken, true
}

// HasReadingToken returns a boolean if a field has been set.
func (o *GetPKICertificateOutput) HasReadingToken() bool {
	if o != nil && o.ReadingToken != nil {
		return true
	}

	return false
}

// SetReadingToken gets a reference to the given string and assigns it to the ReadingToken field.
func (o *GetPKICertificateOutput) SetReadingToken(v string) {
	o.ReadingToken = &v
}

func (o GetPKICertificateOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CertDisplayId != nil {
		toSerialize["cert_display_id"] = o.CertDisplayId
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.ParentCert != nil {
		toSerialize["parent_cert"] = o.ParentCert
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.ReadingToken != nil {
		toSerialize["reading_token"] = o.ReadingToken
	}
	return json.Marshal(toSerialize)
}

type NullableGetPKICertificateOutput struct {
	value *GetPKICertificateOutput
	isSet bool
}

func (v NullableGetPKICertificateOutput) Get() *GetPKICertificateOutput {
	return v.value
}

func (v *NullableGetPKICertificateOutput) Set(val *GetPKICertificateOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableGetPKICertificateOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableGetPKICertificateOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetPKICertificateOutput(val *GetPKICertificateOutput) *NullableGetPKICertificateOutput {
	return &NullableGetPKICertificateOutput{value: val, isSet: true}
}

func (v NullableGetPKICertificateOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetPKICertificateOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


