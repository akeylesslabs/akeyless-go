/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 0.0.1
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// ItemGeneralInfo struct for ItemGeneralInfo
type ItemGeneralInfo struct {
	CertIssueDetails *CertificateIssueInfo `json:"cert_issue_details,omitempty"`
	DynamicSecretProducerDetails *DynamicSecretProducerInfo `json:"dynamic_secret_producer_details,omitempty"`
}

// NewItemGeneralInfo instantiates a new ItemGeneralInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemGeneralInfo() *ItemGeneralInfo {
	this := ItemGeneralInfo{}
	return &this
}

// NewItemGeneralInfoWithDefaults instantiates a new ItemGeneralInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemGeneralInfoWithDefaults() *ItemGeneralInfo {
	this := ItemGeneralInfo{}
	return &this
}

// GetCertIssueDetails returns the CertIssueDetails field value if set, zero value otherwise.
func (o *ItemGeneralInfo) GetCertIssueDetails() CertificateIssueInfo {
	if o == nil || o.CertIssueDetails == nil {
		var ret CertificateIssueInfo
		return ret
	}
	return *o.CertIssueDetails
}

// GetCertIssueDetailsOk returns a tuple with the CertIssueDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemGeneralInfo) GetCertIssueDetailsOk() (*CertificateIssueInfo, bool) {
	if o == nil || o.CertIssueDetails == nil {
		return nil, false
	}
	return o.CertIssueDetails, true
}

// HasCertIssueDetails returns a boolean if a field has been set.
func (o *ItemGeneralInfo) HasCertIssueDetails() bool {
	if o != nil && o.CertIssueDetails != nil {
		return true
	}

	return false
}

// SetCertIssueDetails gets a reference to the given CertificateIssueInfo and assigns it to the CertIssueDetails field.
func (o *ItemGeneralInfo) SetCertIssueDetails(v CertificateIssueInfo) {
	o.CertIssueDetails = &v
}

// GetDynamicSecretProducerDetails returns the DynamicSecretProducerDetails field value if set, zero value otherwise.
func (o *ItemGeneralInfo) GetDynamicSecretProducerDetails() DynamicSecretProducerInfo {
	if o == nil || o.DynamicSecretProducerDetails == nil {
		var ret DynamicSecretProducerInfo
		return ret
	}
	return *o.DynamicSecretProducerDetails
}

// GetDynamicSecretProducerDetailsOk returns a tuple with the DynamicSecretProducerDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemGeneralInfo) GetDynamicSecretProducerDetailsOk() (*DynamicSecretProducerInfo, bool) {
	if o == nil || o.DynamicSecretProducerDetails == nil {
		return nil, false
	}
	return o.DynamicSecretProducerDetails, true
}

// HasDynamicSecretProducerDetails returns a boolean if a field has been set.
func (o *ItemGeneralInfo) HasDynamicSecretProducerDetails() bool {
	if o != nil && o.DynamicSecretProducerDetails != nil {
		return true
	}

	return false
}

// SetDynamicSecretProducerDetails gets a reference to the given DynamicSecretProducerInfo and assigns it to the DynamicSecretProducerDetails field.
func (o *ItemGeneralInfo) SetDynamicSecretProducerDetails(v DynamicSecretProducerInfo) {
	o.DynamicSecretProducerDetails = &v
}

func (o ItemGeneralInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CertIssueDetails != nil {
		toSerialize["cert_issue_details"] = o.CertIssueDetails
	}
	if o.DynamicSecretProducerDetails != nil {
		toSerialize["dynamic_secret_producer_details"] = o.DynamicSecretProducerDetails
	}
	return json.Marshal(toSerialize)
}

type NullableItemGeneralInfo struct {
	value *ItemGeneralInfo
	isSet bool
}

func (v NullableItemGeneralInfo) Get() *ItemGeneralInfo {
	return v.value
}

func (v *NullableItemGeneralInfo) Set(val *ItemGeneralInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableItemGeneralInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableItemGeneralInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemGeneralInfo(val *ItemGeneralInfo) *NullableItemGeneralInfo {
	return &NullableItemGeneralInfo{value: val, isSet: true}
}

func (v NullableItemGeneralInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemGeneralInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


