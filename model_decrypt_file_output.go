/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// checks if the DecryptFileOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DecryptFileOutput{}

// DecryptFileOutput struct for DecryptFileOutput
type DecryptFileOutput struct {
	Path *string `json:"path,omitempty"`
	PlainText *string `json:"plain_text,omitempty"`
}

// NewDecryptFileOutput instantiates a new DecryptFileOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecryptFileOutput() *DecryptFileOutput {
	this := DecryptFileOutput{}
	return &this
}

// NewDecryptFileOutputWithDefaults instantiates a new DecryptFileOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecryptFileOutputWithDefaults() *DecryptFileOutput {
	this := DecryptFileOutput{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *DecryptFileOutput) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptFileOutput) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *DecryptFileOutput) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *DecryptFileOutput) SetPath(v string) {
	o.Path = &v
}

// GetPlainText returns the PlainText field value if set, zero value otherwise.
func (o *DecryptFileOutput) GetPlainText() string {
	if o == nil || IsNil(o.PlainText) {
		var ret string
		return ret
	}
	return *o.PlainText
}

// GetPlainTextOk returns a tuple with the PlainText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptFileOutput) GetPlainTextOk() (*string, bool) {
	if o == nil || IsNil(o.PlainText) {
		return nil, false
	}
	return o.PlainText, true
}

// HasPlainText returns a boolean if a field has been set.
func (o *DecryptFileOutput) HasPlainText() bool {
	if o != nil && !IsNil(o.PlainText) {
		return true
	}

	return false
}

// SetPlainText gets a reference to the given string and assigns it to the PlainText field.
func (o *DecryptFileOutput) SetPlainText(v string) {
	o.PlainText = &v
}

func (o DecryptFileOutput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DecryptFileOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.PlainText) {
		toSerialize["plain_text"] = o.PlainText
	}
	return toSerialize, nil
}

type NullableDecryptFileOutput struct {
	value *DecryptFileOutput
	isSet bool
}

func (v NullableDecryptFileOutput) Get() *DecryptFileOutput {
	return v.value
}

func (v *NullableDecryptFileOutput) Set(val *DecryptFileOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableDecryptFileOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableDecryptFileOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecryptFileOutput(val *DecryptFileOutput) *NullableDecryptFileOutput {
	return &NullableDecryptFileOutput{value: val, isSet: true}
}

func (v NullableDecryptFileOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecryptFileOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


