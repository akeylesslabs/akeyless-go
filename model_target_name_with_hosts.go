/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// TargetNameWithHosts struct for TargetNameWithHosts
type TargetNameWithHosts struct {
	Hosts *[]string `json:"hosts,omitempty"`
	TargetName *string `json:"target_name,omitempty"`
}

// NewTargetNameWithHosts instantiates a new TargetNameWithHosts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetNameWithHosts() *TargetNameWithHosts {
	this := TargetNameWithHosts{}
	return &this
}

// NewTargetNameWithHostsWithDefaults instantiates a new TargetNameWithHosts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetNameWithHostsWithDefaults() *TargetNameWithHosts {
	this := TargetNameWithHosts{}
	return &this
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *TargetNameWithHosts) GetHosts() []string {
	if o == nil || o.Hosts == nil {
		var ret []string
		return ret
	}
	return *o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetNameWithHosts) GetHostsOk() (*[]string, bool) {
	if o == nil || o.Hosts == nil {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *TargetNameWithHosts) HasHosts() bool {
	if o != nil && o.Hosts != nil {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []string and assigns it to the Hosts field.
func (o *TargetNameWithHosts) SetHosts(v []string) {
	o.Hosts = &v
}

// GetTargetName returns the TargetName field value if set, zero value otherwise.
func (o *TargetNameWithHosts) GetTargetName() string {
	if o == nil || o.TargetName == nil {
		var ret string
		return ret
	}
	return *o.TargetName
}

// GetTargetNameOk returns a tuple with the TargetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetNameWithHosts) GetTargetNameOk() (*string, bool) {
	if o == nil || o.TargetName == nil {
		return nil, false
	}
	return o.TargetName, true
}

// HasTargetName returns a boolean if a field has been set.
func (o *TargetNameWithHosts) HasTargetName() bool {
	if o != nil && o.TargetName != nil {
		return true
	}

	return false
}

// SetTargetName gets a reference to the given string and assigns it to the TargetName field.
func (o *TargetNameWithHosts) SetTargetName(v string) {
	o.TargetName = &v
}

func (o TargetNameWithHosts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hosts != nil {
		toSerialize["hosts"] = o.Hosts
	}
	if o.TargetName != nil {
		toSerialize["target_name"] = o.TargetName
	}
	return json.Marshal(toSerialize)
}

type NullableTargetNameWithHosts struct {
	value *TargetNameWithHosts
	isSet bool
}

func (v NullableTargetNameWithHosts) Get() *TargetNameWithHosts {
	return v.value
}

func (v *NullableTargetNameWithHosts) Set(val *TargetNameWithHosts) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetNameWithHosts) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetNameWithHosts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetNameWithHosts(val *TargetNameWithHosts) *NullableTargetNameWithHosts {
	return &NullableTargetNameWithHosts{value: val, isSet: true}
}

func (v NullableTargetNameWithHosts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetNameWithHosts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


