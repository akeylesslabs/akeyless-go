/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// RotatedSecretUpdateOutput struct for RotatedSecretUpdateOutput
type RotatedSecretUpdateOutput struct {
	Name *string `json:"name,omitempty"`
}

// NewRotatedSecretUpdateOutput instantiates a new RotatedSecretUpdateOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRotatedSecretUpdateOutput() *RotatedSecretUpdateOutput {
	this := RotatedSecretUpdateOutput{}
	return &this
}

// NewRotatedSecretUpdateOutputWithDefaults instantiates a new RotatedSecretUpdateOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRotatedSecretUpdateOutputWithDefaults() *RotatedSecretUpdateOutput {
	this := RotatedSecretUpdateOutput{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RotatedSecretUpdateOutput) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RotatedSecretUpdateOutput) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RotatedSecretUpdateOutput) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RotatedSecretUpdateOutput) SetName(v string) {
	o.Name = &v
}

func (o RotatedSecretUpdateOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableRotatedSecretUpdateOutput struct {
	value *RotatedSecretUpdateOutput
	isSet bool
}

func (v NullableRotatedSecretUpdateOutput) Get() *RotatedSecretUpdateOutput {
	return v.value
}

func (v *NullableRotatedSecretUpdateOutput) Set(val *RotatedSecretUpdateOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableRotatedSecretUpdateOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableRotatedSecretUpdateOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRotatedSecretUpdateOutput(val *RotatedSecretUpdateOutput) *NullableRotatedSecretUpdateOutput {
	return &NullableRotatedSecretUpdateOutput{value: val, isSet: true}
}

func (v NullableRotatedSecretUpdateOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRotatedSecretUpdateOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


