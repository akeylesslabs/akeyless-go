/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// ProducersConfigPart struct for ProducersConfigPart
type ProducersConfigPart struct {
	Producers []Producer `json:"producers,omitempty"`
}

// NewProducersConfigPart instantiates a new ProducersConfigPart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProducersConfigPart() *ProducersConfigPart {
	this := ProducersConfigPart{}
	return &this
}

// NewProducersConfigPartWithDefaults instantiates a new ProducersConfigPart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProducersConfigPartWithDefaults() *ProducersConfigPart {
	this := ProducersConfigPart{}
	return &this
}

// GetProducers returns the Producers field value if set, zero value otherwise.
func (o *ProducersConfigPart) GetProducers() []Producer {
	if o == nil || o.Producers == nil {
		var ret []Producer
		return ret
	}
	return o.Producers
}

// GetProducersOk returns a tuple with the Producers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProducersConfigPart) GetProducersOk() ([]Producer, bool) {
	if o == nil || o.Producers == nil {
		return nil, false
	}
	return o.Producers, true
}

// HasProducers returns a boolean if a field has been set.
func (o *ProducersConfigPart) HasProducers() bool {
	if o != nil && o.Producers != nil {
		return true
	}

	return false
}

// SetProducers gets a reference to the given []Producer and assigns it to the Producers field.
func (o *ProducersConfigPart) SetProducers(v []Producer) {
	o.Producers = v
}

func (o ProducersConfigPart) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Producers != nil {
		toSerialize["producers"] = o.Producers
	}
	return json.Marshal(toSerialize)
}

type NullableProducersConfigPart struct {
	value *ProducersConfigPart
	isSet bool
}

func (v NullableProducersConfigPart) Get() *ProducersConfigPart {
	return v.value
}

func (v *NullableProducersConfigPart) Set(val *ProducersConfigPart) {
	v.value = val
	v.isSet = true
}

func (v NullableProducersConfigPart) IsSet() bool {
	return v.isSet
}

func (v *NullableProducersConfigPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProducersConfigPart(val *ProducersConfigPart) *NullableProducersConfigPart {
	return &NullableProducersConfigPart{value: val, isSet: true}
}

func (v NullableProducersConfigPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProducersConfigPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


