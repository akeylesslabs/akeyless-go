/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// AWSPayload struct for AWSPayload
type AWSPayload struct {
	Key *string `json:"key,omitempty"`
	Region *string `json:"region,omitempty"`
	Secret *string `json:"secret,omitempty"`
}

// NewAWSPayload instantiates a new AWSPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAWSPayload() *AWSPayload {
	this := AWSPayload{}
	return &this
}

// NewAWSPayloadWithDefaults instantiates a new AWSPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAWSPayloadWithDefaults() *AWSPayload {
	this := AWSPayload{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *AWSPayload) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AWSPayload) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *AWSPayload) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *AWSPayload) SetKey(v string) {
	o.Key = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *AWSPayload) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AWSPayload) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *AWSPayload) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *AWSPayload) SetRegion(v string) {
	o.Region = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *AWSPayload) GetSecret() string {
	if o == nil || o.Secret == nil {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AWSPayload) GetSecretOk() (*string, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *AWSPayload) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *AWSPayload) SetSecret(v string) {
	o.Secret = &v
}

func (o AWSPayload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	return json.Marshal(toSerialize)
}

type NullableAWSPayload struct {
	value *AWSPayload
	isSet bool
}

func (v NullableAWSPayload) Get() *AWSPayload {
	return v.value
}

func (v *NullableAWSPayload) Set(val *AWSPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableAWSPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableAWSPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAWSPayload(val *AWSPayload) *NullableAWSPayload {
	return &NullableAWSPayload{value: val, isSet: true}
}

func (v NullableAWSPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAWSPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


