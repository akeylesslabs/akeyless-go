/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// checks if the RawCreds type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawCreds{}

// RawCreds struct for RawCreds
type RawCreds struct {
	AccessId *string `json:"access-id,omitempty"`
	AccessKey *string `json:"access-key,omitempty"`
}

// NewRawCreds instantiates a new RawCreds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawCreds() *RawCreds {
	this := RawCreds{}
	return &this
}

// NewRawCredsWithDefaults instantiates a new RawCreds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawCredsWithDefaults() *RawCreds {
	this := RawCreds{}
	return &this
}

// GetAccessId returns the AccessId field value if set, zero value otherwise.
func (o *RawCreds) GetAccessId() string {
	if o == nil || IsNil(o.AccessId) {
		var ret string
		return ret
	}
	return *o.AccessId
}

// GetAccessIdOk returns a tuple with the AccessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawCreds) GetAccessIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccessId) {
		return nil, false
	}
	return o.AccessId, true
}

// HasAccessId returns a boolean if a field has been set.
func (o *RawCreds) HasAccessId() bool {
	if o != nil && !IsNil(o.AccessId) {
		return true
	}

	return false
}

// SetAccessId gets a reference to the given string and assigns it to the AccessId field.
func (o *RawCreds) SetAccessId(v string) {
	o.AccessId = &v
}

// GetAccessKey returns the AccessKey field value if set, zero value otherwise.
func (o *RawCreds) GetAccessKey() string {
	if o == nil || IsNil(o.AccessKey) {
		var ret string
		return ret
	}
	return *o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawCreds) GetAccessKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AccessKey) {
		return nil, false
	}
	return o.AccessKey, true
}

// HasAccessKey returns a boolean if a field has been set.
func (o *RawCreds) HasAccessKey() bool {
	if o != nil && !IsNil(o.AccessKey) {
		return true
	}

	return false
}

// SetAccessKey gets a reference to the given string and assigns it to the AccessKey field.
func (o *RawCreds) SetAccessKey(v string) {
	o.AccessKey = &v
}

func (o RawCreds) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawCreds) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessId) {
		toSerialize["access-id"] = o.AccessId
	}
	if !IsNil(o.AccessKey) {
		toSerialize["access-key"] = o.AccessKey
	}
	return toSerialize, nil
}

type NullableRawCreds struct {
	value *RawCreds
	isSet bool
}

func (v NullableRawCreds) Get() *RawCreds {
	return v.value
}

func (v *NullableRawCreds) Set(val *RawCreds) {
	v.value = val
	v.isSet = true
}

func (v NullableRawCreds) IsSet() bool {
	return v.isSet
}

func (v *NullableRawCreds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawCreds(val *RawCreds) *NullableRawCreds {
	return &NullableRawCreds{value: val, isSet: true}
}

func (v NullableRawCreds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawCreds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


