/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// checks if the VaultlessTokenizerInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VaultlessTokenizerInfo{}

// VaultlessTokenizerInfo struct for VaultlessTokenizerInfo
type VaultlessTokenizerInfo struct {
	EmailTokenizerInfo *EmailTokenizerInfo `json:"email_tokenizer_info,omitempty"`
	KeyName *string `json:"key_name,omitempty"`
	RegexpTokenizerInfo *RegexpTokenizerInfo `json:"regexp_tokenizer_info,omitempty"`
	TemplateType *string `json:"template_type,omitempty"`
	// Tweak used in the case of internal tweak type
	Tweak *string `json:"tweak,omitempty"`
	TweakType *string `json:"tweak_type,omitempty"`
}

// NewVaultlessTokenizerInfo instantiates a new VaultlessTokenizerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultlessTokenizerInfo() *VaultlessTokenizerInfo {
	this := VaultlessTokenizerInfo{}
	return &this
}

// NewVaultlessTokenizerInfoWithDefaults instantiates a new VaultlessTokenizerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultlessTokenizerInfoWithDefaults() *VaultlessTokenizerInfo {
	this := VaultlessTokenizerInfo{}
	return &this
}

// GetEmailTokenizerInfo returns the EmailTokenizerInfo field value if set, zero value otherwise.
func (o *VaultlessTokenizerInfo) GetEmailTokenizerInfo() EmailTokenizerInfo {
	if o == nil || IsNil(o.EmailTokenizerInfo) {
		var ret EmailTokenizerInfo
		return ret
	}
	return *o.EmailTokenizerInfo
}

// GetEmailTokenizerInfoOk returns a tuple with the EmailTokenizerInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultlessTokenizerInfo) GetEmailTokenizerInfoOk() (*EmailTokenizerInfo, bool) {
	if o == nil || IsNil(o.EmailTokenizerInfo) {
		return nil, false
	}
	return o.EmailTokenizerInfo, true
}

// HasEmailTokenizerInfo returns a boolean if a field has been set.
func (o *VaultlessTokenizerInfo) HasEmailTokenizerInfo() bool {
	if o != nil && !IsNil(o.EmailTokenizerInfo) {
		return true
	}

	return false
}

// SetEmailTokenizerInfo gets a reference to the given EmailTokenizerInfo and assigns it to the EmailTokenizerInfo field.
func (o *VaultlessTokenizerInfo) SetEmailTokenizerInfo(v EmailTokenizerInfo) {
	o.EmailTokenizerInfo = &v
}

// GetKeyName returns the KeyName field value if set, zero value otherwise.
func (o *VaultlessTokenizerInfo) GetKeyName() string {
	if o == nil || IsNil(o.KeyName) {
		var ret string
		return ret
	}
	return *o.KeyName
}

// GetKeyNameOk returns a tuple with the KeyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultlessTokenizerInfo) GetKeyNameOk() (*string, bool) {
	if o == nil || IsNil(o.KeyName) {
		return nil, false
	}
	return o.KeyName, true
}

// HasKeyName returns a boolean if a field has been set.
func (o *VaultlessTokenizerInfo) HasKeyName() bool {
	if o != nil && !IsNil(o.KeyName) {
		return true
	}

	return false
}

// SetKeyName gets a reference to the given string and assigns it to the KeyName field.
func (o *VaultlessTokenizerInfo) SetKeyName(v string) {
	o.KeyName = &v
}

// GetRegexpTokenizerInfo returns the RegexpTokenizerInfo field value if set, zero value otherwise.
func (o *VaultlessTokenizerInfo) GetRegexpTokenizerInfo() RegexpTokenizerInfo {
	if o == nil || IsNil(o.RegexpTokenizerInfo) {
		var ret RegexpTokenizerInfo
		return ret
	}
	return *o.RegexpTokenizerInfo
}

// GetRegexpTokenizerInfoOk returns a tuple with the RegexpTokenizerInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultlessTokenizerInfo) GetRegexpTokenizerInfoOk() (*RegexpTokenizerInfo, bool) {
	if o == nil || IsNil(o.RegexpTokenizerInfo) {
		return nil, false
	}
	return o.RegexpTokenizerInfo, true
}

// HasRegexpTokenizerInfo returns a boolean if a field has been set.
func (o *VaultlessTokenizerInfo) HasRegexpTokenizerInfo() bool {
	if o != nil && !IsNil(o.RegexpTokenizerInfo) {
		return true
	}

	return false
}

// SetRegexpTokenizerInfo gets a reference to the given RegexpTokenizerInfo and assigns it to the RegexpTokenizerInfo field.
func (o *VaultlessTokenizerInfo) SetRegexpTokenizerInfo(v RegexpTokenizerInfo) {
	o.RegexpTokenizerInfo = &v
}

// GetTemplateType returns the TemplateType field value if set, zero value otherwise.
func (o *VaultlessTokenizerInfo) GetTemplateType() string {
	if o == nil || IsNil(o.TemplateType) {
		var ret string
		return ret
	}
	return *o.TemplateType
}

// GetTemplateTypeOk returns a tuple with the TemplateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultlessTokenizerInfo) GetTemplateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateType) {
		return nil, false
	}
	return o.TemplateType, true
}

// HasTemplateType returns a boolean if a field has been set.
func (o *VaultlessTokenizerInfo) HasTemplateType() bool {
	if o != nil && !IsNil(o.TemplateType) {
		return true
	}

	return false
}

// SetTemplateType gets a reference to the given string and assigns it to the TemplateType field.
func (o *VaultlessTokenizerInfo) SetTemplateType(v string) {
	o.TemplateType = &v
}

// GetTweak returns the Tweak field value if set, zero value otherwise.
func (o *VaultlessTokenizerInfo) GetTweak() string {
	if o == nil || IsNil(o.Tweak) {
		var ret string
		return ret
	}
	return *o.Tweak
}

// GetTweakOk returns a tuple with the Tweak field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultlessTokenizerInfo) GetTweakOk() (*string, bool) {
	if o == nil || IsNil(o.Tweak) {
		return nil, false
	}
	return o.Tweak, true
}

// HasTweak returns a boolean if a field has been set.
func (o *VaultlessTokenizerInfo) HasTweak() bool {
	if o != nil && !IsNil(o.Tweak) {
		return true
	}

	return false
}

// SetTweak gets a reference to the given string and assigns it to the Tweak field.
func (o *VaultlessTokenizerInfo) SetTweak(v string) {
	o.Tweak = &v
}

// GetTweakType returns the TweakType field value if set, zero value otherwise.
func (o *VaultlessTokenizerInfo) GetTweakType() string {
	if o == nil || IsNil(o.TweakType) {
		var ret string
		return ret
	}
	return *o.TweakType
}

// GetTweakTypeOk returns a tuple with the TweakType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultlessTokenizerInfo) GetTweakTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TweakType) {
		return nil, false
	}
	return o.TweakType, true
}

// HasTweakType returns a boolean if a field has been set.
func (o *VaultlessTokenizerInfo) HasTweakType() bool {
	if o != nil && !IsNil(o.TweakType) {
		return true
	}

	return false
}

// SetTweakType gets a reference to the given string and assigns it to the TweakType field.
func (o *VaultlessTokenizerInfo) SetTweakType(v string) {
	o.TweakType = &v
}

func (o VaultlessTokenizerInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VaultlessTokenizerInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EmailTokenizerInfo) {
		toSerialize["email_tokenizer_info"] = o.EmailTokenizerInfo
	}
	if !IsNil(o.KeyName) {
		toSerialize["key_name"] = o.KeyName
	}
	if !IsNil(o.RegexpTokenizerInfo) {
		toSerialize["regexp_tokenizer_info"] = o.RegexpTokenizerInfo
	}
	if !IsNil(o.TemplateType) {
		toSerialize["template_type"] = o.TemplateType
	}
	if !IsNil(o.Tweak) {
		toSerialize["tweak"] = o.Tweak
	}
	if !IsNil(o.TweakType) {
		toSerialize["tweak_type"] = o.TweakType
	}
	return toSerialize, nil
}

type NullableVaultlessTokenizerInfo struct {
	value *VaultlessTokenizerInfo
	isSet bool
}

func (v NullableVaultlessTokenizerInfo) Get() *VaultlessTokenizerInfo {
	return v.value
}

func (v *NullableVaultlessTokenizerInfo) Set(val *VaultlessTokenizerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultlessTokenizerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultlessTokenizerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultlessTokenizerInfo(val *VaultlessTokenizerInfo) *NullableVaultlessTokenizerInfo {
	return &NullableVaultlessTokenizerInfo{value: val, isSet: true}
}

func (v NullableVaultlessTokenizerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultlessTokenizerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


