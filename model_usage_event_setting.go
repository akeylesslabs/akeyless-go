/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
	"time"
)

// UsageEventSetting struct for UsageEventSetting
type UsageEventSetting struct {
	Enable *bool `json:"enable,omitempty"`
	EnableTime *time.Time `json:"enable_time,omitempty"`
	IntervalByDays *int64 `json:"interval_by_days,omitempty"`
}

// NewUsageEventSetting instantiates a new UsageEventSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageEventSetting() *UsageEventSetting {
	this := UsageEventSetting{}
	return &this
}

// NewUsageEventSettingWithDefaults instantiates a new UsageEventSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageEventSettingWithDefaults() *UsageEventSetting {
	this := UsageEventSetting{}
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *UsageEventSetting) GetEnable() bool {
	if o == nil || o.Enable == nil {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageEventSetting) GetEnableOk() (*bool, bool) {
	if o == nil || o.Enable == nil {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *UsageEventSetting) HasEnable() bool {
	if o != nil && o.Enable != nil {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *UsageEventSetting) SetEnable(v bool) {
	o.Enable = &v
}

// GetEnableTime returns the EnableTime field value if set, zero value otherwise.
func (o *UsageEventSetting) GetEnableTime() time.Time {
	if o == nil || o.EnableTime == nil {
		var ret time.Time
		return ret
	}
	return *o.EnableTime
}

// GetEnableTimeOk returns a tuple with the EnableTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageEventSetting) GetEnableTimeOk() (*time.Time, bool) {
	if o == nil || o.EnableTime == nil {
		return nil, false
	}
	return o.EnableTime, true
}

// HasEnableTime returns a boolean if a field has been set.
func (o *UsageEventSetting) HasEnableTime() bool {
	if o != nil && o.EnableTime != nil {
		return true
	}

	return false
}

// SetEnableTime gets a reference to the given time.Time and assigns it to the EnableTime field.
func (o *UsageEventSetting) SetEnableTime(v time.Time) {
	o.EnableTime = &v
}

// GetIntervalByDays returns the IntervalByDays field value if set, zero value otherwise.
func (o *UsageEventSetting) GetIntervalByDays() int64 {
	if o == nil || o.IntervalByDays == nil {
		var ret int64
		return ret
	}
	return *o.IntervalByDays
}

// GetIntervalByDaysOk returns a tuple with the IntervalByDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageEventSetting) GetIntervalByDaysOk() (*int64, bool) {
	if o == nil || o.IntervalByDays == nil {
		return nil, false
	}
	return o.IntervalByDays, true
}

// HasIntervalByDays returns a boolean if a field has been set.
func (o *UsageEventSetting) HasIntervalByDays() bool {
	if o != nil && o.IntervalByDays != nil {
		return true
	}

	return false
}

// SetIntervalByDays gets a reference to the given int64 and assigns it to the IntervalByDays field.
func (o *UsageEventSetting) SetIntervalByDays(v int64) {
	o.IntervalByDays = &v
}

func (o UsageEventSetting) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enable != nil {
		toSerialize["enable"] = o.Enable
	}
	if o.EnableTime != nil {
		toSerialize["enable_time"] = o.EnableTime
	}
	if o.IntervalByDays != nil {
		toSerialize["interval_by_days"] = o.IntervalByDays
	}
	return json.Marshal(toSerialize)
}

type NullableUsageEventSetting struct {
	value *UsageEventSetting
	isSet bool
}

func (v NullableUsageEventSetting) Get() *UsageEventSetting {
	return v.value
}

func (v *NullableUsageEventSetting) Set(val *UsageEventSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageEventSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageEventSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageEventSetting(val *UsageEventSetting) *NullableUsageEventSetting {
	return &NullableUsageEventSetting{value: val, isSet: true}
}

func (v NullableUsageEventSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageEventSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


