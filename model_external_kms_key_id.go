/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// ExternalKMSKeyId struct for ExternalKMSKeyId
type ExternalKMSKeyId struct {
	KeyId *string `json:"key_id,omitempty"`
	KeyReference *string `json:"key_reference,omitempty"`
}

// NewExternalKMSKeyId instantiates a new ExternalKMSKeyId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalKMSKeyId() *ExternalKMSKeyId {
	this := ExternalKMSKeyId{}
	return &this
}

// NewExternalKMSKeyIdWithDefaults instantiates a new ExternalKMSKeyId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalKMSKeyIdWithDefaults() *ExternalKMSKeyId {
	this := ExternalKMSKeyId{}
	return &this
}

// GetKeyId returns the KeyId field value if set, zero value otherwise.
func (o *ExternalKMSKeyId) GetKeyId() string {
	if o == nil || o.KeyId == nil {
		var ret string
		return ret
	}
	return *o.KeyId
}

// GetKeyIdOk returns a tuple with the KeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalKMSKeyId) GetKeyIdOk() (*string, bool) {
	if o == nil || o.KeyId == nil {
		return nil, false
	}
	return o.KeyId, true
}

// HasKeyId returns a boolean if a field has been set.
func (o *ExternalKMSKeyId) HasKeyId() bool {
	if o != nil && o.KeyId != nil {
		return true
	}

	return false
}

// SetKeyId gets a reference to the given string and assigns it to the KeyId field.
func (o *ExternalKMSKeyId) SetKeyId(v string) {
	o.KeyId = &v
}

// GetKeyReference returns the KeyReference field value if set, zero value otherwise.
func (o *ExternalKMSKeyId) GetKeyReference() string {
	if o == nil || o.KeyReference == nil {
		var ret string
		return ret
	}
	return *o.KeyReference
}

// GetKeyReferenceOk returns a tuple with the KeyReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalKMSKeyId) GetKeyReferenceOk() (*string, bool) {
	if o == nil || o.KeyReference == nil {
		return nil, false
	}
	return o.KeyReference, true
}

// HasKeyReference returns a boolean if a field has been set.
func (o *ExternalKMSKeyId) HasKeyReference() bool {
	if o != nil && o.KeyReference != nil {
		return true
	}

	return false
}

// SetKeyReference gets a reference to the given string and assigns it to the KeyReference field.
func (o *ExternalKMSKeyId) SetKeyReference(v string) {
	o.KeyReference = &v
}

func (o ExternalKMSKeyId) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.KeyId != nil {
		toSerialize["key_id"] = o.KeyId
	}
	if o.KeyReference != nil {
		toSerialize["key_reference"] = o.KeyReference
	}
	return json.Marshal(toSerialize)
}

type NullableExternalKMSKeyId struct {
	value *ExternalKMSKeyId
	isSet bool
}

func (v NullableExternalKMSKeyId) Get() *ExternalKMSKeyId {
	return v.value
}

func (v *NullableExternalKMSKeyId) Set(val *ExternalKMSKeyId) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalKMSKeyId) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalKMSKeyId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalKMSKeyId(val *ExternalKMSKeyId) *NullableExternalKMSKeyId {
	return &NullableExternalKMSKeyId{value: val, isSet: true}
}

func (v NullableExternalKMSKeyId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalKMSKeyId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


