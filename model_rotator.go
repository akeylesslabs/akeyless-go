/*
Akeyless API

The purpose of this application is to provide access to Akeyless API.

API version: 2.0
Contact: support@akeyless.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// Rotator struct for Rotator
type Rotator struct {
	Id *int64 `json:"id,omitempty"`
	LastError *string `json:"last_error,omitempty"`
	Name *string `json:"name,omitempty"`
	RotationInterval *int32 `json:"rotation_interval,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewRotator instantiates a new Rotator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRotator() *Rotator {
	this := Rotator{}
	return &this
}

// NewRotatorWithDefaults instantiates a new Rotator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRotatorWithDefaults() *Rotator {
	this := Rotator{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Rotator) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rotator) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Rotator) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Rotator) SetId(v int64) {
	o.Id = &v
}

// GetLastError returns the LastError field value if set, zero value otherwise.
func (o *Rotator) GetLastError() string {
	if o == nil || o.LastError == nil {
		var ret string
		return ret
	}
	return *o.LastError
}

// GetLastErrorOk returns a tuple with the LastError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rotator) GetLastErrorOk() (*string, bool) {
	if o == nil || o.LastError == nil {
		return nil, false
	}
	return o.LastError, true
}

// HasLastError returns a boolean if a field has been set.
func (o *Rotator) HasLastError() bool {
	if o != nil && o.LastError != nil {
		return true
	}

	return false
}

// SetLastError gets a reference to the given string and assigns it to the LastError field.
func (o *Rotator) SetLastError(v string) {
	o.LastError = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Rotator) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rotator) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Rotator) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Rotator) SetName(v string) {
	o.Name = &v
}

// GetRotationInterval returns the RotationInterval field value if set, zero value otherwise.
func (o *Rotator) GetRotationInterval() int32 {
	if o == nil || o.RotationInterval == nil {
		var ret int32
		return ret
	}
	return *o.RotationInterval
}

// GetRotationIntervalOk returns a tuple with the RotationInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rotator) GetRotationIntervalOk() (*int32, bool) {
	if o == nil || o.RotationInterval == nil {
		return nil, false
	}
	return o.RotationInterval, true
}

// HasRotationInterval returns a boolean if a field has been set.
func (o *Rotator) HasRotationInterval() bool {
	if o != nil && o.RotationInterval != nil {
		return true
	}

	return false
}

// SetRotationInterval gets a reference to the given int32 and assigns it to the RotationInterval field.
func (o *Rotator) SetRotationInterval(v int32) {
	o.RotationInterval = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Rotator) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rotator) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Rotator) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Rotator) SetType(v string) {
	o.Type = &v
}

func (o Rotator) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LastError != nil {
		toSerialize["last_error"] = o.LastError
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.RotationInterval != nil {
		toSerialize["rotation_interval"] = o.RotationInterval
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableRotator struct {
	value *Rotator
	isSet bool
}

func (v NullableRotator) Get() *Rotator {
	return v.value
}

func (v *NullableRotator) Set(val *Rotator) {
	v.value = val
	v.isSet = true
}

func (v NullableRotator) IsSet() bool {
	return v.isSet
}

func (v *NullableRotator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRotator(val *Rotator) *NullableRotator {
	return &NullableRotator{value: val, isSet: true}
}

func (v NullableRotator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRotator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


