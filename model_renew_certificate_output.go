/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// RenewCertificateOutput struct for RenewCertificateOutput
type RenewCertificateOutput struct {
	Cert *string `json:"cert,omitempty"`
	CertDisplayId *string `json:"cert_display_id,omitempty"`
	ItemId *string `json:"item_id,omitempty"`
	ParentCert *string `json:"parent_cert,omitempty"`
	PrivateKey *string `json:"private_key,omitempty"`
	ReadingToken *string `json:"reading_token,omitempty"`
}

// NewRenewCertificateOutput instantiates a new RenewCertificateOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenewCertificateOutput() *RenewCertificateOutput {
	this := RenewCertificateOutput{}
	return &this
}

// NewRenewCertificateOutputWithDefaults instantiates a new RenewCertificateOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenewCertificateOutputWithDefaults() *RenewCertificateOutput {
	this := RenewCertificateOutput{}
	return &this
}

// GetCert returns the Cert field value if set, zero value otherwise.
func (o *RenewCertificateOutput) GetCert() string {
	if o == nil || o.Cert == nil {
		var ret string
		return ret
	}
	return *o.Cert
}

// GetCertOk returns a tuple with the Cert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenewCertificateOutput) GetCertOk() (*string, bool) {
	if o == nil || o.Cert == nil {
		return nil, false
	}
	return o.Cert, true
}

// HasCert returns a boolean if a field has been set.
func (o *RenewCertificateOutput) HasCert() bool {
	if o != nil && o.Cert != nil {
		return true
	}

	return false
}

// SetCert gets a reference to the given string and assigns it to the Cert field.
func (o *RenewCertificateOutput) SetCert(v string) {
	o.Cert = &v
}

// GetCertDisplayId returns the CertDisplayId field value if set, zero value otherwise.
func (o *RenewCertificateOutput) GetCertDisplayId() string {
	if o == nil || o.CertDisplayId == nil {
		var ret string
		return ret
	}
	return *o.CertDisplayId
}

// GetCertDisplayIdOk returns a tuple with the CertDisplayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenewCertificateOutput) GetCertDisplayIdOk() (*string, bool) {
	if o == nil || o.CertDisplayId == nil {
		return nil, false
	}
	return o.CertDisplayId, true
}

// HasCertDisplayId returns a boolean if a field has been set.
func (o *RenewCertificateOutput) HasCertDisplayId() bool {
	if o != nil && o.CertDisplayId != nil {
		return true
	}

	return false
}

// SetCertDisplayId gets a reference to the given string and assigns it to the CertDisplayId field.
func (o *RenewCertificateOutput) SetCertDisplayId(v string) {
	o.CertDisplayId = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *RenewCertificateOutput) GetItemId() string {
	if o == nil || o.ItemId == nil {
		var ret string
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenewCertificateOutput) GetItemIdOk() (*string, bool) {
	if o == nil || o.ItemId == nil {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *RenewCertificateOutput) HasItemId() bool {
	if o != nil && o.ItemId != nil {
		return true
	}

	return false
}

// SetItemId gets a reference to the given string and assigns it to the ItemId field.
func (o *RenewCertificateOutput) SetItemId(v string) {
	o.ItemId = &v
}

// GetParentCert returns the ParentCert field value if set, zero value otherwise.
func (o *RenewCertificateOutput) GetParentCert() string {
	if o == nil || o.ParentCert == nil {
		var ret string
		return ret
	}
	return *o.ParentCert
}

// GetParentCertOk returns a tuple with the ParentCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenewCertificateOutput) GetParentCertOk() (*string, bool) {
	if o == nil || o.ParentCert == nil {
		return nil, false
	}
	return o.ParentCert, true
}

// HasParentCert returns a boolean if a field has been set.
func (o *RenewCertificateOutput) HasParentCert() bool {
	if o != nil && o.ParentCert != nil {
		return true
	}

	return false
}

// SetParentCert gets a reference to the given string and assigns it to the ParentCert field.
func (o *RenewCertificateOutput) SetParentCert(v string) {
	o.ParentCert = &v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *RenewCertificateOutput) GetPrivateKey() string {
	if o == nil || o.PrivateKey == nil {
		var ret string
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenewCertificateOutput) GetPrivateKeyOk() (*string, bool) {
	if o == nil || o.PrivateKey == nil {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *RenewCertificateOutput) HasPrivateKey() bool {
	if o != nil && o.PrivateKey != nil {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given string and assigns it to the PrivateKey field.
func (o *RenewCertificateOutput) SetPrivateKey(v string) {
	o.PrivateKey = &v
}

// GetReadingToken returns the ReadingToken field value if set, zero value otherwise.
func (o *RenewCertificateOutput) GetReadingToken() string {
	if o == nil || o.ReadingToken == nil {
		var ret string
		return ret
	}
	return *o.ReadingToken
}

// GetReadingTokenOk returns a tuple with the ReadingToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenewCertificateOutput) GetReadingTokenOk() (*string, bool) {
	if o == nil || o.ReadingToken == nil {
		return nil, false
	}
	return o.ReadingToken, true
}

// HasReadingToken returns a boolean if a field has been set.
func (o *RenewCertificateOutput) HasReadingToken() bool {
	if o != nil && o.ReadingToken != nil {
		return true
	}

	return false
}

// SetReadingToken gets a reference to the given string and assigns it to the ReadingToken field.
func (o *RenewCertificateOutput) SetReadingToken(v string) {
	o.ReadingToken = &v
}

func (o RenewCertificateOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cert != nil {
		toSerialize["cert"] = o.Cert
	}
	if o.CertDisplayId != nil {
		toSerialize["cert_display_id"] = o.CertDisplayId
	}
	if o.ItemId != nil {
		toSerialize["item_id"] = o.ItemId
	}
	if o.ParentCert != nil {
		toSerialize["parent_cert"] = o.ParentCert
	}
	if o.PrivateKey != nil {
		toSerialize["private_key"] = o.PrivateKey
	}
	if o.ReadingToken != nil {
		toSerialize["reading_token"] = o.ReadingToken
	}
	return json.Marshal(toSerialize)
}

type NullableRenewCertificateOutput struct {
	value *RenewCertificateOutput
	isSet bool
}

func (v NullableRenewCertificateOutput) Get() *RenewCertificateOutput {
	return v.value
}

func (v *NullableRenewCertificateOutput) Set(val *RenewCertificateOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableRenewCertificateOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableRenewCertificateOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenewCertificateOutput(val *RenewCertificateOutput) *NullableRenewCertificateOutput {
	return &NullableRenewCertificateOutput{value: val, isSet: true}
}

func (v NullableRenewCertificateOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenewCertificateOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


