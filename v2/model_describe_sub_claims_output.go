/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// DescribeSubClaimsOutput struct for DescribeSubClaimsOutput
type DescribeSubClaimsOutput struct {
	SubClaims *map[string][]string `json:"sub_claims,omitempty"`
}

// NewDescribeSubClaimsOutput instantiates a new DescribeSubClaimsOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeSubClaimsOutput() *DescribeSubClaimsOutput {
	this := DescribeSubClaimsOutput{}
	return &this
}

// NewDescribeSubClaimsOutputWithDefaults instantiates a new DescribeSubClaimsOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeSubClaimsOutputWithDefaults() *DescribeSubClaimsOutput {
	this := DescribeSubClaimsOutput{}
	return &this
}

// GetSubClaims returns the SubClaims field value if set, zero value otherwise.
func (o *DescribeSubClaimsOutput) GetSubClaims() map[string][]string {
	if o == nil || o.SubClaims == nil {
		var ret map[string][]string
		return ret
	}
	return *o.SubClaims
}

// GetSubClaimsOk returns a tuple with the SubClaims field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeSubClaimsOutput) GetSubClaimsOk() (*map[string][]string, bool) {
	if o == nil || o.SubClaims == nil {
		return nil, false
	}
	return o.SubClaims, true
}

// HasSubClaims returns a boolean if a field has been set.
func (o *DescribeSubClaimsOutput) HasSubClaims() bool {
	if o != nil && o.SubClaims != nil {
		return true
	}

	return false
}

// SetSubClaims gets a reference to the given map[string][]string and assigns it to the SubClaims field.
func (o *DescribeSubClaimsOutput) SetSubClaims(v map[string][]string) {
	o.SubClaims = &v
}

func (o DescribeSubClaimsOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SubClaims != nil {
		toSerialize["sub_claims"] = o.SubClaims
	}
	return json.Marshal(toSerialize)
}

type NullableDescribeSubClaimsOutput struct {
	value *DescribeSubClaimsOutput
	isSet bool
}

func (v NullableDescribeSubClaimsOutput) Get() *DescribeSubClaimsOutput {
	return v.value
}

func (v *NullableDescribeSubClaimsOutput) Set(val *DescribeSubClaimsOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeSubClaimsOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeSubClaimsOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeSubClaimsOutput(val *DescribeSubClaimsOutput) *NullableDescribeSubClaimsOutput {
	return &NullableDescribeSubClaimsOutput{value: val, isSet: true}
}

func (v NullableDescribeSubClaimsOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeSubClaimsOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


