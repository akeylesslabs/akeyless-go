/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// SamlConfigPart struct for SamlConfigPart
type SamlConfigPart struct {
	OpenIdConnectAccessId *string `json:"open_id_connect_access_id,omitempty"`
	SamlAccessId *string `json:"saml_access_id,omitempty"`
}

// NewSamlConfigPart instantiates a new SamlConfigPart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSamlConfigPart() *SamlConfigPart {
	this := SamlConfigPart{}
	return &this
}

// NewSamlConfigPartWithDefaults instantiates a new SamlConfigPart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSamlConfigPartWithDefaults() *SamlConfigPart {
	this := SamlConfigPart{}
	return &this
}

// GetOpenIdConnectAccessId returns the OpenIdConnectAccessId field value if set, zero value otherwise.
func (o *SamlConfigPart) GetOpenIdConnectAccessId() string {
	if o == nil || o.OpenIdConnectAccessId == nil {
		var ret string
		return ret
	}
	return *o.OpenIdConnectAccessId
}

// GetOpenIdConnectAccessIdOk returns a tuple with the OpenIdConnectAccessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SamlConfigPart) GetOpenIdConnectAccessIdOk() (*string, bool) {
	if o == nil || o.OpenIdConnectAccessId == nil {
		return nil, false
	}
	return o.OpenIdConnectAccessId, true
}

// HasOpenIdConnectAccessId returns a boolean if a field has been set.
func (o *SamlConfigPart) HasOpenIdConnectAccessId() bool {
	if o != nil && o.OpenIdConnectAccessId != nil {
		return true
	}

	return false
}

// SetOpenIdConnectAccessId gets a reference to the given string and assigns it to the OpenIdConnectAccessId field.
func (o *SamlConfigPart) SetOpenIdConnectAccessId(v string) {
	o.OpenIdConnectAccessId = &v
}

// GetSamlAccessId returns the SamlAccessId field value if set, zero value otherwise.
func (o *SamlConfigPart) GetSamlAccessId() string {
	if o == nil || o.SamlAccessId == nil {
		var ret string
		return ret
	}
	return *o.SamlAccessId
}

// GetSamlAccessIdOk returns a tuple with the SamlAccessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SamlConfigPart) GetSamlAccessIdOk() (*string, bool) {
	if o == nil || o.SamlAccessId == nil {
		return nil, false
	}
	return o.SamlAccessId, true
}

// HasSamlAccessId returns a boolean if a field has been set.
func (o *SamlConfigPart) HasSamlAccessId() bool {
	if o != nil && o.SamlAccessId != nil {
		return true
	}

	return false
}

// SetSamlAccessId gets a reference to the given string and assigns it to the SamlAccessId field.
func (o *SamlConfigPart) SetSamlAccessId(v string) {
	o.SamlAccessId = &v
}

func (o SamlConfigPart) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OpenIdConnectAccessId != nil {
		toSerialize["open_id_connect_access_id"] = o.OpenIdConnectAccessId
	}
	if o.SamlAccessId != nil {
		toSerialize["saml_access_id"] = o.SamlAccessId
	}
	return json.Marshal(toSerialize)
}

type NullableSamlConfigPart struct {
	value *SamlConfigPart
	isSet bool
}

func (v NullableSamlConfigPart) Get() *SamlConfigPart {
	return v.value
}

func (v *NullableSamlConfigPart) Set(val *SamlConfigPart) {
	v.value = val
	v.isSet = true
}

func (v NullableSamlConfigPart) IsSet() bool {
	return v.isSet
}

func (v *NullableSamlConfigPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSamlConfigPart(val *SamlConfigPart) *NullableSamlConfigPart {
	return &NullableSamlConfigPart{value: val, isSet: true}
}

func (v NullableSamlConfigPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSamlConfigPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


