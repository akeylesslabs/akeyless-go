/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// UIdentityConfigPart struct for UIdentityConfigPart
type UIdentityConfigPart struct {
	UidAccessId *string `json:"uid_access_id,omitempty"`
	UidEnable *bool `json:"uid_enable,omitempty"`
	UidRotateInterval *string `json:"uid_rotate_interval,omitempty"`
	UidStatus *string `json:"uid_status,omitempty"`
	UidToken *string `json:"uid_token,omitempty"`
}

// NewUIdentityConfigPart instantiates a new UIdentityConfigPart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUIdentityConfigPart() *UIdentityConfigPart {
	this := UIdentityConfigPart{}
	return &this
}

// NewUIdentityConfigPartWithDefaults instantiates a new UIdentityConfigPart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUIdentityConfigPartWithDefaults() *UIdentityConfigPart {
	this := UIdentityConfigPart{}
	return &this
}

// GetUidAccessId returns the UidAccessId field value if set, zero value otherwise.
func (o *UIdentityConfigPart) GetUidAccessId() string {
	if o == nil || o.UidAccessId == nil {
		var ret string
		return ret
	}
	return *o.UidAccessId
}

// GetUidAccessIdOk returns a tuple with the UidAccessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIdentityConfigPart) GetUidAccessIdOk() (*string, bool) {
	if o == nil || o.UidAccessId == nil {
		return nil, false
	}
	return o.UidAccessId, true
}

// HasUidAccessId returns a boolean if a field has been set.
func (o *UIdentityConfigPart) HasUidAccessId() bool {
	if o != nil && o.UidAccessId != nil {
		return true
	}

	return false
}

// SetUidAccessId gets a reference to the given string and assigns it to the UidAccessId field.
func (o *UIdentityConfigPart) SetUidAccessId(v string) {
	o.UidAccessId = &v
}

// GetUidEnable returns the UidEnable field value if set, zero value otherwise.
func (o *UIdentityConfigPart) GetUidEnable() bool {
	if o == nil || o.UidEnable == nil {
		var ret bool
		return ret
	}
	return *o.UidEnable
}

// GetUidEnableOk returns a tuple with the UidEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIdentityConfigPart) GetUidEnableOk() (*bool, bool) {
	if o == nil || o.UidEnable == nil {
		return nil, false
	}
	return o.UidEnable, true
}

// HasUidEnable returns a boolean if a field has been set.
func (o *UIdentityConfigPart) HasUidEnable() bool {
	if o != nil && o.UidEnable != nil {
		return true
	}

	return false
}

// SetUidEnable gets a reference to the given bool and assigns it to the UidEnable field.
func (o *UIdentityConfigPart) SetUidEnable(v bool) {
	o.UidEnable = &v
}

// GetUidRotateInterval returns the UidRotateInterval field value if set, zero value otherwise.
func (o *UIdentityConfigPart) GetUidRotateInterval() string {
	if o == nil || o.UidRotateInterval == nil {
		var ret string
		return ret
	}
	return *o.UidRotateInterval
}

// GetUidRotateIntervalOk returns a tuple with the UidRotateInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIdentityConfigPart) GetUidRotateIntervalOk() (*string, bool) {
	if o == nil || o.UidRotateInterval == nil {
		return nil, false
	}
	return o.UidRotateInterval, true
}

// HasUidRotateInterval returns a boolean if a field has been set.
func (o *UIdentityConfigPart) HasUidRotateInterval() bool {
	if o != nil && o.UidRotateInterval != nil {
		return true
	}

	return false
}

// SetUidRotateInterval gets a reference to the given string and assigns it to the UidRotateInterval field.
func (o *UIdentityConfigPart) SetUidRotateInterval(v string) {
	o.UidRotateInterval = &v
}

// GetUidStatus returns the UidStatus field value if set, zero value otherwise.
func (o *UIdentityConfigPart) GetUidStatus() string {
	if o == nil || o.UidStatus == nil {
		var ret string
		return ret
	}
	return *o.UidStatus
}

// GetUidStatusOk returns a tuple with the UidStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIdentityConfigPart) GetUidStatusOk() (*string, bool) {
	if o == nil || o.UidStatus == nil {
		return nil, false
	}
	return o.UidStatus, true
}

// HasUidStatus returns a boolean if a field has been set.
func (o *UIdentityConfigPart) HasUidStatus() bool {
	if o != nil && o.UidStatus != nil {
		return true
	}

	return false
}

// SetUidStatus gets a reference to the given string and assigns it to the UidStatus field.
func (o *UIdentityConfigPart) SetUidStatus(v string) {
	o.UidStatus = &v
}

// GetUidToken returns the UidToken field value if set, zero value otherwise.
func (o *UIdentityConfigPart) GetUidToken() string {
	if o == nil || o.UidToken == nil {
		var ret string
		return ret
	}
	return *o.UidToken
}

// GetUidTokenOk returns a tuple with the UidToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIdentityConfigPart) GetUidTokenOk() (*string, bool) {
	if o == nil || o.UidToken == nil {
		return nil, false
	}
	return o.UidToken, true
}

// HasUidToken returns a boolean if a field has been set.
func (o *UIdentityConfigPart) HasUidToken() bool {
	if o != nil && o.UidToken != nil {
		return true
	}

	return false
}

// SetUidToken gets a reference to the given string and assigns it to the UidToken field.
func (o *UIdentityConfigPart) SetUidToken(v string) {
	o.UidToken = &v
}

func (o UIdentityConfigPart) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UidAccessId != nil {
		toSerialize["uid_access_id"] = o.UidAccessId
	}
	if o.UidEnable != nil {
		toSerialize["uid_enable"] = o.UidEnable
	}
	if o.UidRotateInterval != nil {
		toSerialize["uid_rotate_interval"] = o.UidRotateInterval
	}
	if o.UidStatus != nil {
		toSerialize["uid_status"] = o.UidStatus
	}
	if o.UidToken != nil {
		toSerialize["uid_token"] = o.UidToken
	}
	return json.Marshal(toSerialize)
}

type NullableUIdentityConfigPart struct {
	value *UIdentityConfigPart
	isSet bool
}

func (v NullableUIdentityConfigPart) Get() *UIdentityConfigPart {
	return v.value
}

func (v *NullableUIdentityConfigPart) Set(val *UIdentityConfigPart) {
	v.value = val
	v.isSet = true
}

func (v NullableUIdentityConfigPart) IsSet() bool {
	return v.isSet
}

func (v *NullableUIdentityConfigPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUIdentityConfigPart(val *UIdentityConfigPart) *NullableUIdentityConfigPart {
	return &NullableUIdentityConfigPart{value: val, isSet: true}
}

func (v NullableUIdentityConfigPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUIdentityConfigPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


