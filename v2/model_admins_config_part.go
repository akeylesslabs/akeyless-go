/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// AdminsConfigPart struct for AdminsConfigPart
type AdminsConfigPart struct {
	AllowedAccess *map[string]AllowedAccess `json:"allowed_access,omitempty"`
}

// NewAdminsConfigPart instantiates a new AdminsConfigPart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminsConfigPart() *AdminsConfigPart {
	this := AdminsConfigPart{}
	return &this
}

// NewAdminsConfigPartWithDefaults instantiates a new AdminsConfigPart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminsConfigPartWithDefaults() *AdminsConfigPart {
	this := AdminsConfigPart{}
	return &this
}

// GetAllowedAccess returns the AllowedAccess field value if set, zero value otherwise.
func (o *AdminsConfigPart) GetAllowedAccess() map[string]AllowedAccess {
	if o == nil || o.AllowedAccess == nil {
		var ret map[string]AllowedAccess
		return ret
	}
	return *o.AllowedAccess
}

// GetAllowedAccessOk returns a tuple with the AllowedAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminsConfigPart) GetAllowedAccessOk() (*map[string]AllowedAccess, bool) {
	if o == nil || o.AllowedAccess == nil {
		return nil, false
	}
	return o.AllowedAccess, true
}

// HasAllowedAccess returns a boolean if a field has been set.
func (o *AdminsConfigPart) HasAllowedAccess() bool {
	if o != nil && o.AllowedAccess != nil {
		return true
	}

	return false
}

// SetAllowedAccess gets a reference to the given map[string]AllowedAccess and assigns it to the AllowedAccess field.
func (o *AdminsConfigPart) SetAllowedAccess(v map[string]AllowedAccess) {
	o.AllowedAccess = &v
}

func (o AdminsConfigPart) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowedAccess != nil {
		toSerialize["allowed_access"] = o.AllowedAccess
	}
	return json.Marshal(toSerialize)
}

type NullableAdminsConfigPart struct {
	value *AdminsConfigPart
	isSet bool
}

func (v NullableAdminsConfigPart) Get() *AdminsConfigPart {
	return v.value
}

func (v *NullableAdminsConfigPart) Set(val *AdminsConfigPart) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminsConfigPart) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminsConfigPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminsConfigPart(val *AdminsConfigPart) *NullableAdminsConfigPart {
	return &NullableAdminsConfigPart{value: val, isSet: true}
}

func (v NullableAdminsConfigPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminsConfigPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


