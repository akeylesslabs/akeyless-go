/*
 * Akeyless API
 *
 * The purpose of this application is to provide access to Akeyless API.
 *
 * API version: 2.0
 * Contact: support@akeyless.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package akeyless

import (
	"encoding/json"
)

// AttributeTypeAndValue AttributeTypeAndValue mirrors the ASN.1 structure of the same name in RFC 5280, Section 4.1.2.4.
type AttributeTypeAndValue struct {
	Type *[]int64 `json:"Type,omitempty"`
	Value *map[string]interface{} `json:"Value,omitempty"`
}

// NewAttributeTypeAndValue instantiates a new AttributeTypeAndValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributeTypeAndValue() *AttributeTypeAndValue {
	this := AttributeTypeAndValue{}
	return &this
}

// NewAttributeTypeAndValueWithDefaults instantiates a new AttributeTypeAndValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeTypeAndValueWithDefaults() *AttributeTypeAndValue {
	this := AttributeTypeAndValue{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AttributeTypeAndValue) GetType() []int64 {
	if o == nil || o.Type == nil {
		var ret []int64
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeTypeAndValue) GetTypeOk() (*[]int64, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AttributeTypeAndValue) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given []int64 and assigns it to the Type field.
func (o *AttributeTypeAndValue) SetType(v []int64) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *AttributeTypeAndValue) GetValue() map[string]interface{} {
	if o == nil || o.Value == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeTypeAndValue) GetValueOk() (*map[string]interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *AttributeTypeAndValue) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *AttributeTypeAndValue) SetValue(v map[string]interface{}) {
	o.Value = &v
}

func (o AttributeTypeAndValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	if o.Value != nil {
		toSerialize["Value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableAttributeTypeAndValue struct {
	value *AttributeTypeAndValue
	isSet bool
}

func (v NullableAttributeTypeAndValue) Get() *AttributeTypeAndValue {
	return v.value
}

func (v *NullableAttributeTypeAndValue) Set(val *AttributeTypeAndValue) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeTypeAndValue) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeTypeAndValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeTypeAndValue(val *AttributeTypeAndValue) *NullableAttributeTypeAndValue {
	return &NullableAttributeTypeAndValue{value: val, isSet: true}
}

func (v NullableAttributeTypeAndValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeTypeAndValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


